%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set-10.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: MSI
%%CreationDate: 2/26/2021
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 10 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2021-02-26T00:20:20+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-02-26T00:20:20+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2021-02-26T00:20:19+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>200</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAyAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A7z+aMU8nl+3EMskLLeRN&#xA;6kTyxkEK/CrQsjj4+NKHrTDFlAWd3liedvOOjSItzfzalaPI3pXMwMFwJEorEqBQqWqOgHQBTu2R&#xA;1EOEE3y/Gx/R9zuNDPHknHGYC5bA/wDFD9Io9d3pnlj8yrLUUVLrclgnroKEFq8RLHuQTTqtRmNj&#xA;1II/H2tuu7DniO23Wv8AiT+g0Wb5lOgdirsVdirE/wAyNc1jTNGjj0f0/r16zwqZSUAX0nqVkDKY&#xA;2VuLBqNSh27h4TIEBu05iMkTIWAbrvrp8WEeXPzC81yadI99FJd6dYOvr6lEqs8ddl9QA0kA61H4&#xA;5rY6iYsHcRPN7DP2TppcMsZEJ5Y2IE/HY9O5kuj/AJqWzSldYgEFlI7C21a3+O3I5bLMgLyQsAwq&#xA;TUUBZuHTNlCpi4m3ktVpMmCXDMUWfYuM7FXYq7FXYq838y/m0yaw2geXNNudRvleWC7vYlQpaSRM&#xA;UYvE5TkoYbszItOjE5s8PZ/pE8hqP3/H+0+SLSbyBqktj5zvrPWPNj32uXc3pvo0k6yQAKwVniqq&#xA;gOeJ4xgI6r1Vhvl2rxxOMGMKiBzrf4/r3CvYc0yXYq7FXYq7FXEgCp2A6nFUh1HVFVSRIRMHFKGi&#xA;oAwrX6Moy9p6bBkGPJOIJ+za9+7y72yGCchYCeRyJJGskZ5I4DKw7g5ZjyRnESibiRYYSiQaK7Jo&#xA;dirsVdiqC1fWdN0izN3qEwhh5BFJqSzkEhVA6mgP6+mThjMzQV435o/O24vZZLXSw1nYEAeup/fO&#xA;D1+MH4Nv5foYjK/zunxSo3M+XL9r0Gn9m9TkhxGo+R5/seu+VHMnlbR5CeRextmLDoSYVNcnOYkT&#xA;Ici6LLjMJGMucTR+DDvzf8x+cbDQXh8u6RHfw3SPFeTPSV4lYcSPqpHx1DdfiA7rk4QYA0+ezrOh&#xA;a9fWl5ehNJ1ezZmLsjyRzKVKekJiTLGByqPV5gb/ABoNshk088gMYbkjl+P0/N2eg1OKOeE5+nhk&#xA;DYG3y/V/pXrf5S6NH5h8t/pnTrhS0N9JFLEystRGEIoxA/ZNen7XiMwI6OUBR527nV+0EMszcaBj&#xA;XfRs/fs9uzNeTdirsVdiqS+a9Ni1TT006QsguJABcRErLCVBIkjYbhgaD3BIwESI2b9POMZcUhdd&#xA;O95iVbyAlzoWoEXVlrKTCC/hYCRgkRVkaN1bkRUE0bbr45gSxzx8VixLq9Zjz4dacfBLgyY6AhLk&#xA;aI5EV92/cw/QdEm1m21Gyiu3sy8cdJlBZQVlV/jUEEqQhBoCd+hynQS4ST0p2PtRHixQiK4uLa/d&#xA;y/t2fTGbZ87dirsVdirsVfP6vZaL+YXmi6ntrkQSyXC3GqF4/q8S3VwXq0NPV4oyUZ1ZqD4iAM6W&#xA;U5TwQjtsBt12DFr8nrOSG61lb2FP0hYNFAszqrSxqfUDostC3A8egNMs7UIPCY8pfsQ+gc5Zm7FX&#xA;Yq7FXYqlfmGd4bBpFr8IJIBpWgrmLr80sWmyTj9UYEhu08BLJGJ6l4h+cAvtU0aN/rUdvYeuDdxy&#xA;s8asZBwhLekkrMElZWKcd/EUrnBdh9p+Nrp5Mg4skonhoDoLI36mIoG/vdzqtNwYgByHP8eRe0eR&#xA;7ZLXydotvHMbiOKygWO4Y1MiBBxcn/KG+d12dxeBEyjwSNnh7rJNOmz1xmjYTvM1pdirsVdirzb8&#xA;+5ZE8n2qqBwlvo1c1NaCGVqU7hgpBr2zH1WYwxmv4tnfezmnjl1Q4v4Bxfj52858x6d5TtfIGiQC&#xA;SC21y7lgmu7iVl9b0rlHJZiGakaim1Ow7nNecUTCIH1l6SGtyx1OXJkJ8CII8rFf7Is58o/nT5au&#xA;fN+jeQtNgeeCSxjFrq5dVRnitFn9MxDkVIQFWq1Q4K0zdGNPAZJmcjI8ybeoXFpBcLSVakdGHUfT&#xA;jGZHJgwTzl+V1peC41jy/a21r5pCkQXlDHy5Di5YUkiLlSRV4zy6VWtQTkPRlCuqafl75TuPLtgY&#xA;mhhs1uB611aQV4fWnp6rJvQJUUXqeNK9N5Zc3HvW6ZCI62fsZblTB2KuxV2Ksf8ANPl/VNWudHms&#xA;NQNgun3iXF0FBDTwqwLxcgaBWA3BBqadMuxZRC7F2FRj6OJJUWVElhRhIC4VqMpqrAEH4geh7YDM&#xA;EIUYfJvlyC5uLiGzWKS6Cif0y0YJWvxAIVCk1340rmL4MLuvx+C58u0s8oxjKViPK9/vTrLXBdir&#xA;sVdirsVedfmT5G1nUknPly2tml1WJrS/Mx9MRrJyDTin2jSRqr3ND89lo9VGP1k+ncfqQQmPlz8t&#xA;rbRbieVbuSb6zFbRzFqVJtYvSXjttVepJORza8ziBXK/tWmaZr0uxV2KuxV2KqF5ZQXkDQzglGBX&#xA;Y0IqKVGVZ8Iy45Y5fTIUWeOZhISHMMV1z8u9PvfL2p2NPrNxcWs0dn6yqypM0ZET8TQFlehFe+aH&#xA;s32ZwaXL4gMpSHLpXy5/d5ObqO0Z5I8NADqnPk2wvdO8oaHp98gjvbPT7W3uowVIWWKBUdaqSpow&#xA;PTbOjdenGKuxV2KuxVK/MnlrSvMWmNp2pIzwcuaFGZGSQKVVxQ0NOR2ao8RkZxEomJ5FyNJqp4Mg&#xA;yQ+oPK73/nHuRtK1SCHUIbm+uVhh02a4iosEfrI1w9CJv3hhVkQgbV6jqMbTaXw5Xdu57V7d/N4x&#xA;AR4d7PX5PRvJmgRWGhaWb3S7ay1m1tFtZ3iWNmHAnlxlQfZkYmSlerb71zMLzzIsCuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxVI/N/nPQ/KemLf6tIypK/o28UalnllILBF7DZTuxAy/Bp5ZTUVYn5a/NHWNcvLyODSHKkxfo+K&#xA;nFkSh9aS4ZmoAGpwFASO2+Q1PBAiMDxy61yHxdji7OPDx5SMcOl85f1Y8/jyeiwGUwRmYKJSoMgS&#xA;pXlTfiTQ0rlbgSqzXJfixdirsVdirsVYP5n/ADa8ueWPN0Pl/Wy1slxax3MV9SsYLvInF6bj+769&#xA;MzcOhnkx8ce/ki2QWvmrSbgMyyfuq/upV+JXQ9HUr2I3+Wc5PtjHjyShlEoSia3B5d/u63yrq5Q0&#xA;siAY72m6srKGUgqwqCOhBzaxkCLHIuORTeFDsVdirsVS/VNcsdNjeS6dY4oVLzyuwREUCpLM1ANs&#xA;ux4TLki0nuvzF8urawyWEh1O6ukWS1s7Xizur/ZZmJCRoafadgMcmLwwZZCIQHOUtgyjEyNAWWRW&#xA;d3FdQLLGwNQOSg14nuDmFg1WLMOLHISHkynjlE1IUrZewdirsVdiqXX2uWlrcC24tLNsZAo2RT+0&#xA;xNBmo1nbOPDl8ICU59a/hHeSdvx0cnFpZSjxch96VS+a3e9iSAARcxzPbj3LE+A8KU8Tmnl7Qyya&#xA;iOPCOK5VQ3262eu3dQHfIOUNCIwMpbbfj8fcyG1u7W7gWe1mSeB/sSxsHU9tiKjOwlEg0XWKuBXY&#xA;q7FXYqpXd5a2du9zdTJBBHu8sjBVFdupwxiSaCsb1bznZrPHptpK0d7dpWJwgLRhwSjsrig2Uniw&#xA;r45lY9MTueSLZLbOz20TsasyKSfEkVzFkKKWC/mvotzq8/laCGP1I4NVW4uyTxCwRwuXYkb96Cnc&#xA;jM7RSAjMHrGkxkYkEcwj9JPly3v7uK2t4rZNMhjM83OPhBUuF+AEujMOVT+0OvbMeMDGIEfpPKuv&#xA;Jtz5ZZJcU5GUjztk9hPNPaq80PoSVZTEWD0CsQDUfzAA5Q1EIjFDsVdirsVQ19qFrYxCW5YpHvVg&#xA;rNQKpYk8QfDG0iJPJ5fqt35W86tLOR6ukXtYplliH72FV4BiGHqJx/vImUgite5Gc9qfayWj1fgS&#xA;iPDBHq35SA3+Bu+8bc93YYuz/ExcYPq7nnf5O2eoWWsXHls3s093bxypPp6kvbiZJhxuIyQhjDJR&#xA;fs0Jb4mGwzofaHEe0uzY5MMRcuGUSaEvd7/i06c+DmqXuL6XskeOzgjcUdI0Vh1oQoB6ZVgBGOIO&#xA;xoOPkNyNd6tlrB2KuxVRvbkW1s81KlR8I8SdhkoR4jSl4F+Yvnny5rHmmz8o6rNMumJcGXXJoA55&#xA;skTNDbKsXJ25SlAadGp4bb/TaecIGcedbfrYsr/LPynZW1hHDMk3MxB3jmBjlUN/dwuOq+klFI/m&#xA;G+eW6/Oe0+0ckM1+FhJjGIO13V357n5C6Du4/uMMTH6pdWf+VLT0NMLdRNIzoT/J9lfvpXMz2W0v&#xA;haUn+fIke7kPutxe0snFkruCc50rgOxV2KuxVg3mt3TUL2R34WkKxPKSdqsoVQAN2Zm+FQBUnYZw&#xA;3bXZ+p1eqOPCLFAnehy6u40mWGPGJSYxreqaHfaro/14KPLV1aSEC4FFuLuP0RFBNETSoikd1ibq&#xA;wrSoGdt2H2dDDCUoR/ejhjxWDcYjnEjYCxRrqN3X6jLKRonbnXvZ95G0+x0by9ZaJCQklrGeUBrV&#xA;CzFylT1K8qHBl7Uw5tRKAkDMcx7vx0azikI8RGzIssa3Yq7FXYq8v/Om5SA6ZJI1UiWZzERUblF5&#xA;dRXrTMrDm8LHOdXTlaLS+Pmjjvh4jzYF5n85Wp1q51Wxn9ON5OcM8nwgAIF2B9lzSZ9fknMCBNDk&#xA;9xoexMOHBecRBr1En9PRm/5Q/m15f1exs9FvdSZtelmnhgimB/eCH4k4PSgDx7orGvwt4Zk6bFOA&#xA;JnIyvf3eTxXaGTHPNI4wBC9q6+bMPO03CK2QoriTmPiAIBVkcGh7grtnP+1PaeXTYRCG3iWD39OX&#xA;3NvZunjkkSf4UgNz+jvImq+YTpcl7NPFFSzkUiWeENRU4sGP+7WoKZk+xuDN4RjlJozNe7hAseW2&#xA;3uY9ozjxjh7mVeSvLyeXfLVro6GRltmm+KV1kc+pM8leSLGCPj+H4RtnR5cpyS4jV+TgGr2TvK0O&#xA;xV2KuxVgn5txed/0RZ3flGFri8tZXe6gXg3OExMtDG5/efGQeK75l6Q4+Kp8it0g/Nf5ZPL9Y1TQ&#xA;Ln6hq7CRg/pCWN2dAvxRsaRseCjmu1B8Snamo7Q7N02qo5Y8u4kXXTbn9++zfg1E8f0lf+Wvk2XR&#xA;WW6muW1a8YOk2pz8A6h6Fooz8UoT4VPEmlco0/aU8pjDBH/BY7Wdtx/NjzoDvHyZ5cIiCZn1l6Jm&#xA;zcV2KuxV2KrJoY5omikHJG2IwgkGwrDtP8jeWNH8wXl7pOmB9dvXe5m1G5DMqczV+DNUDkW6IO+/&#xA;SmYnaHaupmRp8Q9VcyKgB7/4j5C/sLkYsUa45H093VObny61zKJzcG3llAW7WGoV17jt1zQ6j2el&#xA;mn4hyeHOW2QQupd/z87cjHrhAcNcQH030TpESNFRAFRAFVR0AGwGdLjhGERGIoDYOASSbLeTQ7FX&#xA;Yq7FXnnkyHVtXs9aLT+i1tql5ZlJUUlmiejEsNmFWNGpXb7hphwXx739zn6/NhmYnEDH0i/f1oft&#xA;+DK5PLytYw2kciQpC4dFWJeKlQOIQArx4kV2zF7SwZc8QMeSWL3dftDjYckYm5DiTG2sbS2C+lEi&#xA;OF4lwo5Ee7dT9+Om0OHDXBGINVdb/Pn9qMmaU+ZKvmW1OxV2KuxVivnvyKnmq3RTcm3kgimWAcQQ&#xA;ZJAOJZuvEFdxT5UwykTjlAfxOVodR4OaOQi+Evnv8xfJXm/yxplldzW0JeC8BhUtFMsy28Es8jCM&#xA;8qp6cJJ5qPClTTNdo9NKEyZcnp+3e2MGp08YYyTKwSKIrY8/2Wm+i/kz54vNd0HVG8vWnl+LSdVt&#xA;Lm7pcgzzRJMHmaP0iyKFUGg29s2ZLxwfSskMUoAkRXANQGAND475RkxQmKkBL37soyI5Gl2WMXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FULY6Xptg1w1lbR2xu5mubr0lCepM/&#xA;25Gp1Zu574qisVdirsVdirsVdirsVQuo6TpepwiDUrOG9hBqIriNZVr8mBGKorFXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FV&#xA;skkcUbSSMEjQFndjQBQKkknoBiSmMSTQ5pbonmbRNbR2065Evpu6MjBkesbcSwVwpKnYhhsQQRsc&#xA;PDtfRlkxyhIxkKI700wMHYq7FXYq7FXYqhb7VdOsIBPd3CRRH7JJqW7/AAgVLfRglIR5tuHBPKag&#xA;LKtHdW0kjxxyo8kZ4yIrAsppWhA6ZIxIalTArsVdirsVdiriQASdgNycVQun6pp+oRerZzrMnemx&#xA;HzU0I+nBGQIsNubBPGamKKKwtTsVdirsVdirsVQ9xqFjbzRQzzok0zBYoyfiYk0G3XrtXAZANsMM&#xA;5AkCwOaIwtTsVdirsVdirsVSOXzhpNtqj6bfiWxnDcYXuEKxTLSvKKXdGHtWo7jL/wAvIx4huFRd&#xA;vr+mTD+99MkgAPtUHdTXpQ+OaWPa+CyJHgkDVS2+fd8XIOmn039yOmVWhdWpxKkNXpQjvmzccGng&#xA;OraRdHyhrutaXcy6bqllG9xDBCTFNG0Q5gRceFOnEjhyYdftUFX5vBh1nhbR+m99pcWwqPv50dtn&#xA;bZNVlzYayevnR/iH+dzI8j83vdk7PZwOxqzRozH3Kg5fMUS6lWyKuxV2KuxVh/nqLUL26sdLt7ea&#xA;W3uFla4k9QR2iUXin1hVKyy1Y/DGDxP7VaYy1UcUCQf3n8Iqz+z8U3aeMTMGd8HVBabolppd7Nqu&#xA;sX8Fy1sBFE8vEtGaJwESAhYdyyiNVqRx3rtkdPi4gDIXl69a/HNzdVrpmPBAeHh7h1955y+7yYP5&#xA;2s4fKHmXV9bsZFi1++uorzTvjKvcK/BDbrHWkis3qKwAqKhuwzoNNLxcYifpAo+Xm6p7jbvI9vE8&#xA;g4yMil1HZiNxvmikN2SpgV2KuxV2KsZ1XzxoMWpNo0F0s+pRD1LmGFgTEisoYSEfZLcqUzB7V7QG&#xA;hxDLkiTGR4R76J/Q5Gn0xymglV1oYvdSh1TTL1NNuZfgMkVFkcgOxaRK8ZqkKOJA25Hl0GT02owa&#xA;nGMmM8MpC/2EfAudj1WXEDjyR8TEOh6f1Zc4/czDSXvWsI/rzI92tVmeIEIzKaVAO4rmXRA35uty&#xA;mHEeC+HpfNF4tbsVdirsVYnqHmW+1DWbry7ozCzu7QK13fTJy4o1P7lOjNuPtbZVKZMjCPMO2w6O&#xA;GLFHPmHFCViMQeZH849B7t0r8iLEmr6gbuPneesY4NQuCzTzBQS4DN+zxAYUC1FdtshhMeI7b955&#xA;lye1Bk8KFH01ZhHaMe739xJvfruz9WVlDKQysKqw3BBzIdCRTeKHYq7FXYq4kDqadsVYB5v1/TZv&#xA;MMnlfX9IMui3MUNNTaReAmuC6xx8RwkRiYm4tGSwpXYAkZ+DERDjgfV3e5CR+UdFYWepro1xeX+n&#xA;29831drtneVUlhiJWNnoXjD8qEe/XcnlvbDQ58s8OXHEegHiEee57uvmHY6DNCPFGXV6hqOoWtnG&#xA;PXfh6tVQgV9q/jmXru0sWlo5L9X4Li4sEsl8PR4JrWkXkOsJbPfXOiWqSXEcMET0ikEwQxlgytFN&#xA;E/FtqFaUStRnVYMmOcOKIjPio33/ABaTYNF6/wDlx5hutd8q293dIi3MLy2kzRf3TvbOYmeP/JYp&#xA;UZrtZiEMlDkd/mgMnzFS7FXYq7FWL+e9LvZ7ew1LTntor/Srn143vCywcWikhYOVo3+7aj3y7AYx&#xA;MiRuY15875p8ngWsTfmh5y8x3OmWdjLaSRkpeXFfhRHUijzRj00QqSOMe7j7XMiuXGXQDhH45qZE&#xA;iieT2vyJ5Nv7PSbOPzFd/p+8s5PVtLi7iU/V6gAiFm5SN3ozH5UyuUzGwDzYs6zHS7FXYq7FUPqE&#xA;UMtjPHO7xwujCR42ZHCkblWSjKfcb5GeeOKJnLlHdMYmRoPCLr8qNX8u315r/kqZtStZ0eK6sZmX&#xA;6zHyIflHI4ZXKkVo/buScp1ObS9u6UQJ4eCdjnzA5SAI2IPMfopy8c56ae45hJL784BYaow0jS5L&#xA;LWIKeub8JEJQoYvFcRNV6pRfT9MhiTTYV5ZHs77O5dJpxjzcEvUd4Enn13AXWaoZJXG6L3jyD5gv&#xA;df8ALcGp3mlzaTNOWJtZyGJFdnU0U8T25KD+vMjVYhCfCDxOEGRZjpdirsVdirzrz7caj5X1S881&#xA;2dq91BLZrDcJFG0siuhLB6CihQqfEzGi9aHpkBiJnxCuTs4azGdMMUxImM+IVy3HU+/y+Tyfyvrf&#xA;5i+btft7/T43stBspOMpDiKEqBUxSy8f3nMAc0ROPfita5k4sERsHFz6zJkNk1vdD8fad3vvkjzB&#xA;p+t6Kk+nStcWcBEC3DgqWKorDZgpPwuNyN/fBmweEeEtEpmRJPVkGVMXYq7FXYqwr8y7TT1sYrvU&#xA;Tc3Gn3E9tY3Ngs7Q29JpGRJWClCDzlXkeXT5DLsEBIkHuJ+SpXc/ll5XstXGraJFFZXvqETQBBNC&#xA;7yKykhSeUThWIQoQB/KclpNbCQlCJEq50dx70yiRzUvy78qXFhCsNrevYXtq0RuBG7TJdIqJ631i&#xA;KXo5kLgOlKDj8sxcPtBp9aZCH1R6GgR7q6fjubcumnjonkXpxAPUVp0rhIBabSDVvI+g6vpt5pt+&#xA;jzWV6eTQlgBGa1rFQfBmP2bpY6OcpYiRxG6/hHuHRuzZzkAutuvX4pno+kado+m2+m6bAtvZWyBI&#xA;YlrsB4k7k+5zMyZJTkZS5lpRmQV2KuxV2KqF9ZWt9ayWt1GJYJVKSRsAVZWBBBB2IIPfDGVKp2Ol&#xA;WdnaxW0S1jhXigNBsOlVUKv4YTMqUXkVdirsVdirsVdiqEutLtLmVJXUrKjA80PEsAQeLeI2zX6r&#xA;szDmmJyHqiRuNrroe8fgN+PUSgCByQ1z5V8t3WqQ6rc6bbzajbikF08amRRvsCfmc2ozzEeEE00J&#xA;oAAKDYDoMqV2KuxV2KuxVplVgQwBB6g7jFVCOwtY0MaIFj34oKcVr4D575IyKoTy95a0fy/ZNZ6V&#xA;CYYHKM4Z3clo4Y7dTVyaUihRdttsM8kpmzzVM8grsVdirsVWyRRSoUlRXQ0JVgCNjUbH3xVAz6Qo&#xA;dZbGT6nNz5SOo5B1ofhKEhe/0ZqsnZURISwHwp3vXIjfYx5fZt0cmOpNVMcQ/HVda6LY2t/JewKy&#xA;SSqVdAfg+IhiaHvVfHDpux8GDPLNjBEpCiOm5v8AR315Lk1U5wEJcgjs2jjOxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuBBFQ&#xA;aj2xV2KuxV2KuxV2KuxVZPcQW8Lz3EiwwxjlJLIwVVHiWOwwEgbllCEpGoiye5eCCKjcHocLF2Ku&#xA;xV2KuxV2KtPIiU5sF5HitTSpPYYpAJWiaFpWhDqZUAZ4wRyCtXiSOoBoaYaQvwK7FXYq7FXYqskm&#xA;hi4+rIqc2CJyIHJj0UV6k+GEC1X4FdirsVdirsVdirsVdirsVY/r/mK2tb6LTXmjg9ZHMzSiRWC8&#xA;aq8R48HVSKSfF8NRXLI1EcR5fjn3NmPFLIajz/HL9SS/p3UdOk1Mj98beFb22i5qwaHfmqMlWYEL&#xA;VajqchGcpEgbnpv+Phz83NOnjUTP0wvhMgDz8x3jr39E/wDLPmuw16AtArRTx7TQSCjKQaH2O46j&#xA;Ig30IPcWjVaSWIjcSieUhyP6j5FO8LiuxV2KuxV2KvFNU/M3UdSt7nSdXsGbSuJS+urNSJ0ZJ0Kf&#xA;uyW+0oaoUHfwBqM7U6HGY8PFwmXK/wBbndn5MmLJ4sI8XB+ovVfKcsL+XbBYphcLDCsRkFdzGOO9&#xA;S/h4nNfCPCALtr1sjLNKRiY2bo+abZJxXYq7FXYq7FXnXmvW7y6lu9KvY4jZJMXhuIy5ljWM0LPE&#xA;COQTmGqHU7dKkZVK6vb8fe7vR4YxMZR4uKuXf5XW18uo72Ka3F5jtdS+vXEk8dxYIYotSgL8lijZ&#xA;wR+94l1JDmj05dmZRTJY9VlwemcRLGfxz/QXLGi0urjeKXBk7j194H3x27wHoP5c+aNW1uyuI9UE&#xA;bXNn6NLqIFRMkyc1cpQBSRuafcMys0YVGUPpk87mxSxzMJc4mmX5Q1uxV2KuxVgf5sXYNlp+ly2k&#xA;txb3srtJJbEevGYgoUojLxb+85N8QIVTSpOW4shgbHNtwxBO/JIbHzr5p8tyW8F5GdX02VVkSjM0&#xA;/pMpdTBJxqzt2jn4dviA3wcfH9UeGXePpLlZ9NjrixT4h3HaQ9/SvMPR9C8y6NrsDS6dcCRoqCeB&#xA;gUmiJqAJI2oy1oaHo3UEjIEEOAmeBXYq7FXYql+s6nNp0Ucq2ktxCxYTyQ0YwqELeoUO7CoptleW&#xA;RA2cjTYBkNcQB6X135WwyTz/AHUOraDBxSe2v24XVyCVo8jcIwu4TqVJB3p03zT6DUznCHi/3sSR&#xA;L3/duCD7uTuT2SODKeRhyHu3Pn3/AKWXP5ghhv8A6vcwSRW7ryhv6coGI+0rMPsMDX7WbaOeMuXL&#xA;v6OqjozKHFEgy6x/i+XUe5h/5m+YEMllptqsslxa3C3spgRZXCwAh/3TA1VPUDs5HFdu5Wur1PaZ&#xA;lKePT2cuPnseEc9if0dfmRn9l4IiX7yIkMg4Y2etjf4eW7x+bzBrLfX5opXhN48q+lsSYpJyVWgq&#xA;ASCCQvfMeGaYHP1Eb139a8r5Pew0cDjgMkRcP0bA/Lvey/lnpXmOyvNSOvxSLeAxxLM9GEkaKQrB&#xA;x9omu+/gO2djrJwIHA+T2XoGYCuxV2KuxVbL6npP6VBLxPDl9nlTatO2ApjV78nhNzqNp5T1BoZr&#xA;d7rTtYR/rMM8JDK9vI6yogbZgrHkrnqCMddrpVESiDHq9H2T2ZDMJHHMxyxPp93Qnb3vRPJOgrp8&#xA;8d7a3gns7pHVogSwDBiVIkqOfwrT4gf8khdsjDGASYn0/j8buD2hq5TjwZI1kiefKx7unwod4tmm&#xA;TdS7FXYq7FUNqep2Ol2Mt/fzCCzgAM0zAkKCQKmgO1TkoQMjQ5qxBL3yX588stqkHqJDOZUEiqv1&#xA;hXgYr0X1FJ+GqnrQ7UyrJg4wQRTnaTX5NNMSibr5MV0Pz/qHmPT/ADZpsek38s1kZAGdR6ipMGSF&#xA;Xj+FlNI6siioPQU3yGYSjEj6rczRHFPNjlYx8JF3yNHv7/f82c+RdHl0+G5d7U231lYWqaVkNGJd&#xA;qM3xHlvsMu4r8nC1kgaF8RF/sZTi4TsVdirsVYT+al95X07RV1HWr1rGeESRWEsSCWRnkWrRiM7M&#xA;G4Cu69PtDJxvomJo28p/KrztbeZtDtbDzRIqT25aHTdTiAeRCZ2VVuKF/SVlkWNea8CABz5bZfDF&#xA;IxsEUOnXbqz4hWw9T0D8tNA1vTfN+uy3kyzae0MUdiQytTi7cqBVUqCApo3I/wCU3XMXxOLmzy46&#xA;AN29MxaHYq7FXYqxfz7cavDpgNrfQaZZOfTur+YkNG0hCRcW5IqVcgHlWv2e+S8MTiYgEyPd9v2N&#xA;mGQjKzuGA6B590bU7ibSJ2fTdcR1D2N4GUs8TB42iMqpy3AZKqr96DOD7T7D7Q7OEpwkZ45AeuO/&#xA;Llxc+Ejv5DkJO4w6qGQjv7vfz/H2Ml8vfmJ5VtdVfyrqtyLTVCwkjNzQRTeruAsh2517NSvaub/2&#xA;T0uWWg8T6vXK+/4uF2iay7dwTQ+U70/monmgLEumpozWOzESm6e5EhYpTjT0lpyrXt2zcRxxjZAA&#xA;Mufn73CMiRR6Jovk3ysuqDVRpkAvgeSy8dgwNeYT7Aav7VK5HwIcXFW7mntPUHH4RnLg7v2868uS&#xA;c5a4DsVdirsVdiqE1afULfTbibTrVb2+jQm3tXk9FZG/lMlH4/dhFXurE9E8palr/lBbH8xrW1vL&#xA;92ZlEOzxIyqB+8TjxkBrUo305k5MsYzvHy8+9MZGPI0yTy95ftdE0mz0yCWWeKyT04ZJ25PxFQoJ&#xA;2rQGmVZcpnIy70JnlSuxV2KuxVL/ADDp15qWjXVlZXQsrqZCsN00azBG6hvTfY07Y79GUSAdxbEP&#xA;LnkLzDoWmiBL2CaRG9RkjjEUczOxMzOvHZ2LcvtU2A+HdsJyTJ3b5SxdAT9n605tdJ1S4vbO5mtR&#xA;ZtaycpLh5AZnjFf3SpEXARjQtyk+g5GVkrGcYg0Sb6dPv6e75MmwuM7FXYq7FXYqgNW0Sw1SzktL&#xA;uJJYJaepDIqvG9DX4kYEHffJxnSvMYv+cdPLEHmWHVLC5udNs4Tzaxt34gvWv7uUH1EQ7hl677EZ&#xA;PxAr1HT9H07TxSzhEKhAgRSQgUbgBB8C/QMo4RZIHNslllIAE8vxz5ozC1uxV2KuxVKPNvl238x+&#xA;X7rR7inpXPpkhi4BMUqyqKxsjDdBuD9/TLMWSUJcUeaRXVLvOX5b+VvN1p6WrWi/WQpEV5F8M0ZP&#xA;dW+ZrQ7HuDl2n1k8R9J2Y0xnyz+ROhWGqLquu3c2vX0BAtGum5KiJ/d8hSrsvifalMn+aEIGGGIx&#xA;xO5ERW/VlKRlzNv/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:d690075f-6522-894e-8b3e-4c2db0ea2ea0</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:d690075f-6522-894e-8b3e-4c2db0ea2ea0</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:05265a43-5e58-483b-a637-f47ea9136070</stRef:instanceID>
            <stRef:documentID>xmp.did:80419ee9-c7ae-f14e-9eab-8f0d19356d16</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80fef2d3-8a7f-fb49-8b37-9e7aba5b5acb</stEvt:instanceID>
                  <stEvt:when>2020-07-28T16:27:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:47aa5425-7308-fb41-ae58-a3384e44029d</stEvt:instanceID>
                  <stEvt:when>2020-07-30T12:25:03+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:92f6a377-a2db-5d49-b1f1-0abb0126b000</stEvt:instanceID>
                  <stEvt:when>2020-07-30T22:28:58+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:43b34548-8e27-d14d-8347-94521aff7776</stEvt:instanceID>
                  <stEvt:when>2020-07-30T22:29:05+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 23.0 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:80419ee9-c7ae-f14e-9eab-8f0d19356d16</stEvt:instanceID>
                  <stEvt:when>2021-02-25T17:34:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d690075f-6522-894e-8b3e-4c2db0ea2ea0</stEvt:instanceID>
                  <stEvt:when>2021-02-26T00:20:20+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>White</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=243 G=242 B=252</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>243</xmpG:red>
                           <xmpG:green>242</xmpG:green>
                           <xmpG:blue>252</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=249</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=211 G=211 B=245</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>211</xmpG:red>
                           <xmpG:green>211</xmpG:green>
                           <xmpG:blue>245</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=218 G=218 B=249 1</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>218</xmpG:red>
                           <xmpG:green>218</xmpG:green>
                           <xmpG:blue>249</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=191 G=190 B=237</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>191</xmpG:red>
                           <xmpG:green>190</xmpG:green>
                           <xmpG:blue>237</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=244 G=244 B=250</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>244</xmpG:red>
                           <xmpG:green>244</xmpG:green>
                           <xmpG:blue>250</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
87.3396 159.585 mo
87.3127 159.601 li
85.7834 161.436 li
85.5537 160.522 li
87.4753 158.225 li
88.4897 157.639 li
88.49 167.796 li
87.3396 168.46 li
87.3396 159.585 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.227451 .172549 .6 rgb
f
92.7671 160.295 mo
92.7671 162.936 93.4712 164.03 94.5535 163.405 cv
95.7717 162.701 96.3535 160.725 96.3535 158.131 cv
96.3535 155.631 95.7983 154.31 94.5669 155.021 cv
93.5249 155.623 92.7671 157.53 92.7671 160.295 cv
cp
97.5439 157.381 mo
97.5439 160.834 96.4348 163.38 94.4856 164.506 cv
92.7671 165.498 91.6033 164.311 91.5764 160.967 cv
91.5764 157.561 92.8481 154.952 94.6348 153.92 cv
96.4885 152.85 97.5439 154.147 97.5439 157.381 cv
cp
f
101.226 151.568 mo
101.199 151.583 li
99.6699 153.419 li
99.4399 152.505 li
101.362 150.208 li
102.376 149.622 li
102.376 159.779 li
101.226 160.443 li
101.226 151.568 li
cp
f
106.653 152.278 mo
106.653 154.919 107.357 156.013 108.44 155.388 cv
109.658 154.684 110.24 152.708 110.24 150.114 cv
110.24 147.614 109.685 146.293 108.453 147.004 cv
107.411 147.606 106.653 149.513 106.653 152.278 cv
cp
111.43 149.364 mo
111.43 152.817 110.321 155.364 108.372 156.489 cv
106.653 157.481 105.49 156.294 105.463 152.95 cv
105.463 149.544 106.735 146.935 108.521 145.903 cv
110.375 144.833 111.43 146.13 111.43 149.364 cv
cp
f
115.112 143.551 mo
115.085 143.566 li
113.556 145.402 li
113.326 144.488 li
115.248 142.191 li
116.262 141.605 li
116.262 151.762 li
115.112 152.426 li
115.112 143.551 li
cp
f
120.54 144.261 mo
120.54 146.902 121.244 147.996 122.326 147.371 cv
123.544 146.667 124.126 144.691 124.126 142.097 cv
124.126 139.597 123.571 138.276 122.34 138.987 cv
121.297 139.589 120.54 141.496 120.54 144.261 cv
cp
125.317 141.347 mo
125.317 144.8 124.208 147.347 122.258 148.472 cv
120.54 149.464 119.376 148.277 119.349 144.933 cv
119.349 141.527 120.621 138.917 122.407 137.886 cv
124.261 136.816 125.317 138.113 125.317 141.347 cv
cp
f
127.483 140.252 mo
127.483 142.893 128.187 143.987 129.269 143.362 cv
130.488 142.659 131.069 140.682 131.069 138.089 cv
131.069 135.588 130.514 134.268 129.283 134.979 cv
128.241 135.58 127.483 137.487 127.483 140.252 cv
cp
132.26 137.339 mo
132.26 140.792 131.151 143.338 129.201 144.463 cv
127.483 145.456 126.319 144.269 126.292 140.924 cv
126.292 137.518 127.564 134.909 129.351 133.878 cv
131.204 132.807 132.26 134.104 132.26 137.339 cv
cp
f
134.426 136.244 mo
134.426 138.884 135.13 139.978 136.212 139.353 cv
137.431 138.65 138.012 136.674 138.012 134.08 cv
138.012 131.58 137.457 130.259 136.226 130.97 cv
135.184 131.572 134.426 133.479 134.426 136.244 cv
cp
139.203 133.33 mo
139.203 136.783 138.094 139.329 136.145 140.455 cv
134.426 141.447 133.262 140.26 133.235 136.915 cv
133.235 133.51 134.507 130.901 136.294 129.869 cv
138.147 128.799 139.203 130.096 139.203 133.33 cv
cp
f
142.885 127.517 mo
142.858 127.532 li
141.329 129.368 li
141.099 128.454 li
143.021 126.157 li
144.035 125.571 li
144.035 135.728 li
142.885 136.392 li
142.885 127.517 li
cp
f
148.313 128.226 mo
148.313 130.867 149.017 131.961 150.1 131.336 cv
151.318 130.633 151.899 128.656 151.899 126.063 cv
151.899 123.562 151.344 122.242 150.113 122.953 cv
149.071 123.554 148.313 125.461 148.313 128.226 cv
cp
153.09 125.313 mo
153.09 128.766 151.981 131.312 150.031 132.437 cv
148.313 133.43 147.149 132.243 147.122 128.898 cv
147.122 125.492 148.394 122.883 150.181 121.852 cv
152.035 120.781 153.09 122.078 153.09 125.313 cv
cp
f
156.772 119.499 mo
156.745 119.515 li
155.216 121.35 li
154.986 120.437 li
156.908 118.139 li
157.922 117.554 li
157.922 127.711 li
156.772 128.374 li
156.772 119.499 li
cp
f
162.199 120.209 mo
162.199 122.85 162.904 123.944 163.986 123.319 cv
165.204 122.616 165.786 120.639 165.786 118.046 cv
165.786 115.545 165.231 114.225 163.999 114.936 cv
162.957 115.538 162.199 117.444 162.199 120.209 cv
cp
166.976 117.295 mo
166.976 120.748 165.867 123.295 163.918 124.42 cv
162.199 125.413 161.036 124.226 161.009 120.881 cv
161.009 117.475 162.281 114.866 164.067 113.835 cv
165.921 112.764 166.976 114.061 166.976 117.295 cv
cp
f
170.658 111.482 mo
170.631 111.498 li
169.102 113.333 li
168.873 112.419 li
170.794 110.122 li
171.808 109.536 li
171.808 119.693 li
170.658 120.358 li
170.658 111.482 li
cp
f
176.086 112.192 mo
176.086 114.833 176.79 115.927 177.872 115.302 cv
179.09 114.599 179.672 112.622 179.672 110.028 cv
179.672 107.528 179.117 106.208 177.885 106.919 cv
176.843 107.52 176.086 109.427 176.086 112.192 cv
cp
180.863 109.278 mo
180.863 112.731 179.753 115.278 177.804 116.403 cv
176.086 117.395 174.922 116.208 174.895 112.864 cv
174.895 109.458 176.167 106.849 177.953 105.817 cv
179.807 104.747 180.863 106.044 180.863 109.278 cv
cp
f
183.029 108.184 mo
183.029 110.825 183.733 111.919 184.815 111.294 cv
186.033 110.59 186.615 108.614 186.615 106.02 cv
186.615 103.52 186.06 102.199 184.829 102.91 cv
183.787 103.512 183.029 105.419 183.029 108.184 cv
cp
187.806 105.27 mo
187.806 108.723 186.697 111.269 184.748 112.395 cv
183.029 113.387 181.865 112.2 181.838 108.856 cv
181.838 105.45 183.11 102.84 184.896 101.809 cv
186.75 100.739 187.806 102.035 187.806 105.27 cv
cp
f
189.972 104.175 mo
189.972 106.816 190.676 107.91 191.759 107.285 cv
192.977 106.582 193.559 104.605 193.558 102.012 cv
193.558 99.511 193.003 98.1907 191.772 98.9016 cv
190.73 99.5032 189.972 101.41 189.972 104.175 cv
cp
194.749 101.261 mo
194.749 104.714 193.64 107.261 191.691 108.386 cv
189.972 109.379 188.808 108.192 188.781 104.847 cv
188.781 101.441 190.053 98.8319 191.84 97.8005 cv
193.693 96.7303 194.749 98.0269 194.749 101.261 cv
cp
f
198.431 95.4481 mo
198.404 95.4637 li
196.875 97.2993 li
196.645 96.3854 li
198.566 94.0881 li
199.581 93.5024 li
199.581 103.659 li
198.431 104.323 li
198.431 95.4481 li
cp
f
203.858 96.158 mo
203.858 98.799 204.563 99.8929 205.645 99.2679 cv
206.863 98.5648 207.445 96.588 207.445 93.9944 cv
207.445 91.4938 206.89 90.1735 205.658 90.8844 cv
204.616 91.486 203.858 93.3932 203.858 96.158 cv
cp
208.635 93.2443 mo
208.635 96.6973 207.526 99.2439 205.577 100.369 cv
203.858 101.361 202.695 100.174 202.668 96.83 cv
202.667 93.4243 203.94 90.8148 205.726 89.7834 cv
207.58 88.7131 208.635 90.0098 208.635 93.2443 cv
cp
f
212.317 87.4313 mo
212.29 87.4465 li
210.761 89.2822 li
210.531 88.3682 li
212.453 86.071 li
213.467 85.4853 li
213.468 95.6423 li
212.317 96.3065 li
212.317 87.4313 li
cp
f
219.26 83.4225 mo
219.233 83.4381 li
217.704 85.2737 li
217.475 84.3598 li
219.396 82.0626 li
220.41 81.4769 li
220.411 91.6339 li
219.26 92.2977 li
219.26 83.4225 li
cp
f
224.688 84.1324 mo
224.688 86.7734 225.392 87.8674 226.474 87.2424 cv
227.692 86.5392 228.274 84.5625 228.274 81.9689 cv
228.274 79.4683 227.719 78.1479 226.488 78.8588 cv
225.445 79.4604 224.688 81.3676 224.688 84.1324 cv
cp
229.465 81.2187 mo
229.465 84.6718 228.356 87.2183 226.406 88.3434 cv
224.688 89.3359 223.524 88.1489 223.497 84.8044 cv
223.497 81.3987 224.769 78.7892 226.556 77.7578 cv
228.409 76.6876 229.465 77.9842 229.465 81.2187 cv
cp
f
233.146 75.4058 mo
233.12 75.421 li
231.591 77.2566 li
231.361 76.3427 li
233.282 74.0454 li
234.297 73.4597 li
234.297 83.6167 li
233.146 84.2809 li
233.146 75.4058 li
cp
f
238.574 76.1155 mo
238.574 78.7562 239.278 79.8502 240.361 79.2252 cv
241.579 78.5221 242.161 76.5453 242.161 73.9517 cv
242.161 71.4514 241.605 70.1311 240.374 70.842 cv
239.332 71.4437 238.574 73.3505 238.574 76.1155 cv
cp
243.351 73.2015 mo
243.351 76.6546 242.242 79.2012 240.293 80.3266 cv
238.574 81.3187 237.411 80.1317 237.384 76.7872 cv
237.384 73.3815 238.655 70.772 240.442 69.7407 cv
242.295 68.6704 243.351 69.9673 243.351 73.2015 cv
cp
f
247.033 67.3886 mo
247.006 67.4042 li
245.477 69.2394 li
245.247 68.3255 li
247.168 66.0286 li
248.183 65.4429 li
248.183 75.5995 li
247.033 76.2637 li
247.033 67.3886 li
cp
f
252.461 68.098 mo
252.461 70.7386 253.165 71.8326 254.248 71.2077 cv
255.466 70.5045 256.047 68.5278 256.047 65.9345 cv
256.047 63.4339 255.492 62.1136 254.261 62.8245 cv
253.219 63.4261 252.461 65.3329 252.461 68.098 cv
cp
257.238 65.184 mo
257.238 68.6374 256.129 71.1836 254.18 72.3091 cv
252.461 73.3011 251.297 72.1142 251.271 68.7697 cv
251.271 65.364 252.542 62.7548 254.329 61.7231 cv
256.183 60.6532 257.238 61.9498 257.238 65.184 cv
cp
f
259.404 64.0896 mo
259.404 66.7303 260.108 67.8243 261.191 67.1993 cv
262.409 66.4962 262.99 64.5193 262.99 61.9258 cv
262.99 59.4255 262.436 58.1048 261.204 58.8161 cv
260.162 59.4177 259.404 61.3245 259.404 64.0896 cv
cp
264.181 61.1756 mo
264.181 64.6287 263.072 67.1752 261.123 68.3007 cv
259.404 69.2928 258.24 68.1058 258.214 64.7613 cv
258.213 61.3556 259.485 58.7461 261.272 57.7147 cv
263.126 56.6445 264.181 57.9414 264.181 61.1756 cv
cp
f
85.824 183.058 mo
85.824 185.699 86.5283 186.793 87.6106 186.168 cv
88.8289 185.464 89.4106 183.488 89.4106 180.894 cv
89.4104 178.394 88.8555 177.074 87.624 177.784 cv
86.5818 178.386 85.824 180.293 85.824 183.058 cv
cp
90.6011 180.144 mo
90.6011 183.597 89.4919 186.144 87.5427 187.269 cv
85.8242 188.261 84.6604 187.074 84.6335 183.73 cv
84.6335 180.324 85.9053 177.714 87.6919 176.683 cv
89.5454 175.613 90.6011 176.91 90.6011 180.144 cv
cp
f
94.283 174.331 mo
94.2561 174.347 li
92.7268 176.182 li
92.4971 175.268 li
94.4187 172.971 li
95.4331 172.385 li
95.4333 182.542 li
94.283 183.206 li
94.283 174.331 li
cp
f
99.7104 175.041 mo
99.7104 177.682 100.415 178.775 101.497 178.151 cv
102.715 177.447 103.297 175.471 103.297 172.877 cv
103.297 170.377 102.742 169.056 101.51 169.767 cv
100.468 170.369 99.7104 172.276 99.7104 175.041 cv
cp
104.487 172.127 mo
104.487 175.58 103.378 178.127 101.429 179.252 cv
99.7104 180.244 98.5466 179.057 98.5198 175.713 cv
98.5198 172.307 99.7915 169.698 101.578 168.666 cv
103.432 167.596 104.487 168.893 104.487 172.127 cv
cp
f
108.169 166.314 mo
108.142 166.329 li
106.613 168.165 li
106.384 167.251 li
108.305 164.954 li
109.319 164.368 li
109.32 174.525 li
108.169 175.189 li
108.169 166.314 li
cp
f
113.597 167.024 mo
113.597 169.665 114.301 170.759 115.383 170.134 cv
116.601 169.431 117.183 167.454 117.183 164.86 cv
117.183 162.359 116.628 161.039 115.396 161.75 cv
114.354 162.352 113.597 164.259 113.597 167.024 cv
cp
118.374 164.11 mo
118.374 167.563 117.265 170.11 115.315 171.235 cv
113.597 172.227 112.433 171.04 112.406 167.696 cv
112.406 164.29 113.678 161.68 115.464 160.649 cv
117.318 159.579 118.374 160.875 118.374 164.11 cv
cp
f
122.056 158.297 mo
122.029 158.312 li
120.5 160.148 li
120.27 159.234 li
122.191 156.937 li
123.206 156.351 li
123.206 166.508 li
122.056 167.172 li
122.056 158.297 li
cp
f
127.483 159.007 mo
127.483 161.647 128.187 162.741 129.27 162.117 cv
130.488 161.413 131.07 159.437 131.07 156.843 cv
131.069 154.343 130.514 153.022 129.283 153.733 cv
128.241 154.335 127.483 156.242 127.483 159.007 cv
cp
132.26 156.093 mo
132.26 159.546 131.151 162.092 129.202 163.218 cv
127.483 164.21 126.319 163.023 126.292 159.678 cv
126.292 156.273 127.564 153.663 129.351 152.632 cv
131.204 151.562 132.26 152.859 132.26 156.093 cv
cp
f
135.942 150.28 mo
135.915 150.295 li
134.386 152.131 li
134.156 151.217 li
136.078 148.92 li
137.092 148.334 li
137.092 158.491 li
135.942 159.155 li
135.942 150.28 li
cp
f
141.369 150.99 mo
141.369 153.631 142.073 154.724 143.156 154.1 cv
144.374 153.396 144.956 151.419 144.956 148.826 cv
144.956 146.326 144.401 145.005 143.169 145.716 cv
142.127 146.318 141.369 148.225 141.369 150.99 cv
cp
146.146 148.076 mo
146.146 151.529 145.037 154.076 143.088 155.201 cv
141.369 156.193 140.206 155.006 140.179 151.662 cv
140.179 148.256 141.45 145.646 143.237 144.615 cv
145.091 143.545 146.146 144.841 146.146 148.076 cv
cp
f
149.829 142.262 mo
149.802 142.278 li
148.273 144.114 li
148.043 143.2 li
149.964 140.902 li
150.979 140.317 li
150.979 150.474 li
149.829 151.137 li
149.829 142.262 li
cp
f
155.257 142.972 mo
155.257 145.613 155.96 146.707 157.043 146.082 cv
158.261 145.379 158.843 143.402 158.843 140.809 cv
158.843 138.308 158.288 136.988 157.056 137.699 cv
156.014 138.3 155.257 140.207 155.257 142.972 cv
cp
160.033 140.058 mo
160.033 143.512 158.924 146.058 156.975 147.183 cv
155.257 148.176 154.093 146.989 154.066 143.644 cv
154.066 140.238 155.338 137.629 157.124 136.598 cv
158.978 135.527 160.033 136.824 160.033 140.058 cv
cp
f
163.715 134.245 mo
163.688 134.261 li
162.159 136.096 li
161.929 135.182 li
163.851 132.885 li
164.865 132.299 li
164.865 142.456 li
163.715 143.12 li
163.715 134.245 li
cp
f
169.143 134.955 mo
169.143 137.596 169.847 138.69 170.929 138.065 cv
172.147 137.362 172.729 135.385 172.729 132.791 cv
172.729 130.291 172.174 128.971 170.943 129.682 cv
169.9 130.283 169.143 132.19 169.143 134.955 cv
cp
173.92 132.041 mo
173.92 135.494 172.811 138.041 170.862 139.166 cv
169.143 140.158 167.979 138.971 167.952 135.627 cv
167.952 132.221 169.224 129.612 171.01 128.58 cv
172.864 127.51 173.92 128.807 173.92 132.041 cv
cp
f
176.086 130.947 mo
176.086 133.588 176.79 134.682 177.873 134.057 cv
179.091 133.353 179.672 131.377 179.672 128.783 cv
179.672 126.282 179.117 124.962 177.886 125.673 cv
176.844 126.275 176.086 128.182 176.086 130.947 cv
cp
180.863 128.033 mo
180.863 131.486 179.754 134.032 177.805 135.158 cv
176.086 136.15 174.922 134.963 174.896 131.619 cv
174.896 128.213 176.167 125.603 177.954 124.572 cv
179.807 123.502 180.863 124.798 180.863 128.033 cv
cp
f
184.545 122.22 mo
184.518 122.235 li
182.989 124.071 li
182.759 123.157 li
184.68 120.86 li
185.695 120.274 li
185.695 130.431 li
184.545 131.095 li
184.545 122.22 li
cp
f
189.972 122.93 mo
189.972 125.57 190.676 126.664 191.759 126.039 cv
192.977 125.336 193.559 123.359 193.559 120.766 cv
193.559 118.266 193.004 116.945 191.772 117.656 cv
190.73 118.258 189.972 120.165 189.972 122.93 cv
cp
194.749 120.016 mo
194.749 123.469 193.64 126.015 191.691 127.141 cv
189.972 128.133 188.809 126.946 188.781 123.601 cv
188.781 120.196 190.053 117.586 191.84 116.555 cv
193.693 115.485 194.749 116.782 194.749 120.016 cv
cp
f
198.431 114.203 mo
198.404 114.218 li
196.875 116.054 li
196.645 115.14 li
198.567 112.843 li
199.581 112.257 li
199.581 122.414 li
198.431 123.078 li
198.431 114.203 li
cp
f
203.859 114.913 mo
203.859 117.553 204.563 118.647 205.645 118.022 cv
206.863 117.319 207.445 115.342 207.445 112.749 cv
207.445 110.248 206.89 108.928 205.658 109.639 cv
204.616 110.241 203.859 112.147 203.859 114.913 cv
cp
208.636 111.999 mo
208.636 115.452 207.526 117.998 205.577 119.124 cv
203.859 120.116 202.695 118.929 202.668 115.584 cv
202.668 112.179 203.94 109.569 205.726 108.538 cv
207.58 107.468 208.635 108.764 208.636 111.999 cv
cp
f
212.317 106.186 mo
212.291 106.201 li
210.761 108.037 li
210.532 107.123 li
212.453 104.826 li
213.468 104.24 li
213.468 114.397 li
212.317 115.061 li
212.317 106.186 li
cp
f
217.745 106.895 mo
217.745 109.536 218.449 110.63 219.531 110.005 cv
220.749 109.302 221.331 107.325 221.331 104.732 cv
221.331 102.231 220.776 100.911 219.545 101.622 cv
218.502 102.224 217.745 104.131 217.745 106.895 cv
cp
222.522 103.982 mo
222.522 107.435 221.413 109.981 219.464 111.106 cv
217.745 112.099 216.581 110.912 216.554 107.567 cv
216.554 104.161 217.826 101.552 219.613 100.521 cv
221.466 99.4506 222.522 100.747 222.522 103.982 cv
cp
f
226.204 98.1685 mo
226.177 98.184 li
224.648 100.02 li
224.418 99.1057 li
226.339 96.8085 li
227.354 96.2228 li
227.354 106.38 li
226.204 107.044 li
226.204 98.1685 li
cp
f
231.631 98.8786 mo
231.631 101.519 232.335 102.613 233.418 101.988 cv
234.636 101.285 235.217 99.3083 235.217 96.7147 cv
235.217 94.2145 234.662 92.8938 233.431 93.6051 cv
232.389 94.2067 231.631 96.1135 231.631 98.8786 cv
cp
236.408 95.9645 mo
236.408 99.4176 235.299 101.964 233.35 103.09 cv
231.631 104.082 230.467 102.895 230.441 99.5502 cv
230.441 96.1446 231.712 93.535 233.499 92.5037 cv
235.353 91.4334 236.408 92.7304 236.408 95.9645 cv
cp
f
240.09 90.1516 mo
240.063 90.1672 li
238.534 92.0024 li
238.304 91.0885 li
240.226 88.7917 li
241.24 88.206 li
241.24 98.3625 li
240.09 99.0268 li
240.09 90.1516 li
cp
f
247.033 86.1429 mo
247.006 86.1584 li
245.477 87.9941 li
245.247 87.0801 li
247.169 84.7829 li
248.183 84.1972 li
248.184 94.3541 li
247.033 95.018 li
247.033 86.1429 li
cp
f
252.461 86.8523 mo
252.461 89.4933 253.166 90.5873 254.248 89.9623 cv
255.466 89.2592 256.048 87.2824 256.048 84.6888 cv
256.048 82.1882 255.493 80.8679 254.261 81.5788 cv
253.219 82.1804 252.461 84.0875 252.461 86.8523 cv
cp
257.239 83.9386 mo
257.239 87.3917 256.129 89.9382 254.18 91.0634 cv
252.461 92.0558 251.298 90.8688 251.271 87.5243 cv
251.271 84.1187 252.542 81.5091 254.329 80.4778 cv
256.183 79.4075 257.239 80.7041 257.239 83.9386 cv
cp
f
260.92 78.1257 mo
260.893 78.1409 li
259.364 79.9765 li
259.135 79.0626 li
261.056 76.7654 li
262.07 76.1796 li
262.07 86.3366 li
260.92 87.0009 li
260.92 78.1257 li
cp
f
87.3401 197.094 mo
87.3132 197.11 li
85.7839 198.945 li
85.5542 198.031 li
87.4758 195.734 li
88.4902 195.148 li
88.4902 205.305 li
87.3401 205.969 li
87.3401 197.094 li
cp
f
92.7673 197.804 mo
92.7676 200.445 93.4717 201.538 94.554 200.914 cv
95.7722 200.21 96.354 198.234 96.354 195.64 cv
96.3538 193.14 95.7988 191.819 94.5674 192.53 cv
93.5254 193.132 92.7673 195.039 92.7673 197.804 cv
cp
97.5444 194.89 mo
97.5444 198.343 96.4353 200.889 94.4861 202.015 cv
92.7676 203.007 91.6038 201.82 91.5769 198.475 cv
91.5769 195.07 92.8486 192.461 94.6353 191.429 cv
96.4888 190.359 97.5444 191.656 97.5444 194.89 cv
cp
f
101.226 189.077 mo
101.199 189.092 li
99.6702 190.928 li
99.4404 190.014 li
101.362 187.717 li
102.376 187.131 li
102.377 197.288 li
101.226 197.952 li
101.226 189.077 li
cp
f
106.654 189.787 mo
106.654 192.428 107.358 193.521 108.44 192.897 cv
109.658 192.193 110.24 190.216 110.24 187.623 cv
110.24 185.123 109.685 183.802 108.454 184.513 cv
107.412 185.115 106.654 187.022 106.654 189.787 cv
cp
111.431 186.873 mo
111.431 190.326 110.322 192.873 108.373 193.998 cv
106.654 194.99 105.49 193.803 105.463 190.459 cv
105.463 187.053 106.735 184.443 108.521 183.412 cv
110.375 182.342 111.431 183.638 111.431 186.873 cv
cp
f
113.597 185.778 mo
113.597 188.419 114.301 189.513 115.384 188.888 cv
116.602 188.185 117.183 186.208 117.183 183.614 cv
117.183 181.114 116.628 179.794 115.397 180.505 cv
114.355 181.106 113.597 183.013 113.597 185.778 cv
cp
118.374 182.864 mo
118.374 186.317 117.265 188.864 115.316 189.989 cv
113.597 190.981 112.433 189.794 112.406 186.45 cv
112.406 183.044 113.678 180.435 115.465 179.403 cv
117.318 178.333 118.374 179.63 118.374 182.864 cv
cp
f
122.056 177.051 mo
122.029 177.067 li
120.5 178.902 li
120.27 177.989 li
122.191 175.691 li
123.206 175.106 li
123.206 185.263 li
122.056 185.926 li
122.056 177.051 li
cp
f
127.483 177.761 mo
127.483 180.402 128.188 181.496 129.27 180.871 cv
130.488 180.168 131.07 178.191 131.07 175.598 cv
131.07 173.097 130.515 171.777 129.283 172.488 cv
128.241 173.089 127.483 174.996 127.483 177.761 cv
cp
132.26 174.847 mo
132.26 178.3 131.151 180.847 129.202 181.972 cv
127.483 182.965 126.32 181.778 126.293 178.433 cv
126.293 175.027 127.564 172.418 129.351 171.387 cv
131.205 170.316 132.26 171.613 132.26 174.847 cv
cp
f
135.942 169.034 mo
135.915 169.05 li
134.386 170.885 li
134.156 169.971 li
136.078 167.674 li
137.092 167.088 li
137.093 177.245 li
135.942 177.909 li
135.942 169.034 li
cp
f
141.37 169.744 mo
141.37 172.385 142.073 173.479 143.156 172.854 cv
144.374 172.151 144.956 170.174 144.956 167.58 cv
144.956 165.08 144.401 163.759 143.169 164.471 cv
142.127 165.072 141.369 166.979 141.37 169.744 cv
cp
146.146 166.83 mo
146.146 170.283 145.037 172.83 143.088 173.955 cv
141.37 174.947 140.206 173.76 140.179 170.416 cv
140.179 167.01 141.451 164.401 143.237 163.369 cv
145.091 162.299 146.146 163.596 146.146 166.83 cv
cp
f
149.829 161.017 mo
149.802 161.032 li
148.273 162.868 li
148.043 161.954 li
149.965 159.657 li
150.979 159.071 li
150.979 169.228 li
149.829 169.892 li
149.829 161.017 li
cp
f
155.257 161.727 mo
155.257 164.367 155.961 165.461 157.043 164.836 cv
158.261 164.133 158.843 162.156 158.843 159.563 cv
158.843 157.063 158.288 155.742 157.057 156.453 cv
156.014 157.055 155.257 158.962 155.257 161.727 cv
cp
160.034 158.813 mo
160.034 162.266 158.925 164.812 156.975 165.938 cv
155.257 166.93 154.093 165.743 154.066 162.398 cv
154.066 158.993 155.338 156.383 157.124 155.352 cv
158.978 154.282 160.034 155.579 160.034 158.813 cv
cp
f
163.715 153 mo
163.688 153.015 li
162.159 154.851 li
161.93 153.937 li
163.851 151.64 li
164.865 151.054 li
164.866 161.211 li
163.716 161.875 li
163.715 153 li
cp
f
169.143 153.71 mo
169.143 156.351 169.847 157.444 170.93 156.82 cv
172.148 156.116 172.729 154.139 172.729 151.546 cv
172.729 149.045 172.174 147.725 170.943 148.436 cv
169.901 149.038 169.143 150.945 169.143 153.71 cv
cp
173.92 150.796 mo
173.92 154.249 172.811 156.796 170.862 157.921 cv
169.143 158.913 167.979 157.726 167.952 154.382 cv
167.952 150.976 169.224 148.366 171.011 147.335 cv
172.864 146.265 173.92 147.561 173.92 150.796 cv
cp
f
177.602 144.983 mo
177.575 144.998 li
176.046 146.834 li
175.816 145.92 li
177.738 143.623 li
178.752 143.037 li
178.752 153.194 li
177.602 153.858 li
177.602 144.983 li
cp
f
183.029 145.692 mo
183.029 148.333 183.734 149.427 184.816 148.802 cv
186.034 148.099 186.616 146.122 186.616 143.529 cv
186.616 141.028 186.061 139.708 184.829 140.419 cv
183.787 141.021 183.029 142.928 183.029 145.692 cv
cp
187.806 142.779 mo
187.806 146.232 186.697 148.778 184.748 149.903 cv
183.029 150.896 181.866 149.709 181.839 146.364 cv
181.839 142.959 183.11 140.349 184.897 139.318 cv
186.75 138.248 187.806 139.544 187.806 142.779 cv
cp
f
191.488 136.966 mo
191.461 136.981 li
189.932 138.817 li
189.702 137.903 li
191.624 135.605 li
192.638 135.02 li
192.638 145.177 li
191.488 145.841 li
191.488 136.966 li
cp
f
196.916 137.676 mo
196.916 140.316 197.62 141.41 198.702 140.785 cv
199.92 140.082 200.502 138.105 200.502 135.512 cv
200.502 133.011 199.947 131.691 198.715 132.402 cv
197.673 133.004 196.915 134.91 196.916 137.676 cv
cp
201.692 134.762 mo
201.692 138.215 200.583 140.761 198.634 141.887 cv
196.916 142.879 195.752 141.692 195.725 138.347 cv
195.725 134.942 196.997 132.332 198.783 131.301 cv
200.637 130.23 201.692 131.527 201.692 134.762 cv
cp
f
205.375 128.949 mo
205.347 128.964 li
203.819 130.799 li
203.588 129.886 li
205.51 127.589 li
206.525 127.003 li
206.525 137.16 li
205.375 137.824 li
205.375 128.949 li
cp
f
210.802 129.658 mo
210.802 132.299 211.506 133.393 212.588 132.768 cv
213.807 132.065 214.388 130.088 214.388 127.495 cv
214.388 124.994 213.833 123.674 212.602 124.385 cv
211.56 124.987 210.802 126.894 210.802 129.658 cv
cp
215.579 126.745 mo
215.579 130.198 214.47 132.744 212.521 133.87 cv
210.802 134.862 209.638 133.675 209.611 130.33 cv
209.611 126.924 210.883 124.315 212.67 123.284 cv
214.523 122.214 215.579 123.51 215.579 126.745 cv
cp
f
219.261 120.931 mo
219.234 120.947 li
217.705 122.783 li
217.475 121.869 li
219.396 119.572 li
220.411 118.986 li
220.411 129.143 li
219.261 129.807 li
219.261 120.931 li
cp
f
224.688 121.641 mo
224.688 124.282 225.392 125.376 226.475 124.751 cv
227.693 124.048 228.275 122.071 228.275 119.478 cv
228.275 116.977 227.72 115.657 226.488 116.368 cv
225.446 116.969 224.688 118.877 224.688 121.641 cv
cp
229.465 118.728 mo
229.465 122.181 228.356 124.727 226.407 125.852 cv
224.688 126.845 223.524 125.658 223.498 122.313 cv
223.498 118.908 224.769 116.298 226.556 115.267 cv
228.409 114.196 229.465 115.493 229.465 118.728 cv
cp
f
233.147 112.914 mo
233.12 112.93 li
231.591 114.766 li
231.361 113.852 li
233.283 111.554 li
234.297 110.969 li
234.297 121.126 li
233.147 121.79 li
233.147 112.914 li
cp
f
238.574 113.624 mo
238.574 116.265 239.279 117.359 240.361 116.734 cv
241.579 116.031 242.161 114.054 242.161 111.461 cv
242.161 108.96 241.606 107.64 240.374 108.351 cv
239.332 108.953 238.574 110.859 238.574 113.624 cv
cp
243.352 110.71 mo
243.352 114.164 242.242 116.71 240.293 117.836 cv
238.574 118.828 237.411 117.641 237.384 114.296 cv
237.384 110.89 238.656 108.281 240.442 107.25 cv
242.296 106.179 243.351 107.476 243.352 110.71 cv
cp
f
245.518 109.616 mo
245.518 112.257 246.222 113.351 247.304 112.726 cv
248.522 112.022 249.104 110.046 249.104 107.452 cv
249.104 104.952 248.549 103.631 247.317 104.342 cv
246.275 104.944 245.518 106.851 245.518 109.616 cv
cp
250.294 106.702 mo
250.295 110.155 249.185 112.702 247.236 113.827 cv
245.518 114.819 244.354 113.632 244.327 110.288 cv
244.327 106.882 245.599 104.273 247.385 103.241 cv
249.239 102.171 250.294 103.468 250.294 106.702 cv
cp
f
252.461 105.607 mo
252.462 108.248 253.166 109.342 254.248 108.717 cv
255.466 108.013 256.048 106.037 256.048 103.443 cv
256.048 100.943 255.493 99.6225 254.261 100.333 cv
253.219 100.935 252.461 102.842 252.461 105.607 cv
cp
257.239 102.693 mo
257.239 106.146 256.129 108.693 254.18 109.818 cv
252.462 110.81 251.298 109.623 251.271 106.279 cv
251.271 102.873 252.543 100.264 254.329 99.2321 cv
256.183 98.1621 257.239 99.4587 257.239 102.693 cv
cp
f
260.92 96.8799 mo
260.893 96.8955 li
259.365 98.7311 li
259.135 97.8173 li
261.056 95.52 li
262.071 94.9343 li
262.071 105.091 li
260.92 105.755 li
260.92 96.8799 li
cp
f
87.3401 215.848 mo
87.3132 215.863 li
85.7842 217.7 li
85.5544 216.786 li
87.4758 214.488 li
88.4905 213.903 li
88.4905 224.059 li
87.3403 224.723 li
87.3401 215.848 li
cp
f
92.7676 216.558 mo
92.7676 219.199 93.4719 220.292 94.5542 219.667 cv
95.7722 218.964 96.3542 216.987 96.3542 214.394 cv
96.354 211.894 95.7991 210.574 94.5676 211.285 cv
93.5254 211.886 92.7676 213.793 92.7676 216.558 cv
cp
97.5447 213.644 mo
97.5447 217.098 96.4355 219.644 94.4863 220.769 cv
92.7678 221.762 91.604 220.574 91.5771 217.23 cv
91.5771 213.823 92.8489 211.214 94.6355 210.183 cv
96.489 209.113 97.5447 210.409 97.5447 213.644 cv
cp
f
101.227 207.83 mo
101.2 207.846 li
99.6704 209.682 li
99.4407 208.768 li
101.362 206.471 li
102.377 205.885 li
102.377 216.042 li
101.227 216.706 li
101.227 207.83 li
cp
f
106.654 208.541 mo
106.654 211.182 107.358 212.275 108.44 211.65 cv
109.659 210.947 110.24 208.97 110.24 206.377 cv
110.24 203.877 109.686 202.557 108.454 203.268 cv
107.412 203.869 106.654 205.775 106.654 208.541 cv
cp
111.431 205.627 mo
111.431 209.08 110.322 211.627 108.373 212.752 cv
106.654 213.744 105.49 212.557 105.463 209.213 cv
105.463 205.807 106.735 203.197 108.522 202.166 cv
110.375 201.095 111.431 202.392 111.431 205.627 cv
cp
f
115.113 199.814 mo
115.086 199.829 li
113.557 201.665 li
113.327 200.751 li
115.249 198.454 li
116.263 197.869 li
116.263 208.025 li
115.113 208.689 li
115.113 199.814 li
cp
f
120.54 200.524 mo
120.54 203.165 121.244 204.258 122.327 203.633 cv
123.545 202.93 124.127 200.953 124.127 198.36 cv
124.127 195.86 123.572 194.54 122.34 195.251 cv
121.298 195.852 120.54 197.758 120.54 200.524 cv
cp
125.317 197.61 mo
125.317 201.064 124.208 203.61 122.259 204.735 cv
120.54 205.727 119.377 204.54 119.35 201.196 cv
119.35 197.789 120.622 195.18 122.408 194.148 cv
124.262 193.079 125.317 194.375 125.317 197.61 cv
cp
f
127.483 196.516 mo
127.483 199.156 128.188 200.25 129.27 199.625 cv
130.488 198.922 131.07 196.945 131.07 194.351 cv
131.07 191.852 130.515 190.531 129.283 191.242 cv
128.241 191.844 127.483 193.75 127.483 196.516 cv
cp
132.26 193.602 mo
132.26 197.055 131.151 199.601 129.202 200.727 cv
127.483 201.719 126.32 200.531 126.293 197.187 cv
126.293 193.781 127.565 191.171 129.351 190.14 cv
131.205 189.07 132.26 190.367 132.26 193.602 cv
cp
f
134.427 192.507 mo
134.427 195.148 135.131 196.241 136.213 195.616 cv
137.431 194.913 138.013 192.936 138.013 190.343 cv
138.013 187.843 137.458 186.523 136.227 187.233 cv
135.185 187.835 134.427 189.741 134.427 192.507 cv
cp
139.204 189.593 mo
139.204 193.046 138.094 195.593 136.145 196.718 cv
134.427 197.711 133.263 196.523 133.236 193.179 cv
133.236 189.772 134.508 187.163 136.294 186.132 cv
138.148 185.061 139.204 186.358 139.204 189.593 cv
cp
f
142.885 183.779 mo
142.859 183.795 li
141.329 185.631 li
141.1 184.717 li
143.021 182.42 li
144.036 181.834 li
144.036 191.991 li
142.886 192.654 li
142.885 183.779 li
cp
f
148.314 184.49 mo
148.314 187.13 149.018 188.224 150.1 187.599 cv
151.318 186.896 151.9 184.919 151.9 182.325 cv
151.9 179.826 151.345 178.505 150.113 179.216 cv
149.072 179.818 148.314 181.724 148.314 184.49 cv
cp
153.091 181.576 mo
153.091 185.029 151.982 187.575 150.032 188.701 cv
148.314 189.693 147.15 188.505 147.123 185.161 cv
147.123 181.755 148.395 179.146 150.182 178.114 cv
152.035 177.044 153.091 178.341 153.091 181.576 cv
cp
f
156.772 175.762 mo
156.746 175.777 li
155.217 177.614 li
154.987 176.7 li
156.908 174.403 li
157.923 173.817 li
157.923 183.973 li
156.772 184.637 li
156.772 175.762 li
cp
f
162.2 176.473 mo
162.2 179.113 162.904 180.207 163.986 179.582 cv
165.205 178.878 165.787 176.902 165.787 174.308 cv
165.787 171.809 165.231 170.488 164 171.199 cv
162.958 171.801 162.2 173.707 162.2 176.473 cv
cp
166.977 173.559 mo
166.977 177.012 165.868 179.558 163.919 180.684 cv
162.2 181.676 161.036 180.488 161.009 177.144 cv
161.009 173.738 162.281 171.128 164.068 170.097 cv
165.921 169.027 166.977 170.324 166.977 173.559 cv
cp
f
170.659 167.745 mo
170.632 167.76 li
169.103 169.597 li
168.873 168.683 li
170.794 166.386 li
171.809 165.8 li
171.809 175.956 li
170.659 176.62 li
170.659 167.745 li
cp
f
176.086 168.455 mo
176.086 171.096 176.79 172.189 177.873 171.564 cv
179.091 170.861 179.673 168.884 179.673 166.291 cv
179.673 163.791 179.118 162.471 177.886 163.182 cv
176.844 163.784 176.086 165.69 176.086 168.455 cv
cp
180.863 165.542 mo
180.863 168.995 179.754 171.541 177.805 172.667 cv
176.086 173.659 174.922 172.471 174.896 169.128 cv
174.896 165.721 176.167 163.112 177.954 162.08 cv
179.808 161.01 180.863 162.307 180.863 165.542 cv
cp
f
183.029 164.447 mo
183.029 167.088 183.734 168.181 184.816 167.556 cv
186.034 166.853 186.616 164.876 186.616 162.282 cv
186.616 159.783 186.061 158.463 184.829 159.174 cv
183.787 159.775 183.029 161.681 183.029 164.447 cv
cp
187.806 161.533 mo
187.806 164.986 186.697 167.533 184.748 168.658 cv
183.03 169.65 181.866 168.463 181.839 165.119 cv
181.839 161.712 183.111 159.103 184.897 158.071 cv
186.751 157.001 187.806 158.298 187.806 161.533 cv
cp
f
189.972 160.439 mo
189.972 163.079 190.677 164.173 191.759 163.548 cv
192.977 162.844 193.559 160.868 193.559 158.274 cv
193.559 155.775 193.004 154.454 191.772 155.165 cv
190.73 155.767 189.972 157.673 189.972 160.439 cv
cp
194.75 157.525 mo
194.75 160.978 193.64 163.524 191.691 164.65 cv
189.972 165.642 188.809 164.454 188.782 161.11 cv
188.782 157.704 190.054 155.094 191.84 154.063 cv
193.694 152.993 194.75 154.289 194.75 157.525 cv
cp
f
198.431 151.711 mo
198.405 151.726 li
196.875 153.563 li
196.646 152.649 li
198.567 150.352 li
199.582 149.766 li
199.582 159.922 li
198.432 160.586 li
198.431 151.711 li
cp
f
203.859 152.422 mo
203.859 155.062 204.563 156.155 205.646 155.53 cv
206.864 154.827 207.445 152.85 207.445 150.257 cv
207.445 147.757 206.89 146.437 205.659 147.148 cv
204.617 147.75 203.859 149.656 203.859 152.422 cv
cp
208.636 149.507 mo
208.636 152.961 207.527 155.507 205.577 156.633 cv
203.859 157.625 202.695 156.437 202.668 153.093 cv
202.668 149.687 203.94 147.077 205.727 146.046 cv
207.58 144.976 208.636 146.273 208.636 149.507 cv
cp
f
212.318 143.694 mo
212.291 143.709 li
210.762 145.546 li
210.532 144.632 li
212.454 142.335 li
213.468 141.749 li
213.468 151.905 li
212.318 152.569 li
212.318 143.694 li
cp
f
219.261 139.685 mo
219.234 139.701 li
217.705 141.537 li
217.475 140.623 li
219.396 138.326 li
220.411 137.74 li
220.411 147.896 li
219.261 148.561 li
219.261 139.685 li
cp
f
224.688 140.396 mo
224.688 143.037 225.392 144.13 226.475 143.505 cv
227.693 142.802 228.275 140.825 228.275 138.231 cv
228.275 135.732 227.72 134.411 226.488 135.122 cv
225.446 135.724 224.688 137.63 224.688 140.396 cv
cp
229.465 137.482 mo
229.465 140.935 228.356 143.482 226.407 144.607 cv
224.688 145.599 223.525 144.411 223.498 141.068 cv
223.498 137.661 224.77 135.052 226.556 134.02 cv
228.41 132.95 229.465 134.247 229.465 137.482 cv
cp
f
233.147 131.668 mo
233.12 131.684 li
231.591 133.52 li
231.361 132.606 li
233.283 130.309 li
234.298 129.723 li
234.298 139.879 li
233.147 140.543 li
233.147 131.668 li
cp
f
238.574 132.379 mo
238.574 135.02 239.279 136.113 240.361 135.488 cv
241.579 134.785 242.161 132.808 242.161 130.215 cv
242.161 127.715 241.606 126.394 240.375 127.105 cv
239.333 127.707 238.574 129.613 238.574 132.379 cv
cp
243.352 129.465 mo
243.352 132.918 242.242 135.465 240.293 136.59 cv
238.575 137.582 237.411 136.394 237.384 133.051 cv
237.384 129.644 238.656 127.035 240.442 126.003 cv
242.296 124.933 243.352 126.23 243.352 129.465 cv
cp
f
247.034 123.651 mo
247.007 123.667 li
245.477 125.503 li
245.248 124.589 li
247.169 122.292 li
248.184 121.706 li
248.184 131.862 li
247.034 132.526 li
247.034 123.651 li
cp
f
252.462 124.361 mo
252.462 127.002 253.166 128.095 254.248 127.471 cv
255.467 126.767 256.048 124.79 256.048 122.197 cv
256.048 119.697 255.493 118.377 254.262 119.088 cv
253.22 119.689 252.462 121.596 252.462 124.361 cv
cp
257.239 121.448 mo
257.239 124.901 256.13 127.447 254.18 128.572 cv
252.462 129.565 251.298 128.377 251.271 125.033 cv
251.271 121.626 252.543 119.017 254.33 117.986 cv
256.183 116.916 257.239 118.212 257.239 121.448 cv
cp
f
259.405 120.353 mo
259.405 122.994 260.109 124.087 261.191 123.462 cv
262.41 122.759 262.991 120.782 262.991 118.188 cv
262.991 115.689 262.436 114.368 261.205 115.079 cv
260.163 115.681 259.405 117.587 259.405 120.353 cv
cp
264.182 117.439 mo
264.182 120.892 263.073 123.439 261.124 124.564 cv
259.405 125.556 258.241 124.368 258.214 121.025 cv
258.214 117.618 259.486 115.009 261.273 113.977 cv
263.126 112.907 264.182 114.204 264.182 117.439 cv
cp
f
85.8247 239.321 mo
85.8247 241.962 86.5288 243.055 87.6113 242.43 cv
88.8293 241.727 89.4111 239.75 89.4111 237.157 cv
89.4111 234.657 88.8562 233.337 87.6248 234.048 cv
86.5825 234.649 85.8247 236.556 85.8247 239.321 cv
cp
90.6018 236.407 mo
90.6018 239.861 89.4924 242.407 87.5435 243.532 cv
85.8247 244.525 84.6611 243.337 84.6343 239.993 cv
84.6343 236.586 85.906 233.977 87.6924 232.945 cv
89.5461 231.876 90.6016 233.172 90.6018 236.407 cv
cp
f
94.2837 230.593 mo
94.2568 230.609 li
92.7275 232.445 li
92.4978 231.531 li
94.4194 229.234 li
95.4338 228.648 li
95.4338 238.805 li
94.2837 239.469 li
94.2837 230.593 li
cp
f
99.7109 231.304 mo
99.7112 233.945 100.415 235.038 101.498 234.413 cv
102.716 233.71 103.298 231.733 103.298 229.14 cv
103.297 226.64 102.742 225.32 101.511 226.031 cv
100.469 226.632 99.7109 228.539 99.7109 231.304 cv
cp
104.488 228.39 mo
104.488 231.843 103.379 234.39 101.43 235.515 cv
99.7112 236.508 98.5474 235.32 98.5205 231.976 cv
98.5205 228.57 99.7922 225.96 101.579 224.929 cv
103.432 223.858 104.488 225.155 104.488 228.39 cv
cp
f
108.17 222.576 mo
108.143 222.592 li
106.614 224.428 li
106.384 223.514 li
108.306 221.217 li
109.32 220.632 li
109.32 230.788 li
108.17 231.452 li
108.17 222.576 li
cp
f
113.597 223.287 mo
113.597 225.928 114.302 227.021 115.384 226.396 cv
116.602 225.693 117.184 223.716 117.184 221.123 cv
117.184 218.623 116.629 217.303 115.397 218.014 cv
114.355 218.615 113.597 220.521 113.597 223.287 cv
cp
118.374 220.373 mo
118.375 223.826 117.265 226.373 115.316 227.498 cv
113.597 228.49 112.434 227.303 112.407 223.959 cv
112.407 220.552 113.679 217.943 115.465 216.912 cv
117.319 215.841 118.374 217.138 118.374 220.373 cv
cp
f
122.056 214.559 mo
122.029 214.575 li
120.5 216.411 li
120.271 215.497 li
122.192 213.2 li
123.207 212.615 li
123.207 222.77 li
122.056 223.435 li
122.056 214.559 li
cp
f
127.484 215.27 mo
127.484 217.911 128.188 219.004 129.27 218.379 cv
130.488 217.676 131.07 215.699 131.07 213.106 cv
131.07 210.606 130.515 209.286 129.284 209.996 cv
128.241 210.598 127.484 212.505 127.484 215.27 cv
cp
132.261 212.356 mo
132.261 215.809 131.151 218.356 129.202 219.481 cv
127.484 220.474 126.32 219.285 126.293 215.942 cv
126.293 212.535 127.565 209.926 129.351 208.894 cv
131.205 207.824 132.26 209.121 132.261 212.356 cv
cp
f
135.943 206.542 mo
135.916 206.558 li
134.386 208.394 li
134.157 207.48 li
136.078 205.183 li
137.093 204.597 li
137.093 214.754 li
135.943 215.417 li
135.943 206.542 li
cp
f
141.37 207.253 mo
141.37 209.894 142.074 210.987 143.156 210.362 cv
144.375 209.659 144.957 207.682 144.957 205.089 cv
144.957 202.589 144.402 201.268 143.17 201.98 cv
142.128 202.581 141.37 204.487 141.37 207.253 cv
cp
146.147 204.339 mo
146.147 207.792 145.038 210.339 143.089 211.464 cv
141.37 212.456 140.207 211.269 140.179 207.925 cv
140.179 204.518 141.451 201.909 143.238 200.878 cv
145.091 199.807 146.147 201.104 146.147 204.339 cv
cp
f
149.83 198.525 mo
149.802 198.54 li
148.274 200.377 li
148.044 199.463 li
149.965 197.166 li
150.98 196.58 li
150.98 206.736 li
149.83 207.4 li
149.83 198.525 li
cp
f
155.257 199.236 mo
155.257 201.876 155.961 202.97 157.044 202.345 cv
158.262 201.641 158.844 199.665 158.843 197.071 cv
158.843 194.572 158.288 193.251 157.057 193.962 cv
156.015 194.564 155.257 196.47 155.257 199.236 cv
cp
160.034 196.322 mo
160.034 199.775 158.925 202.321 156.976 203.447 cv
155.257 204.439 154.093 203.251 154.067 199.907 cv
154.067 196.501 155.338 193.891 157.125 192.86 cv
158.979 191.79 160.034 193.087 160.034 196.322 cv
cp
f
163.716 190.508 mo
163.689 190.523 li
162.16 192.36 li
161.93 191.446 li
163.852 189.149 li
164.866 188.563 li
164.866 198.719 li
163.716 199.383 li
163.716 190.508 li
cp
f
169.143 191.219 mo
169.143 193.86 169.847 194.952 170.93 194.327 cv
172.148 193.624 172.73 191.648 172.73 189.054 cv
172.73 186.554 172.175 185.234 170.943 185.945 cv
169.901 186.547 169.143 188.453 169.143 191.219 cv
cp
173.92 188.305 mo
173.92 191.758 172.811 194.304 170.862 195.43 cv
169.143 196.422 167.98 195.234 167.953 191.891 cv
167.953 188.484 169.224 185.874 171.011 184.843 cv
172.865 183.773 173.92 185.07 173.92 188.305 cv
cp
f
176.086 187.21 mo
176.086 189.851 176.791 190.944 177.873 190.319 cv
179.091 189.616 179.673 187.639 179.673 185.045 cv
179.673 182.546 179.118 181.226 177.886 181.937 cv
176.844 182.538 176.086 184.444 176.086 187.21 cv
cp
180.864 184.296 mo
180.864 187.749 179.754 190.296 177.805 191.421 cv
176.086 192.413 174.923 191.226 174.896 187.882 cv
174.896 184.475 176.167 181.866 177.954 180.834 cv
179.808 179.764 180.864 181.061 180.864 184.296 cv
cp
f
184.545 178.482 mo
184.519 178.498 li
182.989 180.334 li
182.76 179.42 li
184.681 177.123 li
185.696 176.537 li
185.696 186.693 li
184.546 187.358 li
184.545 178.482 li
cp
f
189.973 179.193 mo
189.973 181.834 190.677 182.927 191.759 182.302 cv
192.977 181.599 193.559 179.622 193.559 177.028 cv
193.559 174.529 193.004 173.208 191.772 173.919 cv
190.73 174.521 189.973 176.427 189.973 179.193 cv
cp
194.75 176.279 mo
194.75 179.732 193.64 182.279 191.691 183.404 cv
189.973 184.396 188.809 183.208 188.782 179.865 cv
188.782 176.458 190.054 173.849 191.841 172.817 cv
193.694 171.747 194.75 173.044 194.75 176.279 cv
cp
f
198.432 170.465 mo
198.405 170.481 li
196.876 172.317 li
196.646 171.403 li
198.567 169.106 li
199.582 168.52 li
199.582 178.676 li
198.432 179.34 li
198.432 170.465 li
cp
f
203.859 171.176 mo
203.859 173.817 204.563 174.91 205.646 174.285 cv
206.864 173.582 207.446 171.605 207.446 169.012 cv
207.446 166.512 206.89 165.191 205.659 165.902 cv
204.617 166.504 203.859 168.41 203.859 171.176 cv
cp
208.636 168.262 mo
208.636 171.715 207.527 174.262 205.578 175.387 cv
203.859 176.379 202.696 175.192 202.669 171.848 cv
202.669 168.441 203.94 165.832 205.727 164.8 cv
207.581 163.73 208.636 165.027 208.636 168.262 cv
cp
f
212.318 162.448 mo
212.291 162.464 li
210.762 164.3 li
210.532 163.386 li
212.454 161.089 li
213.468 160.503 li
213.468 170.659 li
212.318 171.323 li
212.318 162.448 li
cp
f
217.745 163.159 mo
217.745 165.8 218.449 166.893 219.532 166.268 cv
220.75 165.565 221.332 163.588 221.332 160.994 cv
221.332 158.495 220.777 157.174 219.545 157.885 cv
218.503 158.487 217.745 160.393 217.745 163.159 cv
cp
222.522 160.245 mo
222.522 163.698 221.413 166.245 219.464 167.37 cv
217.746 168.362 216.582 167.174 216.555 163.831 cv
216.555 160.424 217.827 157.815 219.613 156.783 cv
221.467 155.713 222.522 157.01 222.522 160.245 cv
cp
f
226.204 154.431 mo
226.177 154.446 li
224.648 156.283 li
224.418 155.369 li
226.34 153.072 li
227.354 152.486 li
227.355 162.642 li
226.204 163.306 li
226.204 154.431 li
cp
f
231.632 155.142 mo
231.632 157.782 232.336 158.876 233.418 158.251 cv
234.636 157.548 235.218 155.571 235.218 152.977 cv
235.218 150.478 234.663 149.157 233.432 149.868 cv
232.39 150.47 231.632 152.376 231.632 155.142 cv
cp
236.409 152.228 mo
236.409 155.681 235.3 158.228 233.35 159.353 cv
231.632 160.345 230.468 159.157 230.441 155.813 cv
230.441 152.407 231.713 149.797 233.5 148.766 cv
235.353 147.696 236.409 148.993 236.409 152.228 cv
cp
f
240.091 146.414 mo
240.064 146.43 li
238.534 148.266 li
238.305 147.352 li
240.226 145.055 li
241.241 144.469 li
241.241 154.625 li
240.091 155.289 li
240.091 146.414 li
cp
f
247.034 142.406 mo
247.007 142.421 li
245.478 144.257 li
245.248 143.343 li
247.17 141.046 li
248.184 140.461 li
248.184 150.617 li
247.034 151.281 li
247.034 142.406 li
cp
f
252.462 143.116 mo
252.462 145.757 253.166 146.85 254.248 146.225 cv
255.467 145.522 256.049 143.545 256.049 140.951 cv
256.049 138.452 255.494 137.131 254.262 137.842 cv
253.22 138.444 252.462 140.35 252.462 143.116 cv
cp
257.239 140.202 mo
257.239 143.655 256.13 146.201 254.181 147.327 cv
252.462 148.319 251.298 147.131 251.271 143.787 cv
251.271 140.381 252.543 137.772 254.33 136.74 cv
256.183 135.67 257.239 136.967 257.239 140.202 cv
cp
f
260.921 134.388 mo
260.894 134.404 li
259.365 136.24 li
259.135 135.326 li
261.056 133.029 li
262.071 132.443 li
262.071 142.599 li
260.921 143.263 li
260.921 134.388 li
cp
f
87.3406 253.357 mo
87.3137 253.372 li
85.7847 255.208 li
85.5549 254.294 li
87.4763 251.997 li
88.491 251.412 li
88.491 261.567 li
87.3408 262.232 li
87.3406 253.357 li
cp
f
92.7681 254.067 mo
92.7681 256.708 93.4724 257.801 94.5547 257.176 cv
95.7727 256.473 96.3545 254.496 96.3545 251.903 cv
96.3545 249.403 95.7996 248.083 94.5679 248.794 cv
93.5259 249.395 92.7681 251.302 92.7681 254.067 cv
cp
97.5452 251.153 mo
97.5452 254.606 96.436 257.153 94.4868 258.278 cv
92.7681 259.271 91.6045 258.083 91.5776 254.739 cv
91.5776 251.332 92.8494 248.723 94.6357 247.692 cv
96.4895 246.622 97.5452 247.918 97.5452 251.153 cv
cp
f
101.227 245.339 mo
101.2 245.355 li
99.6709 247.191 li
99.4412 246.277 li
101.363 243.98 li
102.377 243.394 li
102.377 253.551 li
101.227 254.214 li
101.227 245.339 li
cp
f
106.655 246.05 mo
106.655 248.691 107.359 249.784 108.441 249.159 cv
109.659 248.456 110.241 246.479 110.241 243.886 cv
110.241 241.386 109.686 240.065 108.454 240.777 cv
107.412 241.378 106.654 243.284 106.655 246.05 cv
cp
111.431 243.136 mo
111.431 246.589 110.322 249.136 108.373 250.261 cv
106.655 251.253 105.491 250.066 105.464 246.722 cv
105.464 243.315 106.736 240.706 108.522 239.675 cv
110.376 238.604 111.431 239.901 111.431 243.136 cv
cp
f
113.598 242.041 mo
113.598 244.682 114.302 245.775 115.384 245.151 cv
116.602 244.447 117.184 242.47 117.184 239.877 cv
117.184 237.377 116.629 236.057 115.397 236.768 cv
114.355 237.37 113.598 239.276 113.598 242.041 cv
cp
118.375 239.128 mo
118.375 242.581 117.265 245.127 115.316 246.253 cv
113.598 247.245 112.434 246.057 112.407 242.713 cv
112.407 239.307 113.679 236.698 115.465 235.666 cv
117.319 234.596 118.375 235.893 118.375 239.128 cv
cp
f
122.056 233.314 mo
122.03 233.329 li
120.5 235.166 li
120.271 234.252 li
122.192 231.955 li
123.207 231.369 li
123.207 241.525 li
122.057 242.189 li
122.056 233.314 li
cp
f
127.484 234.025 mo
127.484 236.665 128.188 237.759 129.271 237.134 cv
130.489 236.43 131.07 234.454 131.07 231.86 cv
131.07 229.361 130.515 228.04 129.284 228.751 cv
128.242 229.353 127.484 231.259 127.484 234.025 cv
cp
132.261 231.111 mo
132.261 234.564 131.152 237.11 129.203 238.236 cv
127.484 239.228 126.32 238.04 126.293 234.696 cv
126.293 231.29 127.565 228.68 129.352 227.649 cv
131.205 226.579 132.261 227.876 132.261 231.111 cv
cp
f
135.943 225.297 mo
135.916 225.312 li
134.387 227.148 li
134.157 226.235 li
136.078 223.938 li
137.093 223.352 li
137.093 233.508 li
135.943 234.172 li
135.943 225.297 li
cp
f
141.37 226.008 mo
141.37 228.648 142.074 229.741 143.157 229.116 cv
144.375 228.413 144.957 226.436 144.957 223.843 cv
144.957 221.343 144.402 220.023 143.17 220.734 cv
142.128 221.336 141.37 223.242 141.37 226.008 cv
cp
146.147 223.094 mo
146.147 226.547 145.038 229.093 143.089 230.219 cv
141.37 231.211 140.207 230.023 140.18 226.679 cv
140.18 223.273 141.452 220.663 143.238 219.632 cv
145.092 218.562 146.147 219.859 146.147 223.094 cv
cp
f
149.83 217.279 mo
149.803 217.295 li
148.274 219.131 li
148.044 218.217 li
149.966 215.92 li
150.98 215.334 li
150.98 225.49 li
149.83 226.155 li
149.83 217.279 li
cp
f
155.257 217.99 mo
155.257 220.631 155.961 221.724 157.044 221.099 cv
158.262 220.396 158.844 218.419 158.844 215.826 cv
158.844 213.326 158.289 212.005 157.057 212.716 cv
156.015 213.318 155.257 215.224 155.257 217.99 cv
cp
160.034 215.076 mo
160.034 218.529 158.925 221.076 156.976 222.201 cv
155.257 223.193 154.094 222.005 154.067 218.662 cv
154.067 215.255 155.338 212.646 157.125 211.614 cv
158.979 210.544 160.034 211.841 160.034 215.076 cv
cp
f
163.716 209.262 mo
163.689 209.278 li
162.16 211.114 li
161.93 210.2 li
163.852 207.903 li
164.866 207.317 li
164.866 217.474 li
163.716 218.137 li
163.716 209.262 li
cp
f
169.144 209.973 mo
169.144 212.614 169.848 213.707 170.93 213.082 cv
172.148 212.379 172.73 210.402 172.73 207.809 cv
172.73 205.309 172.175 203.988 170.943 204.7 cv
169.901 205.301 169.144 207.207 169.144 209.973 cv
cp
173.92 207.059 mo
173.921 210.512 172.811 213.059 170.862 214.184 cv
169.144 215.176 167.98 213.989 167.953 210.645 cv
167.953 207.238 169.225 204.629 171.011 203.597 cv
172.865 202.527 173.92 203.824 173.92 207.059 cv
cp
f
177.602 201.245 mo
177.575 201.261 li
176.046 203.097 li
175.817 202.183 li
177.738 199.886 li
178.753 199.301 li
178.753 209.456 li
177.602 210.121 li
177.602 201.245 li
cp
f
183.03 201.956 mo
183.03 204.597 183.734 205.69 184.816 205.065 cv
186.034 204.362 186.616 202.385 186.616 199.791 cv
186.616 197.292 186.061 195.972 184.83 196.682 cv
183.788 197.284 183.03 199.19 183.03 201.956 cv
cp
187.807 199.042 mo
187.807 202.495 186.698 205.042 184.749 206.167 cv
183.03 207.159 181.866 205.971 181.839 202.628 cv
181.839 199.221 183.111 196.612 184.897 195.58 cv
186.751 194.51 187.807 195.807 187.807 199.042 cv
cp
f
191.489 193.228 mo
191.462 193.244 li
189.933 195.08 li
189.703 194.166 li
191.624 191.869 li
192.639 191.283 li
192.639 201.439 li
191.489 202.103 li
191.489 193.228 li
cp
f
196.916 193.939 mo
196.916 196.58 197.62 197.673 198.703 197.048 cv
199.921 196.345 200.502 194.368 200.502 191.775 cv
200.502 189.275 199.948 187.954 198.716 188.665 cv
197.674 189.267 196.916 191.173 196.916 193.939 cv
cp
201.693 191.025 mo
201.693 194.478 200.584 197.025 198.635 198.15 cv
196.916 199.142 195.752 197.954 195.726 194.611 cv
195.726 191.204 196.998 188.595 198.784 187.563 cv
200.638 186.493 201.693 187.79 201.693 191.025 cv
cp
f
205.375 185.211 mo
205.348 185.227 li
203.819 187.063 li
203.589 186.149 li
205.511 183.852 li
206.525 183.266 li
206.525 193.422 li
205.375 194.086 li
205.375 185.211 li
cp
f
210.802 185.922 mo
210.802 188.563 211.507 189.656 212.589 189.031 cv
213.807 188.327 214.389 186.351 214.389 183.757 cv
214.389 181.258 213.834 179.937 212.603 180.648 cv
211.561 181.25 210.802 183.156 210.802 185.922 cv
cp
215.58 183.008 mo
215.58 186.461 214.47 189.008 212.521 190.133 cv
210.802 191.125 209.639 189.937 209.612 186.594 cv
209.612 183.187 210.884 180.578 212.67 179.546 cv
214.524 178.476 215.58 179.773 215.58 183.008 cv
cp
f
219.261 177.194 mo
219.235 177.209 li
217.705 179.046 li
217.476 178.132 li
219.397 175.835 li
220.412 175.249 li
220.412 185.405 li
219.262 186.069 li
219.261 177.194 li
cp
f
224.689 177.905 mo
224.689 180.545 225.393 181.639 226.475 181.014 cv
227.693 180.311 228.275 178.334 228.275 175.74 cv
228.275 173.241 227.72 171.92 226.489 172.631 cv
225.447 173.233 224.689 175.139 224.689 177.905 cv
cp
229.466 174.991 mo
229.466 178.444 228.357 180.99 226.407 182.116 cv
224.689 183.108 223.525 181.92 223.498 178.576 cv
223.498 175.17 224.77 172.561 226.557 171.529 cv
228.41 170.459 229.466 171.756 229.466 174.991 cv
cp
f
233.148 169.177 mo
233.121 169.193 li
231.592 171.029 li
231.362 170.115 li
233.283 167.818 li
234.298 167.232 li
234.298 177.388 li
233.148 178.052 li
233.148 169.177 li
cp
f
238.575 169.888 mo
238.575 172.529 239.279 173.622 240.362 172.997 cv
241.58 172.293 242.162 170.317 242.162 167.723 cv
242.162 165.224 241.606 163.903 240.375 164.614 cv
239.333 165.216 238.575 167.122 238.575 169.888 cv
cp
243.352 166.974 mo
243.352 170.427 242.243 172.974 240.294 174.099 cv
238.575 175.091 237.412 173.903 237.385 170.56 cv
237.385 167.153 238.656 164.544 240.443 163.512 cv
242.297 162.442 243.352 163.739 243.352 166.974 cv
cp
f
245.518 165.879 mo
245.519 168.52 246.222 169.613 247.305 168.988 cv
248.523 168.285 249.105 166.308 249.105 163.715 cv
249.104 161.215 248.55 159.895 247.318 160.606 cv
246.276 161.207 245.518 163.113 245.518 165.879 cv
cp
250.295 162.965 mo
250.295 166.418 249.186 168.965 247.237 170.09 cv
245.519 171.082 244.354 169.895 244.328 166.551 cv
244.328 163.145 245.6 160.535 247.386 159.504 cv
249.24 158.433 250.295 159.73 250.295 162.965 cv
cp
f
252.462 161.87 mo
252.462 164.511 253.166 165.604 254.249 164.979 cv
255.467 164.276 256.049 162.299 256.049 159.706 cv
256.049 157.206 255.494 155.886 254.262 156.597 cv
253.22 157.198 252.462 159.105 252.462 161.87 cv
cp
257.239 158.956 mo
257.239 162.41 256.13 164.956 254.181 166.081 cv
252.462 167.074 251.298 165.886 251.272 162.542 cv
251.272 159.135 252.543 156.526 254.33 155.495 cv
256.184 154.425 257.239 155.721 257.239 158.956 cv
cp
f
260.921 153.142 mo
260.894 153.158 li
259.365 154.994 li
259.135 154.08 li
261.057 151.783 li
262.071 151.198 li
262.072 161.354 li
260.921 162.018 li
260.921 153.142 li
cp
f
87.3408 272.111 mo
87.314 272.126 li
85.7849 273.963 li
85.5549 273.049 li
87.4766 270.752 li
88.491 270.166 li
88.4912 280.322 li
87.3411 280.986 li
87.3408 272.111 li
cp
f
92.7683 272.822 mo
92.7683 275.462 93.4724 276.556 94.5549 275.931 cv
95.7729 275.227 96.3547 273.251 96.3547 270.657 cv
96.3547 268.158 95.7998 266.837 94.5681 267.548 cv
93.5261 268.15 92.7683 270.056 92.7683 272.822 cv
cp
97.5454 269.908 mo
97.5454 273.361 96.436 275.907 94.4871 277.033 cv
92.7683 278.025 91.6047 276.837 91.5779 273.493 cv
91.5776 270.087 92.8496 267.477 94.636 266.446 cv
96.4897 265.376 97.5452 266.673 97.5454 269.908 cv
cp
f
101.227 264.094 mo
101.2 264.11 li
99.6711 265.945 li
99.4414 265.032 li
101.363 262.735 li
102.377 262.149 li
102.377 272.305 li
101.227 272.969 li
101.227 264.094 li
cp
f
106.655 264.805 mo
106.655 267.445 107.359 268.538 108.441 267.913 cv
109.659 267.21 110.241 265.233 110.241 262.64 cv
110.241 260.14 109.686 258.82 108.455 259.531 cv
107.412 260.133 106.655 262.039 106.655 264.805 cv
cp
111.432 261.891 mo
111.432 265.344 110.323 267.89 108.373 269.016 cv
106.655 270.008 105.491 268.82 105.464 265.477 cv
105.464 262.07 106.736 259.461 108.522 258.429 cv
110.376 257.359 111.432 258.656 111.432 261.891 cv
cp
f
115.114 256.077 mo
115.087 256.092 li
113.557 257.929 li
113.328 257.015 li
115.249 254.718 li
116.264 254.132 li
116.264 264.288 li
115.114 264.952 li
115.114 256.077 li
cp
f
120.541 256.787 mo
120.541 259.428 121.245 260.522 122.328 259.897 cv
123.546 259.193 124.127 257.217 124.127 254.623 cv
124.127 252.124 123.573 250.803 122.341 251.514 cv
121.299 252.116 120.541 254.022 120.541 256.787 cv
cp
125.318 253.874 mo
125.318 257.327 124.209 259.873 122.26 260.999 cv
120.541 261.991 119.377 260.803 119.35 257.459 cv
119.35 254.053 120.622 251.443 122.409 250.412 cv
124.262 249.342 125.318 250.638 125.318 253.874 cv
cp
f
127.484 252.779 mo
127.484 255.42 128.188 256.513 129.271 255.888 cv
130.489 255.185 131.071 253.208 131.071 250.615 cv
131.071 248.115 130.516 246.794 129.284 247.505 cv
128.242 248.107 127.484 250.013 127.484 252.779 cv
cp
132.261 249.865 mo
132.261 253.318 131.152 255.865 129.203 256.99 cv
127.484 257.982 126.321 256.794 126.294 253.451 cv
126.293 250.044 127.565 247.435 129.352 246.403 cv
131.206 245.333 132.261 246.63 132.261 249.865 cv
cp
f
134.427 248.771 mo
134.427 251.411 135.132 252.504 136.214 251.879 cv
137.432 251.176 138.014 249.2 138.014 246.606 cv
138.014 244.106 137.459 242.786 136.227 243.497 cv
135.185 244.099 134.427 246.005 134.427 248.771 cv
cp
139.204 245.857 mo
139.204 249.31 138.095 251.856 136.146 252.982 cv
134.427 253.974 133.264 252.786 133.237 249.442 cv
133.237 246.036 134.509 243.426 136.295 242.395 cv
138.149 241.325 139.204 242.622 139.204 245.857 cv
cp
f
142.886 240.043 mo
142.859 240.058 li
141.33 241.894 li
141.1 240.981 li
143.022 238.684 li
144.036 238.098 li
144.036 248.254 li
142.886 248.918 li
142.886 240.043 li
cp
f
148.314 240.753 mo
148.314 243.394 149.019 244.487 150.101 243.862 cv
151.319 243.159 151.901 241.182 151.901 238.588 cv
151.901 236.089 151.346 234.769 150.114 235.479 cv
149.072 236.081 148.314 237.987 148.314 240.753 cv
cp
153.091 237.839 mo
153.092 241.292 151.982 243.839 150.033 244.964 cv
148.314 245.956 147.151 244.768 147.124 241.425 cv
147.124 238.018 148.396 235.409 150.182 234.377 cv
152.036 233.307 153.091 234.604 153.091 237.839 cv
cp
f
156.773 232.025 mo
156.746 232.041 li
155.217 233.877 li
154.987 232.963 li
156.909 230.666 li
157.923 230.08 li
157.923 240.236 li
156.773 240.9 li
156.773 232.025 li
cp
f
162.2 232.736 mo
162.201 235.377 162.905 236.47 163.987 235.845 cv
165.205 235.142 165.787 233.165 165.787 230.572 cv
165.787 228.072 165.232 226.751 164 227.462 cv
162.958 228.064 162.2 229.97 162.2 232.736 cv
cp
166.978 229.822 mo
166.978 233.275 165.868 235.822 163.919 236.947 cv
162.201 237.939 161.037 236.752 161.01 233.408 cv
161.01 230.001 162.282 227.392 164.068 226.361 cv
165.922 225.29 166.978 226.587 166.978 229.822 cv
cp
f
170.66 224.008 mo
170.633 224.024 li
169.103 225.86 li
168.874 224.946 li
170.795 222.649 li
171.81 222.063 li
171.81 232.219 li
170.66 232.883 li
170.66 224.008 li
cp
f
176.087 224.719 mo
176.087 227.36 176.791 228.453 177.874 227.828 cv
179.092 227.125 179.673 225.148 179.673 222.554 cv
179.673 220.055 179.118 218.734 177.887 219.445 cv
176.845 220.047 176.087 221.953 176.087 224.719 cv
cp
180.864 221.805 mo
180.864 225.258 179.755 227.805 177.806 228.93 cv
176.087 229.922 174.923 228.734 174.896 225.391 cv
174.896 221.984 176.168 219.375 177.955 218.343 cv
179.809 217.273 180.864 218.57 180.864 221.805 cv
cp
f
183.03 220.71 mo
183.03 223.351 183.734 224.444 184.817 223.82 cv
186.035 223.116 186.616 221.139 186.616 218.546 cv
186.616 216.046 186.062 214.726 184.83 215.437 cv
183.788 216.038 183.03 217.945 183.03 220.71 cv
cp
187.807 217.797 mo
187.807 221.25 186.698 223.796 184.749 224.921 cv
183.03 225.914 181.866 224.726 181.839 221.382 cv
181.839 217.976 183.111 215.366 184.898 214.335 cv
186.751 213.265 187.807 214.561 187.807 217.797 cv
cp
f
189.973 216.702 mo
189.973 219.343 190.677 220.436 191.76 219.811 cv
192.978 219.108 193.56 217.131 193.56 214.537 cv
193.56 212.038 193.005 210.717 191.773 211.428 cv
190.731 212.03 189.973 213.936 189.973 216.702 cv
cp
194.75 213.788 mo
194.75 217.241 193.641 219.788 191.692 220.913 cv
189.973 221.905 188.81 220.717 188.782 217.373 cv
188.782 213.967 190.054 211.358 191.841 210.326 cv
193.695 209.256 194.75 210.553 194.75 213.788 cv
cp
f
198.432 207.974 mo
198.405 207.99 li
196.876 209.826 li
196.646 208.912 li
198.568 206.615 li
199.582 206.029 li
199.582 216.185 li
198.432 216.849 li
198.432 207.974 li
cp
f
203.86 208.685 mo
203.86 211.326 204.564 212.419 205.646 211.794 cv
206.864 211.09 207.446 209.114 207.446 206.52 cv
207.446 204.021 206.891 202.7 205.659 203.411 cv
204.617 204.013 203.86 205.919 203.86 208.685 cv
cp
208.636 205.771 mo
208.637 209.224 207.527 211.771 205.578 212.896 cv
203.86 213.888 202.696 212.701 202.669 209.357 cv
202.669 205.95 203.941 203.341 205.727 202.309 cv
207.581 201.239 208.636 202.536 208.636 205.771 cv
cp
f
212.318 199.957 mo
212.292 199.973 li
210.762 201.809 li
210.533 200.895 li
212.454 198.598 li
213.469 198.012 li
213.469 208.168 li
212.318 208.832 li
212.318 199.957 li
cp
f
219.262 195.949 mo
219.235 195.964 li
217.706 197.801 li
217.476 196.887 li
219.397 194.589 li
220.412 194.004 li
220.412 204.159 li
219.262 204.824 li
219.262 195.949 li
cp
f
224.689 196.659 mo
224.689 199.3 225.393 200.393 226.476 199.768 cv
227.694 199.065 228.276 197.088 228.275 194.495 cv
228.275 191.995 227.72 190.675 226.489 191.386 cv
225.447 191.987 224.689 193.894 224.689 196.659 cv
cp
229.466 193.745 mo
229.466 197.198 228.357 199.745 226.408 200.87 cv
224.689 201.863 223.525 200.675 223.499 197.331 cv
223.499 193.924 224.77 191.315 226.557 190.284 cv
228.411 189.214 229.466 190.51 229.466 193.745 cv
cp
f
233.148 187.931 mo
233.121 187.947 li
231.592 189.783 li
231.362 188.869 li
233.284 186.572 li
234.298 185.986 li
234.298 196.143 li
233.148 196.807 li
233.148 187.931 li
cp
f
238.575 188.642 mo
238.575 191.283 239.28 192.376 240.362 191.751 cv
241.58 191.048 242.162 189.071 242.162 186.478 cv
242.162 183.978 241.607 182.657 240.375 183.369 cv
239.333 183.97 238.575 185.876 238.575 188.642 cv
cp
243.352 185.728 mo
243.352 189.181 242.243 191.728 240.294 192.853 cv
238.575 193.845 237.412 192.658 237.385 189.314 cv
237.385 185.908 238.656 183.298 240.443 182.267 cv
242.297 181.196 243.352 182.493 243.352 185.728 cv
cp
f
247.034 179.915 mo
247.007 179.93 li
245.478 181.766 li
245.248 180.852 li
247.17 178.555 li
248.184 177.97 li
248.185 188.126 li
247.034 188.79 li
247.034 179.915 li
cp
f
252.462 180.625 mo
252.462 183.265 253.167 184.359 254.249 183.734 cv
255.467 183.031 256.049 181.054 256.049 178.46 cv
256.049 175.961 255.494 174.64 254.262 175.351 cv
253.22 175.953 252.462 177.859 252.462 180.625 cv
cp
257.24 177.711 mo
257.24 181.164 256.13 183.71 254.181 184.836 cv
252.462 185.828 251.299 184.64 251.272 181.296 cv
251.272 177.89 252.543 175.281 254.33 174.249 cv
256.184 173.179 257.239 174.476 257.24 177.711 cv
cp
f
259.406 176.616 mo
259.406 179.257 260.11 180.35 261.192 179.725 cv
262.41 179.022 262.992 177.045 262.992 174.452 cv
262.992 171.952 262.437 170.632 261.205 171.343 cv
260.163 171.944 259.406 173.851 259.406 176.616 cv
cp
264.182 173.702 mo
264.183 177.155 263.073 179.702 261.124 180.827 cv
259.406 181.82 258.242 180.632 258.215 177.288 cv
258.215 173.882 259.487 171.272 261.273 170.241 cv
263.127 169.17 264.182 170.467 264.182 173.702 cv
cp
f
85.8254 295.585 mo
85.8254 298.225 86.5295 299.319 87.6118 298.694 cv
88.8301 297.991 89.4119 296.014 89.4119 293.42 cv
89.4119 290.921 88.8569 289.6 87.6252 290.311 cv
86.5833 290.913 85.8254 292.819 85.8254 295.585 cv
cp
90.6023 292.671 mo
90.6023 296.124 89.4932 298.67 87.5442 299.796 cv
85.8254 300.788 84.6619 299.6 84.6348 296.256 cv
84.6348 292.85 85.9067 290.24 87.6931 289.209 cv
89.5469 288.139 90.6023 289.436 90.6023 292.671 cv
cp
f
94.2842 286.857 mo
94.2573 286.872 li
92.7283 288.709 li
92.4985 287.795 li
94.4199 285.498 li
95.4346 284.912 li
95.4346 295.068 li
94.2844 295.732 li
94.2842 286.857 li
cp
f
99.7117 287.568 mo
99.7117 290.208 100.416 291.301 101.498 290.676 cv
102.716 289.973 103.298 287.997 103.298 285.403 cv
103.298 282.903 102.743 281.583 101.512 282.294 cv
100.469 282.896 99.7117 284.802 99.7117 287.568 cv
cp
104.489 284.654 mo
104.489 288.107 103.38 290.654 101.43 291.779 cv
99.7117 292.771 98.5481 291.583 98.5212 288.239 cv
98.5212 284.833 99.793 282.223 101.579 281.192 cv
103.433 280.122 104.489 281.419 104.489 284.654 cv
cp
f
108.171 278.84 mo
108.144 278.855 li
106.615 280.692 li
106.385 279.778 li
108.306 277.481 li
109.321 276.895 li
109.321 287.051 li
108.171 287.715 li
108.171 278.84 li
cp
f
113.598 279.55 mo
113.598 282.191 114.302 283.284 115.385 282.66 cv
116.603 281.956 117.185 279.979 117.185 277.386 cv
117.184 274.886 116.629 273.566 115.398 274.277 cv
114.356 274.878 113.598 276.785 113.598 279.55 cv
cp
118.375 276.637 mo
118.375 280.09 117.266 282.636 115.317 283.761 cv
113.598 284.754 112.434 283.566 112.407 280.222 cv
112.407 276.816 113.679 274.206 115.466 273.175 cv
117.319 272.105 118.375 273.401 118.375 276.637 cv
cp
f
122.057 270.823 mo
122.03 270.838 li
120.501 272.675 li
120.271 271.761 li
122.193 269.463 li
123.207 268.878 li
123.207 279.034 li
122.057 279.698 li
122.057 270.823 li
cp
f
127.484 271.534 mo
127.484 274.174 128.188 275.268 129.271 274.643 cv
130.489 273.939 131.071 271.963 131.071 269.369 cv
131.071 266.869 130.516 265.549 129.284 266.26 cv
128.242 266.862 127.484 268.768 127.484 271.534 cv
cp
132.261 268.62 mo
132.261 272.073 131.152 274.619 129.203 275.745 cv
127.484 276.737 126.321 275.549 126.294 272.205 cv
126.294 268.799 127.566 266.189 129.352 265.158 cv
131.206 264.088 132.261 265.384 132.261 268.62 cv
cp
f
135.943 262.806 mo
135.916 262.821 li
134.387 264.657 li
134.157 263.743 li
136.079 261.447 li
137.094 260.861 li
137.094 271.017 li
135.943 271.681 li
135.943 262.806 li
cp
f
141.37 263.516 mo
141.371 266.157 142.075 267.25 143.157 266.625 cv
144.375 265.922 144.957 263.945 144.957 261.352 cv
144.957 258.852 144.402 257.532 143.171 258.243 cv
142.128 258.845 141.37 260.751 141.37 263.516 cv
cp
146.147 260.602 mo
146.147 264.056 145.038 266.602 143.089 267.727 cv
141.371 268.72 140.207 267.532 140.18 264.188 cv
140.18 260.782 141.452 258.172 143.238 257.141 cv
145.092 256.07 146.147 257.367 146.147 260.602 cv
cp
f
149.83 254.788 mo
149.803 254.804 li
148.274 256.64 li
148.044 255.726 li
149.966 253.429 li
150.981 252.843 li
150.981 262.999 li
149.83 263.664 li
149.83 254.788 li
cp
f
155.258 255.499 mo
155.258 258.14 155.962 259.233 157.044 258.608 cv
158.262 257.905 158.844 255.928 158.844 253.335 cv
158.844 250.835 158.289 249.514 157.058 250.225 cv
156.016 250.827 155.258 252.733 155.258 255.499 cv
cp
160.035 252.585 mo
160.035 256.038 158.926 258.585 156.977 259.71 cv
155.258 260.702 154.094 259.514 154.067 256.171 cv
154.067 252.764 155.339 250.155 157.125 249.123 cv
158.979 248.053 160.035 249.35 160.035 252.585 cv
cp
f
163.716 246.771 mo
163.69 246.787 li
162.16 248.623 li
161.931 247.709 li
163.852 245.412 li
164.867 244.826 li
164.867 254.982 li
163.717 255.646 li
163.716 246.771 li
cp
f
169.144 247.482 mo
169.144 250.123 169.848 251.216 170.93 250.591 cv
172.149 249.888 172.73 247.911 172.73 245.317 cv
172.73 242.818 172.176 241.497 170.944 242.209 cv
169.902 242.81 169.144 244.716 169.144 247.482 cv
cp
173.921 244.568 mo
173.921 248.021 172.812 250.568 170.863 251.693 cv
169.144 252.685 167.98 251.497 167.953 248.154 cv
167.953 244.747 169.225 242.138 171.012 241.106 cv
172.865 240.036 173.921 241.333 173.921 244.568 cv
cp
f
176.087 243.473 mo
176.087 246.114 176.792 247.207 177.874 246.582 cv
179.092 245.879 179.674 243.902 179.674 241.309 cv
179.674 238.809 179.119 237.489 177.887 238.2 cv
176.845 238.801 176.087 240.707 176.087 243.473 cv
cp
180.864 240.56 mo
180.864 244.013 179.755 246.559 177.806 247.684 cv
176.087 248.677 174.924 247.489 174.896 244.145 cv
174.896 240.739 176.168 238.129 177.955 237.098 cv
179.809 236.028 180.864 237.324 180.864 240.56 cv
cp
f
184.546 234.746 mo
184.519 234.761 li
182.99 236.598 li
182.76 235.684 li
184.682 233.386 li
185.696 232.801 li
185.696 242.957 li
184.546 243.621 li
184.546 234.746 li
cp
f
189.974 235.456 mo
189.974 238.097 190.677 239.19 191.76 238.565 cv
192.978 237.862 193.56 235.885 193.56 233.292 cv
193.56 230.792 193.005 229.472 191.773 230.183 cv
190.731 230.785 189.974 232.691 189.974 235.456 cv
cp
194.75 232.542 mo
194.75 235.996 193.641 238.542 191.692 239.668 cv
189.974 240.66 188.81 239.472 188.783 236.128 cv
188.783 232.721 190.055 230.112 191.841 229.081 cv
193.695 228.011 194.75 229.307 194.75 232.542 cv
cp
f
198.432 226.728 mo
198.405 226.744 li
196.876 228.58 li
196.646 227.666 li
198.568 225.369 li
199.583 224.784 li
199.583 234.94 li
198.432 235.604 li
198.432 226.728 li
cp
f
203.86 227.439 mo
203.86 230.08 204.564 231.173 205.646 230.548 cv
206.865 229.845 207.446 227.868 207.446 225.275 cv
207.446 222.775 206.891 221.455 205.66 222.166 cv
204.618 222.767 203.86 224.673 203.86 227.439 cv
cp
208.637 224.525 mo
208.637 227.978 207.528 230.525 205.579 231.65 cv
203.86 232.642 202.696 231.455 202.669 228.111 cv
202.669 224.705 203.941 222.095 205.728 221.064 cv
207.581 219.993 208.637 221.29 208.637 224.525 cv
cp
f
212.319 218.712 mo
212.292 218.727 li
210.762 220.563 li
210.533 219.65 li
212.454 217.352 li
213.469 216.767 li
213.469 226.923 li
212.319 227.587 li
212.319 218.712 li
cp
f
217.746 219.422 mo
217.746 222.063 218.45 223.156 219.533 222.531 cv
220.751 221.828 221.333 219.851 221.333 217.258 cv
221.333 214.758 220.778 213.438 219.546 214.149 cv
218.504 214.75 217.746 216.656 217.746 219.422 cv
cp
222.523 216.508 mo
222.523 219.962 221.414 222.508 219.465 223.633 cv
217.746 224.626 216.583 223.438 216.555 220.094 cv
216.555 216.687 217.827 214.078 219.614 213.047 cv
221.468 211.977 222.523 213.273 222.523 216.508 cv
cp
f
226.205 210.694 mo
226.178 210.71 li
224.649 212.546 li
224.419 211.632 li
226.341 209.335 li
227.355 208.75 li
227.355 218.906 li
226.205 219.57 li
226.205 210.694 li
cp
f
231.632 211.405 mo
231.632 214.046 232.337 215.139 233.419 214.514 cv
234.637 213.811 235.219 211.834 235.219 209.241 cv
235.219 206.741 234.664 205.421 233.432 206.131 cv
232.39 206.733 231.632 208.639 231.632 211.405 cv
cp
236.41 208.491 mo
236.41 211.944 235.3 214.491 233.351 215.616 cv
231.632 216.609 230.469 215.421 230.442 212.077 cv
230.442 208.67 231.714 206.061 233.5 205.03 cv
235.354 203.959 236.409 205.256 236.41 208.491 cv
cp
f
240.091 202.677 mo
240.064 202.693 li
238.535 204.529 li
238.306 203.615 li
240.227 201.318 li
241.241 200.732 li
241.241 210.889 li
240.091 211.552 li
240.091 202.677 li
cp
f
247.034 198.669 mo
247.008 198.684 li
245.479 200.521 li
245.249 199.607 li
247.17 197.31 li
248.185 196.724 li
248.185 206.88 li
247.034 207.544 li
247.034 198.669 li
cp
f
252.462 199.379 mo
252.463 202.02 253.167 203.113 254.249 202.488 cv
255.467 201.785 256.049 199.808 256.049 197.215 cv
256.049 194.715 255.494 193.395 254.262 194.106 cv
253.22 194.707 252.462 196.614 252.462 199.379 cv
cp
257.24 196.465 mo
257.24 199.918 256.13 202.465 254.181 203.59 cv
252.463 204.583 251.299 203.395 251.272 200.051 cv
251.272 196.644 252.544 194.035 254.33 193.004 cv
256.184 191.933 257.24 193.23 257.24 196.465 cv
cp
f
260.922 190.651 mo
260.895 190.667 li
259.365 192.503 li
259.135 191.589 li
261.057 189.292 li
262.072 188.706 li
262.072 198.863 li
260.922 199.526 li
260.922 190.651 li
cp
f
87.3413 309.62 mo
87.3145 309.635 li
85.7852 311.471 li
85.5554 310.557 li
87.4771 308.26 li
88.4915 307.674 li
88.4917 317.831 li
87.3413 318.495 li
87.3413 309.62 li
cp
f
92.7688 310.33 mo
92.7688 312.971 93.4729 314.065 94.5554 313.44 cv
95.7734 312.736 96.3552 310.76 96.3552 308.166 cv
96.3552 305.666 95.8003 304.345 94.5686 305.056 cv
93.5266 305.658 92.7688 307.565 92.7688 310.33 cv
cp
97.5457 307.416 mo
97.5459 310.869 96.4365 313.415 94.4875 314.541 cv
92.7688 315.533 91.6052 314.346 91.5781 311.002 cv
91.5781 307.596 92.8501 304.986 94.6365 303.955 cv
96.4902 302.885 97.5457 304.182 97.5457 307.416 cv
cp
f
101.228 301.603 mo
101.201 301.618 li
99.6716 303.454 li
99.4419 302.54 li
101.363 300.243 li
102.378 299.657 li
102.378 309.814 li
101.228 310.478 li
101.228 301.603 li
cp
f
106.655 302.313 mo
106.655 304.953 107.359 306.047 108.442 305.422 cv
109.66 304.719 110.241 302.742 110.241 300.149 cv
110.241 297.649 109.687 296.328 108.455 297.039 cv
107.413 297.641 106.655 299.548 106.655 302.313 cv
cp
111.432 299.399 mo
111.432 302.852 110.323 305.398 108.374 306.524 cv
106.655 307.516 105.491 306.329 105.465 302.984 cv
105.465 299.579 106.736 296.97 108.523 295.938 cv
110.376 294.868 111.432 296.164 111.432 299.399 cv
cp
f
113.598 298.304 mo
113.598 300.945 114.302 302.039 115.385 301.414 cv
116.603 300.711 117.185 298.734 117.185 296.14 cv
117.185 293.64 116.63 292.32 115.398 293.031 cv
114.356 293.632 113.598 295.539 113.598 298.304 cv
cp
118.375 295.39 mo
118.375 298.843 117.266 301.39 115.317 302.515 cv
113.598 303.507 112.435 302.32 112.408 298.976 cv
112.408 295.57 113.679 292.961 115.466 291.929 cv
117.32 290.859 118.375 292.156 118.375 295.39 cv
cp
f
122.057 289.577 mo
122.03 289.593 li
120.501 291.428 li
120.271 290.514 li
122.193 288.217 li
123.207 287.632 li
123.208 297.788 li
122.057 298.452 li
122.057 289.577 li
cp
f
127.485 290.287 mo
127.485 292.928 128.189 294.022 129.271 293.397 cv
130.489 292.694 131.071 290.717 131.071 288.123 cv
131.071 285.623 130.516 284.303 129.284 285.014 cv
128.242 285.615 127.485 287.522 127.485 290.287 cv
cp
132.261 287.373 mo
132.261 290.826 131.152 293.373 129.203 294.498 cv
127.485 295.49 126.321 294.303 126.294 290.959 cv
126.294 287.553 127.566 284.944 129.352 283.912 cv
131.206 282.842 132.261 284.139 132.261 287.373 cv
cp
f
135.943 281.56 mo
135.917 281.576 li
134.387 283.411 li
134.158 282.497 li
136.079 280.2 li
137.094 279.614 li
137.094 289.771 li
135.944 290.435 li
135.943 281.56 li
cp
f
141.371 282.27 mo
141.371 284.911 142.075 286.005 143.157 285.38 cv
144.376 284.676 144.957 282.7 144.957 280.106 cv
144.957 277.606 144.402 276.285 143.171 276.996 cv
142.129 277.598 141.371 279.505 141.371 282.27 cv
cp
146.148 279.356 mo
146.148 282.809 145.039 285.356 143.089 286.481 cv
141.371 287.473 140.207 286.286 140.18 282.942 cv
140.18 279.536 141.452 276.927 143.239 275.895 cv
145.092 274.825 146.148 276.122 146.148 279.356 cv
cp
f
149.83 273.543 mo
149.804 273.558 li
148.274 275.394 li
148.045 274.48 li
149.966 272.183 li
150.981 271.597 li
150.981 281.754 li
149.831 282.418 li
149.83 273.543 li
cp
f
155.258 274.252 mo
155.258 276.893 155.962 277.987 157.044 277.362 cv
158.262 276.659 158.844 274.683 158.844 272.089 cv
158.844 269.589 158.29 268.268 157.058 268.979 cv
156.016 269.581 155.258 271.488 155.258 274.252 cv
cp
160.035 271.339 mo
160.035 274.792 158.926 277.338 156.977 278.464 cv
155.258 279.456 154.094 278.269 154.067 274.924 cv
154.067 271.519 155.339 268.909 157.125 267.878 cv
158.979 266.808 160.035 268.104 160.035 271.339 cv
cp
f
163.717 265.526 mo
163.69 265.541 li
162.161 267.377 li
161.931 266.463 li
163.852 264.165 li
164.867 263.58 li
164.867 273.737 li
163.717 274.401 li
163.717 265.526 li
cp
f
169.144 266.236 mo
169.144 268.876 169.848 269.97 170.931 269.345 cv
172.149 268.642 172.731 266.665 172.731 264.072 cv
172.73 261.571 172.176 260.251 170.944 260.962 cv
169.902 261.564 169.144 263.471 169.144 266.236 cv
cp
173.921 263.322 mo
173.921 266.775 172.812 269.321 170.863 270.447 cv
169.144 271.439 167.98 270.252 167.954 266.907 cv
167.954 263.502 169.226 260.892 171.012 259.861 cv
172.866 258.79 173.921 260.087 173.921 263.322 cv
cp
f
177.603 257.509 mo
177.576 257.524 li
176.047 259.359 li
175.817 258.446 li
177.739 256.149 li
178.753 255.563 li
178.753 265.72 li
177.603 266.384 li
177.603 257.509 li
cp
f
183.031 258.218 mo
183.031 260.859 183.735 261.953 184.817 261.328 cv
186.035 260.625 186.617 258.648 186.617 256.055 cv
186.617 253.554 186.062 252.234 184.831 252.945 cv
183.788 253.547 183.031 255.454 183.031 258.218 cv
cp
187.808 255.305 mo
187.808 258.758 186.698 261.304 184.749 262.43 cv
183.031 263.422 181.867 262.235 181.84 258.89 cv
181.84 255.484 183.112 252.875 184.898 251.844 cv
186.752 250.774 187.808 252.07 187.808 255.305 cv
cp
f
191.49 249.491 mo
191.462 249.507 li
189.933 251.343 li
189.704 250.429 li
191.625 248.132 li
192.639 247.546 li
192.64 257.703 li
191.49 258.367 li
191.49 249.491 li
cp
f
196.917 250.201 mo
196.917 252.842 197.621 253.936 198.704 253.311 cv
199.922 252.608 200.503 250.631 200.503 248.038 cv
200.503 245.537 199.948 244.217 198.717 244.928 cv
197.675 245.529 196.917 247.436 196.917 250.201 cv
cp
201.694 247.288 mo
201.694 250.741 200.585 253.287 198.635 254.412 cv
196.917 255.405 195.753 254.218 195.726 250.873 cv
195.726 247.468 196.998 244.858 198.785 243.827 cv
200.638 242.756 201.694 244.053 201.694 247.288 cv
cp
f
205.375 241.475 mo
205.349 241.49 li
203.82 243.326 li
203.59 242.412 li
205.511 240.114 li
206.526 239.529 li
206.526 249.686 li
205.376 250.35 li
205.375 241.475 li
cp
f
210.803 242.185 mo
210.803 244.825 211.508 245.919 212.59 245.294 cv
213.808 244.591 214.39 242.614 214.39 240.021 cv
214.39 237.52 213.835 236.2 212.603 236.911 cv
211.561 237.513 210.803 239.419 210.803 242.185 cv
cp
215.58 239.27 mo
215.58 242.723 214.471 245.27 212.522 246.395 cv
210.803 247.388 209.64 246.201 209.613 242.856 cv
209.613 239.451 210.884 236.841 212.671 235.81 cv
214.524 234.739 215.58 236.036 215.58 239.27 cv
cp
f
219.262 233.457 mo
219.235 233.473 li
217.706 235.308 li
217.476 234.394 li
219.397 232.098 li
220.412 231.512 li
220.412 241.668 li
219.262 242.333 li
219.262 233.457 li
cp
f
224.69 234.167 mo
224.69 236.808 225.394 237.902 226.476 237.277 cv
227.694 236.574 228.276 234.597 228.276 232.004 cv
228.276 229.503 227.721 228.183 226.489 228.894 cv
225.447 229.495 224.69 231.403 224.69 234.167 cv
cp
229.466 231.254 mo
229.466 234.707 228.357 237.253 226.408 238.378 cv
224.69 239.37 223.526 238.183 223.499 234.839 cv
223.499 231.433 224.771 228.824 226.557 227.793 cv
228.411 226.722 229.466 228.019 229.466 231.254 cv
cp
f
233.148 225.44 mo
233.121 225.456 li
231.593 227.292 li
231.362 226.378 li
233.284 224.08 li
234.299 223.495 li
234.299 233.652 li
233.148 234.315 li
233.148 225.44 li
cp
f
238.576 226.15 mo
238.576 228.791 239.28 229.885 240.362 229.26 cv
241.581 228.557 242.162 226.58 242.162 223.987 cv
242.162 221.486 241.607 220.166 240.376 220.877 cv
239.333 221.478 238.576 223.385 238.576 226.15 cv
cp
243.353 223.236 mo
243.353 226.69 242.244 229.236 240.295 230.361 cv
238.576 231.354 237.412 230.167 237.385 226.822 cv
237.385 223.417 238.657 220.807 240.444 219.776 cv
242.297 218.705 243.353 220.002 243.353 223.236 cv
cp
f
245.519 222.142 mo
245.519 224.783 246.223 225.876 247.306 225.252 cv
248.524 224.548 249.105 222.571 249.105 219.978 cv
249.105 217.478 248.55 216.157 247.319 216.868 cv
246.277 217.47 245.519 219.377 245.519 222.142 cv
cp
250.296 219.228 mo
250.296 222.681 249.187 225.228 247.238 226.353 cv
245.519 227.345 244.355 226.158 244.329 222.813 cv
244.328 219.408 245.6 216.799 247.387 215.767 cv
249.24 214.697 250.296 215.994 250.296 219.228 cv
cp
f
252.463 218.133 mo
252.463 220.774 253.167 221.868 254.25 221.243 cv
255.468 220.539 256.049 218.563 256.049 215.969 cv
256.049 213.469 255.494 212.148 254.263 212.859 cv
253.221 213.461 252.463 215.368 252.463 218.133 cv
cp
257.24 215.219 mo
257.24 218.672 256.131 221.219 254.181 222.344 cv
252.463 223.336 251.299 222.149 251.272 218.805 cv
251.272 215.399 252.544 212.789 254.331 211.758 cv
256.184 210.688 257.24 211.985 257.24 215.219 cv
cp
f
260.922 209.406 mo
260.895 209.422 li
259.366 211.257 li
259.136 210.343 li
261.058 208.046 li
262.072 207.46 li
262.072 217.617 li
260.922 218.281 li
260.922 209.406 li
cp
f
284.448 168.087 mo
245.614 145.518 li
244.665 144.967 243.351 145.046 241.899 145.884 cv
280.734 168.452 li
282.186 167.614 283.5 167.536 284.448 168.087 cv
cp
.996078 .262745 .25098 rgb
f
gsave
284.448 168.087 mo
245.614 145.518 li
244.665 144.967 243.351 145.046 241.899 145.884 cv
280.734 168.452 li
282.186 167.614 283.5 167.536 284.448 168.087 cv
cp
clp
284.448 168.087 mo
245.614 145.518 li
244.68 144.976 243.394 145.043 241.969 145.844 cv
280.804 168.412 li
282.228 167.612 283.515 167.544 284.448 168.087 cv
cp
f
280.804 168.412 mo
241.969 145.844 li
241.899 145.884 li
280.734 168.452 li
280.804 168.412 li
cp
f
grestore
135.196 321.805 mo
174.03 344.373 li
166.803 340.173 162.304 331.27 162.269 318.653 cv
123.434 296.084 li
123.47 308.702 127.968 317.605 135.196 321.805 cv
cp
.898039 .196078 .168627 rgb
f
gsave
135.196 321.805 mo
174.03 344.373 li
166.803 340.173 162.304 331.27 162.269 318.653 cv
123.434 296.084 li
123.47 308.702 127.968 317.605 135.196 321.805 cv
cp
clp
162.269 318.653 mo
123.434 296.084 li
123.47 308.702 127.968 317.605 135.196 321.805 cv
174.03 344.373 li
166.803 340.173 162.304 331.27 162.269 318.653 cv
cp
f
grestore
162.054 242.978 mo
123.22 220.41 li
123.434 296.084 li
162.269 318.653 li
162.054 242.978 li
cp
f
280.734 168.452 mo
241.899 145.884 li
128.421 211.401 li
167.256 233.969 li
280.734 168.452 li
cp
1 .4 .380392 rgb
f
167.256 233.969 mo
128.421 211.401 li
125.536 213.066 123.21 217.095 123.22 220.41 cv
162.054 242.978 li
162.045 239.663 164.371 235.634 167.256 233.969 cv
cp
.996078 .262745 .25098 rgb
f
gsave
167.256 233.969 mo
128.421 211.401 li
125.536 213.066 123.21 217.095 123.22 220.41 cv
162.054 242.978 li
162.045 239.663 164.371 235.634 167.256 233.969 cv
cp
clp
167.256 233.969 mo
128.421 211.401 li
127.797 211.761 127.2 212.231 126.646 212.781 cv
165.481 235.349 li
166.035 234.8 166.632 234.329 167.256 233.969 cv
cp
f
165.481 235.349 mo
126.646 212.781 li
124.64 214.775 123.212 217.812 123.22 220.41 cv
162.054 242.978 li
162.047 240.38 163.474 237.343 165.481 235.349 cv
cp
f
grestore
167.256 233.969 mo
164.371 235.634 162.045 239.663 162.054 242.978 cv
162.269 318.653 li
162.341 344.052 180.494 354.397 202.599 341.635 cv
246.116 316.51 li
268.221 303.748 286.256 272.51 286.184 247.11 cv
285.969 171.435 li
285.96 168.121 283.619 166.787 280.734 168.452 cv
167.256 233.969 li
cp
f
245.135 167.362 mo
250.007 170.174 257.979 170.174 262.851 167.362 cv
267.722 164.549 267.722 159.946 262.851 157.133 cv
257.979 154.321 250.007 154.321 245.135 157.133 cv
240.264 159.946 240.264 164.549 245.135 167.362 cv
cp
.898039 .196078 .168627 rgb
f
150.062 221.971 mo
154.933 224.784 162.905 224.784 167.777 221.971 cv
172.648 219.158 172.648 214.556 167.777 211.743 cv
162.905 208.93 154.933 208.93 150.062 211.743 cv
145.19 214.556 145.19 219.158 150.062 221.971 cv
cp
f
265.521 113.396 mo
265.339 161.617 li
265.333 163.295 264.232 164.962 262.031 166.237 cv
257.632 168.78 250.523 168.754 246.142 166.177 cv
243.946 164.887 242.857 163.193 242.87 161.51 cv
243.052 113.313 li
243.083 104.903 240.722 98.6912 236.571 96.2742 cv
232.42 93.8574 225.854 94.8687 218.552 99.0497 cv
206.144 106.148 li
186.704 117.275 170.215 145.597 170.131 167.995 cv
169.949 216.217 li
169.943 217.894 168.836 219.567 166.636 220.836 cv
163.817 222.467 159.878 223.041 156.26 222.562 cv
154.243 222.296 152.32 221.701 150.753 220.777 cv
150.159 220.427 149.648 220.054 149.221 219.658 cv
148.048 218.577 147.469 217.345 147.48 216.115 cv
147.656 167.911 li
147.71 153.258 152.627 136.792 161.5 121.559 cv
170.366 106.332 182.26 93.9293 194.981 86.65 cv
207.391 79.5457 li
214.403 75.535 221.385 73.2126 228.137 72.6495 cv
235.302 72.0579 242.129 73.5138 247.878 76.8602 cv
253.627 80.207 258.257 85.4268 261.275 91.9469 cv
264.124 98.1014 265.551 105.316 265.521 113.396 cv
cp
.854902 .854902 .976471 rgb
f
242.771 98.9219 mo
241.506 98.1851 240.014 97.7717 238.348 97.6639 cv
241.384 100.665 243.078 106.196 243.051 113.314 cv
242.87 161.511 li
242.855 163.195 243.946 164.884 246.142 166.177 cv
247.019 166.692 248.008 167.101 249.059 167.412 cv
249.252 115.959 li
249.283 107.549 246.921 101.339 242.771 98.9219 cv
cp
.74902 .745098 .929412 rgb
f
249.386 79.7079 mo
245.464 78.5991 241.258 78.2072 236.925 78.5676 cv
230.167 79.1248 223.191 81.4469 216.173 85.4579 cv
203.764 92.5618 li
191.042 99.8414 179.155 112.244 170.282 127.477 cv
161.409 142.704 156.499 159.17 156.444 173.829 cv
156.26 222.562 li
154.243 222.296 152.32 221.701 150.753 220.777 cv
150.159 220.427 149.648 220.054 149.221 219.658 cv
149.405 170.89 li
149.459 156.231 154.376 139.771 163.242 124.538 cv
172.116 109.305 184.009 96.9078 196.73 89.6282 cv
209.139 82.5245 li
216.151 78.5076 223.135 76.1912 229.886 75.6281 cv
236.956 75.0424 243.689 76.4564 249.386 79.7079 cv
cp
.956863 .956863 .980392 rgb
f
239.083 249.73 mo
239.108 243.277 234.588 240.644 228.987 243.85 cv
223.387 247.055 218.827 254.885 218.803 261.338 cv
218.787 265.59 220.752 268.168 223.691 268.526 cv
223.623 286.894 li
234.053 280.924 li
234.122 262.557 li
237.076 258.825 239.068 253.983 239.083 249.73 cv
cp
.760784 .101961 .0784314 rgb
f
317.142 243.374 mo
319.159 248.241 321.272 253.251 325.043 256.929 cv
326.322 258.176 327.876 259.288 329.656 259.435 cv
332.142 259.639 334.482 257.815 335.469 255.524 cv
336.456 253.234 336.306 250.601 335.714 248.178 cv
334.942 245.017 333.378 241.957 330.835 239.927 cv
328.293 237.897 324.679 237.06 321.674 238.308 cv
320.94 238.613 320.254 239.031 319.503 239.291 cv
318.751 239.551 317.891 239.636 317.183 239.275 cv
317.142 243.374 li
cp
.0980392 .0705882 .105882 rgb
f
331.566 269.886 mo
332.621 266.119 333.246 263.685 334.489 257.569 cv
334.823 255.922 334.917 254.199 334.733 252.52 cv
334.546 250.825 333.85 249.465 332.887 248.042 cv
332.451 247.397 331.873 246.721 331.092 246.665 cv
330.381 246.614 329.763 247.103 329.27 247.6 cv
326.297 250.593 325.007 255.076 324.746 259.198 cv
324.504 263.033 323.882 264.602 323.671 268.453 cv
323.631 269.185 323.542 269.968 323.649 270.7 cv
324.161 274.183 324.809 273.705 326.975 272.333 cv
328.036 271.661 330.992 271.933 331.566 269.886 cv
cp
f
314.002 287.204 mo
315.384 287.363 316.855 286.292 317.973 285.384 cv
320.667 283.199 330.588 274.243 331.682 269.239 cv
331.957 267.975 330.588 267.45 329.534 266.564 cv
328.738 265.894 324.356 267.208 323.534 268.2 cv
322.245 269.757 315.73 277.314 312.283 282.387 cv
311.828 283.057 311.383 283.791 311.357 284.539 cv
311.315 285.737 312.93 287.081 314.002 287.204 cv
cp
.956863 .956863 .980392 rgb
f
354.817 328.217 mo
354.847 328.516 354.548 329.025 354.453 329.3 cv
354.263 329.844 354.008 330.398 353.851 330.945 cv
353.186 333.26 352.827 335.447 352.709 337.875 cv
352.644 339.21 352.204 340.71 353.114 341.868 cv
354.002 342.996 355.931 343.648 357.333 343.311 cv
358.831 342.951 359.305 341.266 359.645 339.966 cv
360.122 338.143 360.356 336.195 360.636 334.322 cv
360.814 333.135 360.932 331.913 360.67 330.742 cv
360.524 330.091 360.25 329.46 359.841 328.93 cv
359.627 328.654 359.378 328.405 359.093 328.203 cv
358.813 328.004 358.557 327.936 358.351 327.652 cv
357.964 327.116 357.645 326.443 357.095 326.04 cv
356.625 325.696 355.858 325.841 355.399 326.148 cv
354.886 326.491 354.563 327.068 354.432 327.67 cv
354.465 327.855 354.764 327.988 354.809 328.171 cv
354.817 328.217 li
cp
.0980392 .0705882 .105882 rgb
f
343.409 325.389 mo
342.844 325.722 342.327 326.129 341.769 326.474 cv
341.219 326.814 340.649 327.072 340.104 327.426 cv
338.906 328.204 337.67 328.925 336.404 329.584 cv
335.444 330.083 334.464 330.549 333.562 331.147 cv
332.859 331.612 332.201 332.164 331.686 332.836 cv
331.401 333.207 331.285 333.42 331.366 333.889 cv
331.437 334.306 331.627 334.696 331.821 335.067 cv
332.191 335.772 332.631 336.493 333.334 336.866 cv
334.01 337.227 334.835 337.204 335.575 337.007 cv
336.688 336.711 337.915 336.043 338.734 335.233 cv
339.611 334.368 340.588 333.699 341.792 333.374 cv
342.75 333.116 343.784 333.073 344.649 332.59 cv
345.415 332.162 345.96 331.384 346.156 330.534 cv
346.386 329.542 346.083 328.49 346.253 327.48 cv
346.363 326.832 345.027 326.209 344.929 325.539 cv
344.845 324.968 345.798 324.454 345.26 324.343 cv
344.66 324.22 344.026 324.392 343.51 324.72 cv
343.409 325.389 li
cp
f
344.503 301.798 mo
334.801 304.426 li
334.502 305.988 334.834 307.472 335 308.671 cv
335.566 312.774 337.787 326.757 338.685 328.794 cv
339.135 329.816 339.689 330.201 340.868 330.392 cv
341.955 330.569 343.097 330.449 344.135 330.108 cv
345.128 329.782 346.242 329.277 346.737 328.313 cv
347.458 326.911 344.527 302.193 344.503 301.798 cv
cp
f
338.194 288.191 mo
337.707 290.419 334.298 303.593 334.801 306.103 cv
335.421 309.201 342.965 309.178 343.253 307.069 cv
344.146 300.526 353.232 287.961 354.313 281.794 cv
355.424 275.461 345.858 268.664 344.007 267.667 cv
342.822 273.832 340.399 278.107 338.194 288.191 cv
cp
f
349.836 310.336 mo
350.39 314.772 351.564 328.866 352.482 331.065 cv
352.942 332.168 353.516 332.581 354.742 332.782 cv
355.874 332.968 357.064 332.832 358.149 332.458 cv
359.187 332.1 360.462 331.599 360.877 330.504 cv
361.065 330.009 360.955 317.241 360.698 313.571 cv
360.548 311.42 359.388 303.747 358.921 303.074 cv
358.023 301.783 358.529 296.425 358.529 296.425 cv
358.529 296.425 352.025 299.337 350.823 300.524 cv
347.84 303.467 349.557 308.102 349.836 310.336 cv
cp
f
343.617 277.439 mo
343.268 277.71 342.806 276.23 342.413 277.242 cv
342.223 277.731 342.677 278.034 342.862 278.406 cv
343.149 278.986 343.19 279.755 343.367 280.378 cv
343.776 281.822 345.053 282.752 346.117 283.722 cv
347.746 285.208 349.409 286.894 350.554 288.789 cv
351.937 291.077 351.139 293.654 350.758 296.157 cv
350.315 299.067 349.459 301.418 349.125 304.343 cv
349.094 304.623 357.264 311.114 357.709 310.157 cv
358.538 308.375 359.363 306.665 360.051 304.818 cv
361.53 300.854 363.61 292.899 364.459 288.736 cv
365.188 285.155 366.016 280.518 364.574 277.052 cv
363.726 275.012 362.162 272.411 360.287 271.121 cv
359.313 270.45 358.23 269.815 357.197 269.216 cv
357.05 269.13 355.148 268.228 355.154 268.158 cv
354.623 274.412 348.426 273.693 343.617 277.439 cv
cp
f
356.234 264.225 mo
354.964 261.904 354.22 259.248 352.978 256.911 cv
351.802 254.699 350.473 252.259 348.781 250.406 cv
346.447 247.85 343.422 245.321 339.944 244.474 cv
337.19 243.803 334.377 243.625 331.986 245.301 cv
330.814 246.121 329.322 247.296 328.687 248.543 cv
327.974 249.94 327.981 251.493 327.894 252.941 cv
327.766 255.042 327.817 256.857 328.477 258.783 cv
329.514 261.806 331.587 264.279 333.259 266.954 cv
334.926 269.62 336.287 272.325 337.505 275.245 cv
337.975 276.371 338.513 277.514 338.841 278.689 cv
339.193 279.954 339.062 281.599 339.763 282.734 cv
340.78 284.381 343.177 284.332 344.847 284.272 cv
347.231 284.186 349.627 283.893 351.857 283.003 cv
353.959 282.165 355.707 281.225 357.459 279.72 cv
364.307 273.839 360.539 271.358 359.753 269.689 cv
358.957 267.995 356.381 264.493 356.234 264.225 cv
cp
.14902 .12549 .156863 rgb
f
334.816 247.485 mo
334.446 248.414 333.852 249.267 333.17 250.01 cv
332.433 250.818 331.119 252.373 329.894 251.751 cv
329.516 251.563 329.167 251.309 328.847 251.017 cv
327.232 249.528 326.423 246.888 327.262 244.901 cv
327.631 244.012 328.328 243.243 329.02 242.58 cv
329.602 242.005 330.232 240.914 331.171 241.032 cv
331.687 241.093 332.007 241.412 332.244 241.794 cv
332.368 241.999 332.48 242.203 332.59 242.42 cv
332.985 243.181 333.858 243.616 334.5 244.174 cv
334.744 244.383 335.056 244.556 335.245 244.816 cv
335.798 245.61 335.141 246.713 334.816 247.485 cv
cp
f
332.681 234.688 mo
318.251 233.852 li
317.678 234.794 317.261 235.829 317.081 236.907 cv
316.903 237.97 316.824 239.056 316.905 240.133 cv
317.014 241.58 317.715 242.851 318.467 244.058 cv
318.913 244.773 319.476 245.449 319.73 246.264 cv
319.976 247.052 319.842 247.891 320.387 248.579 cv
320.615 248.867 320.961 249.021 321.256 249.225 cv
321.716 249.544 322.047 249.999 322.489 250.332 cv
322.949 250.679 323.274 251.164 323.788 251.45 cv
324.323 251.749 324.828 252.117 325.405 252.338 cv
326.327 252.69 327.277 252.505 328.091 251.979 cv
328.589 251.656 328.725 251.585 329.141 252.095 cv
329.438 252.458 329.629 252.903 329.765 253.349 cv
329.985 254.066 330.092 254.824 330.415 255.501 cv
330.465 255.606 330.549 255.724 330.664 255.708 cv
330.85 255.526 li
331.705 253.872 332.512 252.179 332.993 250.381 cv
333.58 248.182 333.663 245.885 333.744 243.611 cv
333.777 242.656 333.811 241.701 333.845 240.747 cv
333.86 240.324 333.929 239.863 333.887 239.443 cv
333.847 239.034 333.617 238.69 333.521 238.298 cv
333.224 237.081 333.131 235.858 332.681 234.688 cv
cp
.976471 .835294 .764706 rgb
f
323.758 241.594 mo
323.862 241.63 323.966 241.668 324.071 241.707 cv
324.699 241.943 325.264 242.329 325.756 242.782 cv
326.569 243.529 327.115 244.362 327.626 245.31 cv
328.18 246.338 328.825 247.248 329.195 248.374 cv
329.649 249.756 329.757 251.213 329.962 252.645 cv
330.155 254.001 330.531 255.214 329.897 256.531 cv
329.839 256.653 329.781 256.818 329.882 256.908 cv
329.977 256.992 330.125 256.93 330.232 256.863 cv
332.159 255.681 333.675 253.972 335.152 252.288 cv
336.685 250.541 338.232 249.009 340.069 247.59 cv
340.465 247.284 340.958 247.018 341.28 246.623 cv
341.597 246.235 341.733 245.65 341.459 245.23 cv
341.297 244.983 341.026 244.834 340.775 244.679 cv
338.757 243.429 337.536 241.235 336.578 239.064 cv
336.091 237.961 335.648 236.84 335.125 235.754 cv
334.6 234.664 333.908 233.751 333.267 232.74 cv
332.841 232.068 332.086 231.616 331.399 231.221 cv
330.635 230.783 329.818 230.438 328.972 230.194 cv
327.297 229.711 325.504 229.622 323.796 229.982 cv
323.147 230.119 322.512 230.32 321.902 230.578 cv
321.169 230.888 320.471 231.28 319.823 231.742 cv
319.208 232.18 318.768 232.68 318.336 233.311 cv
317.475 234.571 316.878 236.011 316.604 237.513 cv
316.367 238.813 316.374 240.156 316.614 241.455 cv
316.717 242.011 317.022 244.296 318.028 243.848 cv
318.281 243.735 318.448 243.494 318.633 243.287 cv
319.225 242.623 320.067 242.249 320.884 241.894 cv
321.328 241.701 321.777 241.507 322.254 241.419 cv
322.786 241.32 323.27 241.428 323.758 241.594 cv
cp
.14902 .12549 .156863 rgb
f
285.574 232.587 mo
283.607 230.191 li
286.543 227.781 289.871 225.051 291.524 221.506 cv
292.935 218.48 292.931 214.088 290.145 211.904 cv
288.898 210.927 287.242 210.487 285.489 210.022 cv
284.562 209.776 283.602 209.521 282.664 209.176 cv
277.373 207.227 273.447 202.443 272.66 196.988 cv
271.86 191.433 274.574 185.546 279.262 182.672 cv
284.111 179.701 290.719 180.165 294.973 183.777 cv
292.967 186.14 li
289.756 183.415 284.562 183.061 280.882 185.316 cv
277.219 187.562 275.1 192.179 275.729 196.546 cv
276.346 200.823 279.563 204.73 283.736 206.266 cv
284.538 206.562 285.386 206.787 286.284 207.025 cv
288.263 207.55 290.309 208.093 292.057 209.464 cv
296.146 212.668 296.297 218.606 294.334 222.816 cv
292.383 227.001 288.766 229.969 285.574 232.587 cv
cp
.0980392 .0705882 .105882 rgb
f
296 280.057 mo
300.775 226.525 li
300.937 224.716 299.899 222.802 297.63 221.216 cv
293.106 218.057 285.421 217.393 280.454 219.733 cv
277.994 220.893 276.667 222.574 276.508 224.36 cv
271.54 280.057 li
296 280.057 li
cp
.14902 .12549 .156863 rgb
f
339.291 293.2 mo
339.291 262.198 314.158 237.064 283.155 237.064 cv
252.151 237.064 227.018 262.198 227.018 293.2 cv
227.018 324.204 252.151 349.336 283.155 349.336 cv
314.158 349.336 339.291 324.204 339.291 293.2 cv
cp
.207843 .207843 .247059 rgb
f
258.264 279.062 mo
256.909 278.219 255.68 277.335 254.575 276.416 cv
248.275 283.844 246.182 287.167 243.445 292.8 cv
244.188 283.439 245.431 278.882 249.492 270.638 cv
248.88 269.616 248.391 268.576 248.027 267.525 cv
245.375 272.343 239.859 282.368 241.21 297.601 cv
242.076 298.773 243.08 299.919 244.22 301.032 cv
246.137 295.917 248.654 290.388 258.264 279.062 cv
cp
.956863 .956863 .980392 rgb
f
264.283 282.148 mo
262.879 281.558 261.525 280.911 260.231 280.206 cv
256.149 289.216 253.614 298.73 253.279 307.566 cv
254.89 308.443 256.576 309.25 258.325 309.984 cv
258.615 301.127 260.788 291.439 264.283 282.148 cv
cp
f
276.703 285.692 mo
273.809 285.195 270.991 284.511 268.307 283.64 cv
265.395 293.147 263.583 302.968 263.337 311.842 cv
265.191 312.443 267.096 312.973 269.041 313.432 cv
269.112 310.177 269.345 306.782 269.723 303.31 cv
271.219 303.663 272.739 303.972 274.277 304.236 cv
275.569 307.38 276.904 310.631 279.272 315.151 cv
281.463 315.379 283.675 315.525 285.893 315.587 cv
285.894 315.337 li
283.307 310.731 282.164 308.655 279.822 303.48 cv
287.392 300.725 286.644 289.899 280.339 286.803 cv
278.861 286.077 277.349 285.807 276.703 285.692 cv
cp
270.326 298.523 mo
270.741 295.629 271.246 292.704 271.833 289.781 cv
273.172 290.097 274.532 290.373 275.909 290.609 cv
281.28 291.621 279.887 297.569 278.025 298.882 cv
276.815 299.736 275.342 299.512 274.788 299.428 cv
273.281 299.17 271.792 298.868 270.326 298.523 cv
cp
f
307.029 284.097 mo
305.509 284.545 303.951 284.935 302.365 285.267 cv
303.71 291.753 304.708 298.338 305.264 304.639 cv
305.551 311.821 298.218 311.279 296.504 309.697 cv
295.307 308.592 295.213 306.712 295.174 305.909 cv
294.955 299.609 294.559 292.997 294.023 286.455 cv
292.375 286.585 290.716 286.658 289.056 286.673 cv
289.117 293.3 289.158 299.993 289.174 306.356 cv
289.599 317.592 303.153 316.946 308.289 311.402 cv
311.378 308.067 311.015 304.404 310.878 303.024 cv
310.129 296.832 308.804 290.402 307.029 284.097 cv
cp
f
317.562 279.153 mo
309.996 283.758 311.304 294.269 317.879 295.76 cv
319.631 296.157 321.49 295.953 322.737 295.765 cv
325.613 295.331 326.342 295.493 326.888 296.019 cv
327.844 296.941 328.34 300.37 324.924 302.549 cv
321.935 304.456 320.105 303.794 319.485 300.583 cv
317.823 301.357 316.094 302.06 314.313 302.692 cv
315.609 311.608 324.806 308.855 328.772 303.731 cv
331.748 299.888 334.054 288.758 324.145 290.065 cv
313.21 291.506 317.949 284.927 318.002 284.86 cv
318.04 284.811 321.955 280.333 324.105 285.53 cv
325.314 284.651 326.413 283.737 327.401 282.795 cv
325.287 278.205 321.517 276.81 317.562 279.153 cv
cp
f
241.251 385.423 mo
242.166 383.372 244.644 383.788 246.533 383.648 cv
248.894 383.475 251.255 383.3 253.616 383.127 cv
254.42 383.067 255.237 383.009 256.022 383.189 cv
258.178 383.68 259.693 385.767 258.805 387.971 cv
258.481 388.776 257.744 389.358 256.949 389.731 cv
255.757 390.29 254.186 390.611 252.869 390.514 cv
251.458 390.411 250.108 390.55 248.812 391.151 cv
246.589 392.183 244.005 393.668 241.761 391.655 cv
241.161 391.118 240.867 390.312 240.798 389.517 cv
240.699 388.381 240.691 386.677 241.251 385.423 cv
cp
.0980392 .0705882 .105882 rgb
f
216.497 377.424 mo
217.017 376.423 217.772 375.501 218.462 374.786 cv
219.342 373.873 220.245 373.013 221.455 372.644 cv
222.704 372.263 223.976 371.842 225.156 371.305 cv
226.363 370.755 227.754 370.497 229.052 370.86 cv
230.604 371.294 231.912 372.773 231.798 374.38 cv
231.717 375.526 230.964 376.53 230.061 377.24 cv
229.157 377.95 228.098 378.427 227.103 379 cv
225.885 379.701 224.751 380.552 223.742 381.53 cv
222.785 382.457 221.333 382.918 220.014 383.046 cv
218.708 383.172 217.272 382.77 216.497 381.712 cv
215.505 380.357 215.774 378.814 216.497 377.424 cv
cp
f
242.639 326.06 mo
242.357 325.484 241.669 325.211 241.055 324.961 cv
238.355 323.859 235.85 322.193 233.231 320.941 cv
232.054 320.379 230.853 319.905 229.603 319.599 cv
227.393 316.659 li
227.879 317.358 225.687 321.594 225.246 323.655 cv
224.304 328.062 223.125 335.606 222.724 340.081 cv
222.294 344.87 221.604 349.635 220.658 354.349 cv
219.729 358.975 218.347 363.47 217.296 368.063 cv
216.845 370.035 216.465 372.023 216.157 374.022 cv
215.91 375.624 215.474 377.47 216.496 378.901 cv
217.335 380.075 218.963 380.567 220.323 380.786 cv
221.42 380.963 222.625 380.794 223.479 380.082 cv
224.243 379.446 224.629 378.475 224.968 377.541 cv
226.373 373.664 227.465 369.674 228.233 365.623 cv
228.612 363.622 228.833 361.65 229.441 359.71 cv
230.049 357.773 230.707 355.851 231.404 353.944 cv
234.643 345.071 238.691 336.527 242.446 327.868 cv
242.695 327.295 242.92 326.633 242.639 326.06 cv
cp
f
245.227 323.279 mo
243.313 323.036 241.375 323.065 239.45 323.094 cv
236.961 323.133 234.471 323.172 231.981 323.21 cv
231.099 323.224 230.445 322.673 229.667 322.37 cv
228.929 322.083 228.472 321.815 227.872 321.256 cv
227.424 320.838 226.836 320.449 226.24 320.591 cv
225.595 320.744 225.248 321.438 225.062 322.074 cv
223.617 327.021 226.744 332.033 230.502 335.037 cv
231.604 335.918 232.847 336.527 233.979 337.348 cv
235.263 338.279 236.544 339.224 237.698 340.315 cv
238.589 341.158 239.304 342.281 240.02 343.279 cv
240.626 344.125 241.22 344.984 241.767 345.871 cv
243.286 348.337 244.634 350.919 245.783 353.579 cv
247.103 356.631 247.947 361.605 251.363 363.023 cv
253.818 364.043 256.955 363.126 258.239 360.737 cv
260.01 357.439 258.341 352.661 257.484 349.295 cv
256.46 345.273 255.118 341.341 253.716 337.437 cv
252.299 333.489 250.838 329.559 249.346 325.639 cv
249.119 325.043 249.027 324.414 248.516 324.033 cv
247.831 323.521 246.368 323.439 245.542 323.321 cv
245.437 323.306 245.332 323.292 245.227 323.279 cv
cp
f
246.106 296.972 mo
245.664 294.762 245.038 292.422 242.814 291.46 cv
240.577 290.491 238.302 289.667 235.933 289.082 cv
231.558 288.004 225.545 287.596 222.684 288.335 cv
222.173 288.467 221.845 288.98 221.502 289.38 cv
218.142 293.309 221.298 299.958 222.124 304.256 cv
222.912 308.365 223.501 312.513 223.889 316.679 cv
224.084 318.773 224.33 320.917 224.323 323.022 cv
224.313 325.584 223.636 328.313 225.828 330.273 cv
227.239 331.533 229.229 331.882 231.114 332.05 cv
234.621 332.362 238.217 332.2 241.623 331.258 cv
244.536 330.453 248.308 329.114 249.272 325.948 cv
249.709 324.512 249.259 323.39 249.009 321.996 cv
248.633 319.894 248.257 317.792 247.88 315.69 cv
247.548 313.836 247.065 311.956 247.076 310.082 cv
247.097 306.344 247.226 302.292 246.435 298.623 cv
246.321 298.099 246.22 297.54 246.106 296.972 cv
cp
.14902 .12549 .156863 rgb
f
238.692 270.556 mo
239.321 271.145 239.84 271.833 240.077 272.685 cv
240.607 274.581 240.059 276.663 240.719 278.529 cv
241.359 280.336 241.065 284.654 237.475 286.19 cv
235.658 286.967 231.864 286.781 230.599 286.362 cv
228.902 285.802 227.656 284.401 226.526 283.036 cv
217.266 271.835 232.647 264.884 238.692 270.556 cv
cp
.976471 .835294 .764706 rgb
f
222.634 270.091 mo
222.854 269.758 223.086 269.438 223.302 269.136 cv
225.465 266.097 228.94 265.02 232.536 265.088 cv
233.344 265.103 234.157 265.16 234.933 265.382 cv
235.816 265.634 236.626 266.093 237.372 266.621 cv
239.008 267.777 242.159 270.766 239.853 272.623 cv
238.876 273.411 238.23 274.247 238.125 275.559 cv
238.034 276.711 238.536 278.072 239.698 278.499 cv
239.979 278.603 240.286 278.647 240.536 278.81 cv
240.954 279.081 241.114 279.612 241.18 280.105 cv
241.442 282.058 240.62 284.57 238.768 285.482 cv
236.976 286.363 236.632 288.955 237.471 290.651 cv
237.713 291.14 238.055 291.617 238.051 292.163 cv
238.045 292.889 237.394 293.481 236.691 293.665 cv
235.979 293.853 235.356 293.638 234.653 293.612 cv
234.111 293.593 233.573 293.803 233.01 293.818 cv
231.677 293.855 230.376 293.446 229.108 293.032 cv
228.09 292.7 227.02 292.326 226.337 291.501 cv
225.264 290.205 225.518 288.319 225.384 286.641 cv
225.252 284.992 224.688 283.417 223.979 281.933 cv
223.61 281.162 223.18 280.427 222.783 279.671 cv
222.487 279.106 222.454 278.546 222.293 277.931 cv
221.771 275.936 221.221 273.717 221.832 271.679 cv
221.995 271.135 222.299 270.599 222.634 270.091 cv
cp
.14902 .12549 .156863 rgb
f
249.019 384.544 mo
248.87 384.834 248.722 385.124 248.575 385.413 cv
248.253 386.046 247.906 386.71 247.309 387.095 cv
246.608 387.548 245.706 387.524 244.881 387.402 cv
244.194 387.3 243.49 387.129 242.948 386.697 cv
242.198 386.099 241.878 385.087 241.894 384.128 cv
241.911 383.076 242.264 382.021 242.398 380.99 cv
242.572 379.65 242.931 378.313 243.211 376.99 cv
243.787 374.27 244.377 371.553 244.958 368.834 cv
245.765 365.05 246.993 361.479 247.692 357.683 cv
247.923 356.428 248.176 355.125 249.061 354.078 cv
250.275 352.64 252.648 351.933 254.737 352.346 cv
256.827 352.76 258.516 354.243 258.912 355.956 cv
259.155 357.006 259.054 358.04 258.833 359.093 cv
257.814 363.951 256.469 368.85 254.481 373.502 cv
252.869 377.273 250.888 380.904 249.019 384.544 cv
cp
.0980392 .0705882 .105882 rgb
f
270.498 303.647 mo
270.813 303.354 271.046 302.983 271.34 302.666 cv
271.734 302.243 272.227 301.926 272.715 301.615 cv
274.108 300.726 275.501 299.836 276.894 298.947 cv
277.123 298.801 277.433 298.657 277.644 298.827 cv
277.736 298.901 277.782 299.021 277.799 299.139 cv
277.854 299.502 277.678 299.869 277.427 300.141 cv
277.179 300.413 276.862 300.61 276.561 300.824 cv
276.061 301.179 275.6 301.59 275.19 302.046 cv
275.112 302.188 li
275.108 302.29 275.225 302.351 275.325 302.379 cv
275.776 302.511 276.248 302.549 276.715 302.529 cv
276.958 302.518 277.2 302.492 277.44 302.456 cv
277.66 302.423 277.879 302.456 278.091 302.406 cv
279.244 302.136 280.359 301.66 281.542 301.585 cv
281.936 301.56 282.605 301.795 282.15 302.264 cv
281.775 302.651 281.232 302.81 280.718 302.972 cv
280.094 303.169 279.477 303.391 278.869 303.639 cv
278.726 303.697 278.585 303.769 278.438 303.815 cv
278.181 303.892 li
277.896 304.23 278.982 304.233 279.114 304.246 cv
279.639 304.295 280.165 304.344 280.691 304.394 cv
281.283 304.449 281.934 304.534 282.331 304.976 cv
282.46 305.119 282.553 305.255 282.449 305.416 cv
282.37 305.538 282.17 305.651 282.035 305.697 cv
281.737 305.801 281.409 305.747 281.096 305.701 cv
280.33 305.591 279.555 305.543 278.781 305.559 cv
278.421 305.565 278.005 305.555 277.651 305.626 cv
277.189 305.719 277.553 306.007 277.83 306.067 cv
278.438 306.197 279.065 306.309 279.632 306.576 cv
279.868 306.687 280.202 306.852 280.376 307.048 cv
280.592 307.294 280.347 307.559 280.086 307.62 cv
279.829 307.679 279.561 307.621 279.301 307.562 cv
278.676 307.424 278.051 307.283 277.425 307.143 cv
277.167 307.086 276.843 306.951 276.577 306.966 cv
276.382 306.976 276.215 307.098 276.368 307.288 cv
276.575 307.546 276.904 307.666 277.17 307.862 cv
277.357 307.997 277.514 308.17 277.632 308.369 cv
277.685 308.46 277.729 308.584 277.661 308.666 cv
277.425 308.731 li
276.962 308.712 276.472 308.643 276.064 308.413 cv
275.628 308.164 275.073 308.022 274.596 307.866 cv
273.615 307.544 272.581 307.32 271.542 307.414 cv
270.917 307.471 270.305 307.641 269.677 307.66 cv
269.526 307.664 269.367 307.656 269.241 307.574 cv
269.096 307.479 269.028 307.304 268.98 307.136 cv
268.822 306.587 268.789 306.005 268.874 305.44 cv
268.936 305.028 269.05 304.198 269.531 304.095 cv
269.907 304.015 270.208 303.916 270.498 303.647 cv
cp
f
239.154 293.388 mo
239.666 292.707 240.374 292.161 241.261 291.831 cv
243.369 291.046 244.838 292.052 246.238 293.545 cv
246.853 294.2 250.395 298.663 251.624 300.181 cv
253.136 302.05 255.109 303.806 257.653 303.801 cv
258.059 303.8 264.393 303 267.233 302.867 cv
269.146 302.778 271.029 302.972 271.545 305.123 cv
271.765 306.038 272.237 307.288 271.474 308.087 cv
270.934 308.653 257.131 312.689 253.924 312.219 cv
253.477 312.154 251.81 311.771 251.212 311.515 cv
250.365 311.152 249.062 310.33 248.283 309.84 cv
245.883 308.33 238.292 300.438 237.913 297.908 cv
237.696 296.461 238.341 294.468 239.154 293.388 cv
cp
.14902 .12549 .156863 rgb
f
328.576 295.016 mo
328.293 294.963 328.32 294.785 328.424 294.565 cv
328.506 294.389 328.608 294.223 328.687 294.046 cv
328.697 294.024 328.877 293.57 328.783 293.577 cv
328.669 293.585 328.564 293.682 328.476 293.749 cv
328.351 293.845 328.243 293.959 328.122 294.058 cv
328.016 294.145 327.933 294.251 327.837 294.35 cv
327.733 294.456 327.659 294.537 327.574 294.655 cv
327.51 294.745 327.401 294.825 327.311 294.889 cv
327.129 295.017 326.889 295.111 326.701 294.94 cv
326.438 294.701 326.751 294.385 326.867 294.162 cv
326.933 294.034 327.311 293.703 327.222 293.548 cv
327.139 293.402 326.602 293.698 326.503 293.752 cv
326.114 293.964 325.739 294.286 325.288 294.358 cv
325.005 294.403 324.56 294.359 324.784 293.97 cv
324.93 293.714 325.195 293.592 325.421 293.422 cv
325.712 293.202 325.994 292.976 326.279 292.747 cv
326.756 292.326 li
326.513 292.298 li
326.206 292.314 325.904 292.341 325.604 292.405 cv
325.367 292.456 325.138 292.544 324.9 292.596 cv
324.646 292.651 323.989 292.806 323.909 292.413 cv
323.834 292.038 324.518 291.756 324.777 291.66 cv
325.326 291.458 325.828 291.233 326.324 290.919 cv
326.962 290.517 327.535 290.01 327.841 289.317 cv
327.964 289.04 328.022 288.632 327.859 288.364 cv
327.302 288.546 326.908 288.929 326.427 289.325 cv
326.036 289.647 325.612 289.931 325.083 289.853 cv
324.83 289.816 324.42 289.793 324.325 289.499 cv
324.236 289.226 324.425 288.971 324.653 288.838 cv
324.879 288.706 325.147 288.656 325.36 288.5 cv
325.563 288.353 325.733 288.184 325.896 287.991 cv
326.184 287.648 326.442 287.253 326.761 286.943 cv
327.086 286.627 327.489 286.407 327.915 286.261 cv
328.07 286.209 328.224 286.171 328.379 286.124 cv
328.747 286.013 329.1 285.859 329.448 285.695 cv
330.431 285.231 331.19 284.202 332.087 283.567 cv
332.898 282.993 333.418 283.844 333.822 284.548 cv
334.168 285.153 334.212 285.641 334.019 286.293 cv
333.846 286.873 333.474 287.332 333.214 287.861 cv
333.034 288.228 332.893 288.638 332.753 289.023 cv
332.703 289.162 332.652 289.299 332.605 289.439 cv
332.446 289.91 332.266 290.373 332.078 290.834 cv
331.838 291.426 331.54 291.996 331.194 292.534 cv
330.862 293.05 330.445 293.475 330.076 293.96 cv
329.978 294.09 329.884 294.222 329.787 294.353 cv
329.516 294.718 329.07 295.111 328.576 295.016 cv
cp
.0980392 .0705882 .105882 rgb
f
346.279 270.085 mo
347.011 265.615 347.481 261.117 347.887 256.589 cv
348.038 254.915 348.125 253.108 347.757 251.46 cv
347.384 249.796 346.724 248.574 345.609 247.267 cv
345.104 246.674 344.082 246.224 343.305 246.128 cv
342.475 246.026 341.527 246.232 341.093 246.781 cv
338.468 250.085 338.188 255.161 338.385 259.286 cv
338.488 261.438 338.27 263.597 338.089 265.739 cv
337.999 266.801 337.656 270.523 337.448 271.299 cv
337.292 271.879 329.898 282.898 329.64 284.36 cv
329.406 285.686 330.746 287.132 331.786 287.733 cv
332.379 288.076 333.134 288.184 333.813 288.106 cv
334.506 288.026 334.894 287.528 335.34 287.026 cv
336.087 286.185 344.4 275.578 344.696 275.031 cv
344.979 274.508 345.325 273.917 345.534 273.367 cv
345.698 272.937 345.842 272.492 345.946 272.044 cv
345.999 271.816 346.209 270.513 346.279 270.085 cv
cp
f
289.976 178.561 mo
289.95 178.833 289.89 179.047 289.783 179.177 cv
289.374 179.679 287.628 180.042 287 180.388 cv
286.11 180.879 285.266 181.454 284.485 182.105 cv
286.263 182.389 288.041 182.674 289.819 182.959 cv
290.168 183.015 290.55 183.089 290.77 183.365 cv
291.234 183.946 290.615 184.748 290.078 185.262 cv
287.816 187.423 286.26 190.311 285.701 193.388 cv
287.968 191.709 290.235 190.029 292.503 188.35 cv
292.852 190.962 293.765 193.497 295.161 195.733 cv
295.727 193.844 296.293 191.955 296.86 190.065 cv
297.593 191.244 298.326 192.424 299.058 193.603 cv
299.004 191.807 298.95 190.012 298.896 188.216 cv
301.757 190.626 305.58 191.861 309.31 191.58 cv
306.596 189.305 303.586 187.385 300.379 185.883 cv
302.599 185.982 304.819 186.081 307.04 186.18 cv
305.31 184.803 303.6 183.468 301.773 182.186 cv
301.637 182.09 301.486 181.968 301.486 181.802 cv
301.485 181.579 301.742 181.459 301.956 181.398 cv
302.826 181.15 306.08 181.055 306.014 180.162 cv
305.93 179.026 302.49 179.019 303.994 177.748 cv
304.691 177.159 305.466 176.663 306.293 176.277 cv
304.525 176.144 302.748 176.152 300.981 176.299 cv
301.725 174.683 302.586 172.758 302.999 171.034 cv
303.258 169.954 302.281 167.599 302.983 166.742 cv
300.151 170.184 297.645 173.895 295.512 177.809 cv
296.114 176.705 294.858 173.083 294.504 172.017 cv
293.981 173.081 293.458 174.144 292.936 175.208 cv
292.813 175.459 292.641 175.743 292.363 175.763 cv
292.139 175.778 291.949 175.611 291.788 175.455 cv
290.981 174.672 290.174 173.889 289.367 173.107 cv
289.34 174.202 290.11 177.158 289.976 178.561 cv
cp
1 .768627 0 rgb
f
322.917 242.341 mo
323.264 242.201 323.641 242.092 324.007 242.164 cv
324.604 242.281 325.03 242.885 325.056 243.494 cv
325.083 244.102 324.772 244.689 324.337 245.114 cv
323.902 245.54 323.352 245.828 322.798 246.081 cv
321.933 246.477 321.038 246.806 320.126 247.073 cv
319.966 247.12 319.818 247.25 319.665 247.1 cv
319.576 247.013 319.543 246.884 319.514 246.763 cv
319.425 246.388 319.337 246.013 319.248 245.639 cv
319.204 245.456 319.152 245.359 319.236 245.206 cv
319.3 245.09 319.462 244.986 319.553 244.887 cv
320.168 244.225 320.823 243.591 321.568 243.076 cv
321.991 242.785 322.441 242.533 322.917 242.341 cv
cp
.14902 .12549 .156863 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%For: (MSI) ()
%%Title: (2007.i039.019.P.m004.c33.cyber security spyware data protection isometric set-10.eps)
%%CreationDate: 2/26/2021 12:20 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KCKoQ)ZLIa:5L9<>m[^ct/D6>+TIgHnPSOT0HG<:?(eDcN\ZE3M5FgX1cAX%'\H&LDFtVN^S\8&cOX87cAi)<4Om_$U1jb3S
%[;f5\rj-'9[V6XQb^t=KScaIqJ,T7Op[12J*e^(`/W7koY9#U5qs@uUluY.S[:[%W@VkrN)THZ6#/:;\LTjfprbW?a62:Sra_s8]
%V.qS52;@esCP\KP5jOe$Ia`kOTEG*J_;4/=3e.^XDAOW%IFG\2>D;."!2Y/\4ro;heP<RoFK<[+Q\X3M^Fa!JLLD]p5<rj3#(qC@
%i('OZSd)l3=,q"5Xl,8rLB_qlf[ss_UdJJq(l6R(VYWg^NHl+$s0KZ5s5R_/J&4Ek__Q$gcMi8)a5F7S0FccfT=OfK%1RiL"e$]6
%Yha-GKD%asdKRNh7q')2$bE$:=M^Pu""d4`s4dQTr;j!cCs8<6j30fj/B>reY3Qt6BsF2g,1-#A:VQ.ompbDbs/Lg'Y8GU'TG"[J
%&*2L$_s2_ZX_e<j1_oeY<t!c$)V$G_+UI5RjkFWQ_AWt5rk)2<L`mD<Tms*Y7m[#'liJOnCHYq9'uMj#Dm+K[S`".:]ZS_HH`aMl
%e9jn&[C?H0n8-k;3URj1&WX\$gX9jGIq(UGoX\8n"+/CC]==m<^qP0_l<1O"ZK):$8_?@Lp/\e/M&G(0L+!!i=QI-5s*Xc02-E2X
%gC5*Jp5C)3lm>-=bj?J2d$p$;7^J+jd)!I45WBZ)2mqe9qDJ6[r<?R"=pc&I*5?7*#Ls$%r9o-KP.u:_qm@LC\CGKj>2,%ck.gr(
%OKUK:63F+8%Lr7"6Xt]HWrJOrWi_'.Hk2qW=s<<!68oj5KsbMCdBRMSVT8X=cj8>0r=F+];uI)Q#lq*;95GGghl#`Qf!Z<Z]@74r
%)<h*X#)Su#%(0#N%!=k?T\]RYftN!ODV&VddWj#[0)R*0Y/eG<YZj:5lr-3"\_"<@;R6hl>VYqI^;F<^$e3qN;*-0.oA%"%rLeKI
%Rmu&/F<\TE^W)1d$RoLuLq+,IC=TY6coS@rNC(8/3B)tec!&WoLu4tiP/#C?pgkpe5s]?Hp)4R9iDEU-_#Zj:a`"&$[-4Pf,JfGI
%1l<X(Au,hCHAPm6g#hem!+]c@HBO.'%tE/+R^Hn.*qc+Xm"6QabI-j/B;Z]G;KR\*RbT;0p&>`R8V(eJV/_QJbB@'+J<aL^p8Zq&
%QHa$TKa+MrGTO4YU6'8<(jG3a_k*1LZ^-o[h9D<9Ilr+j"_MHbm??Yqcc-=imJZIu.kj0Ncc'W:D2Fqao9u:PNJ2lI[0HQ="9`C>
%:O:h.'\OZebdZ?C@%6_4[8q!s%;N_=j_`Y>U*&o4h4KK]r4'O9oA2iEq%,T(SFni;/#`,?X1t^#meJ0R)F7Z;JdJB!Mc5VZH!!3k
%n#!li2k1RCBor-<"Wm\;2[VcJT^[#C.-.juo<m.pE6PITV-6HA$T=Ff1/5'P'&NEV31Z6#+t"iDEdb&+e"JO63jIFTT7GtS.#6DQ
%7t,S4=ea1hL=#Ul[)5YBQ:<OmL6Fs%d6-br_)f.KV%0oNO@'rCm;"j6jS8CM21"r/E]<bD'iN/n'AE\2VK4n(-UB+2[DO(LOM!Ds
%_Ee!_b2tGffMrbnY9_#\l]akJl;t1,7$\,'lg'XK[R,#E;li^KFLlU$[;hVIp$LDaC/Tj-2LFh3\0[mRBeW/5d)>%"I'=*+ALYQ/
%9X>jOjn]97(W00]207lV%[kP+Rk>Ce`Kdbc=71RUPrigf@/SS^263:lR2^uVk0/es\J0@%#+`:=J[!@bbC$kEQcjceba82qpW&jQ
%?S3'K1ZQY1nN$+$dNL@Dr`gWE/$'b_#F4H/J,4\5(B#8a_2slXB=F4A24ltd8hp7E8ia>Z]Rj\c8`=eilWpqtrMBr]8Ln1!k]Jr:
%TM`3=]BQbn;m9IPNCL!C:aN!T+jJS;RGcqd:->C[HSnSp4(7jjBp`=3h]pog;T`cg4^p<VR>O0,5/5lkl.]j"f$_J@<P(im>`*%b
%:9T'aPf(CZO:Ituk*\j:/Mo.cJ$4'agrs7&2MKD88G?jbH_]9XFG!%$XG/s-(k-(C"?6?p2&kM6&<&iA;28Z'1!LCXRW`V:RAnQ#
%EdnprqG_/+-NtFgRCJ6]hlJ`I46_>`MrU;HTb>lrAN.i/d5,u:!]LO09`<'uC<PObgW#YP;iYS@!%G@1Mp%'ijC2Ml.5j(;X>Dn=
%PJ\Qg3a<H=l,1?/mWD'qEA&Z;E.`>AHX75pC!L."C1k2q:,;LSiY^"b-PUpmdS0bqk4i0!T=2H+-B[.fam%FegLh[-E[IoZoR\un
%lS6snA6D*Gb)Tq6QHs-p9K^M=8V,-nLG`!^acm#fo@q;)c"=*)%`A=B32k$c2Wg]NKB6"\6+;J=[?lUl]&BHN]Mc^!o&e0BS?Gnu
%'KF=\R;A>bpqqB=A$\+`mFF;S.[X\/RR/qY;e&b0`o]R4bu6c5RR3W?H2Vs"LH3G29iX,1mGa\r]Oc9IHNI1citCi!c@VV)_Y@*#
%2>+8H`aG;O=eG$6rY2?_1K`D(K)L/5[XW$<CK<?b)8Dj&Z5fF26:b=P0]BTr1e]e*Go$"VFf&QIRFsXM+>`[\*="#gco01%7O+uT
%L,F;M+jGSlcmP$o0;%6CmH40QIkp!=VHE5mC-akuVdFV"ekBsAo`2QrERZl[Skf2oP;2]"f([5N&Z.diYtoM[WRcl(^IP,VWQi^0
%onT_JS>;1/YC^&V,c4e\V-8dkQ]<oAUbd;R7uCEblpuO3AENiZS^WhF8>k!A/R?@kD/p$<BJrb]&sUSQHLH^ni$:Y2`fia4\]h!D
%*abbSWCF=b'H4Ao,7IK2Q'[,,).0dFJPY'C;Fgu!^Or.-ed$;&2e],=MR)?>:hkdH,GbsI8u7Cu2Pq(]W9M6R.##^k9]Ic`-\k%r
%P9IJ!HLOumrTi(6^\nk9:8dJk4j@S,bpMT,VU,YtiE7X/<jeEqB+Zu#oi-;#ij`SS#8a]uH!)K:<&eRQH-/NHK?UEM0="99Bo:66
%iiK,Godgbf7P[ihgeft^W@7e;2ZosY[Us+:RIOOH'W0uNjJ&GZWp.huR?,U6SoR]V+Hto]A@X,gNSPr)7@>o<kF)O<q929!V%KVS
%O.)tOPVgJ*MFB\o\L=H.@bRYg??8udo9>/r#+8VVqEK6t1Q+7NWRgVE>%<_23STn`V98;M<atbTVjO$/)!`_"3J4lR^G*EN>bjGi
%NrO'OBGU?G1_ILhVOr]P=>kAa0Al8bR7sg?7'DG@YGE@-VUmT:QKbfFctf+fJ7RfrI$nan/o%9619L8bXjo1:D6Ai*9WM`.m=/<?
%,u92S-ZHd_D'V\=K&8_SSZ)_,9T3jA7W'PB.7fPW;'nb\4QDf`P9PQR,(5P&LG.%u;Uu[5L]-L&@;Wapr&jtreUS<!.!o/H"d.MI
%]m8l8$aY#%9=7V':TKJu+5Z?WlY;,>\!ZI+P=4.sTf/hCd]bQ0*6c4;1n>Cg9liHIfu5f$`AE&cX6V<rftYpG4?&s-7cbM(Q(%u!
%i8:C4s'(1A_gbbH#@fl-+d;L_DK=d\[$aDToqpVr_9nfIIVu0@`b-WT592fbMeW)&ngOLhcWm?]6p@Hc9Y5a+2s[SX#@,lohIV#u
%2tbiL'u>XEDC2bVMI>>\AJ)90@UPsfR@PdG\1A)f%gQm%?9ei;/ism8_nhr4F\&9K0.*W<K6FYL?4XY^G*!Ts*E/I*;nk9JCf?b$
%4`X5_0@%N`3K"+S2dG+*8I!<erNc%PffT64_cQD?kJ,KGG-getm/2'Zk;r3TrgQ&EP+DVJ%]esoGB%fOJ'!#T'4>^\VR.VT1Z'Vj
%!)7aO,WkVBc?urSh](=G.4ip4l"R=7DDW;?cSX)>f[(Fu@^_n;Xk*FIH5(/FZh#e+==W>7S1--3r*Wtd79[rTR.;U$^=Et()H*O)
%?MbFQgU(Ye2kP-H2si]/'(7j7PYu!JmhK;7KIi%C9eo&$4l)SraKc*)Df]7mCGlQa9i79OqC/IXm4`@XJs@1U_VS9UCTdY:D:ZSl
%C-/Mu2VUOXdW=e,IQ!$5G>^gb_]&G)A\9J>G%)DpQNF)C5Lk(`HeF=7I@<L3S8ajm=J\:$%P#JTk,&ihUTpRNoLuPR.&2'JW+<`"
%W=D+6>%&;]PkN`Z#:>ZROFld4ju3Ra%Y$7a@\m\Kq+hCRgD_:QJ!'tAZG9*KGe(A0Aq?:"n<*r]ZG=Z`<o?E#=_-GZ7:@VDOp,0h
%fE9A"0/j3M9MQ>J:S,n^"HX+Y__]aRUcH,%@X^p`D\Qa(6:R0g9XB0#7%+JbVZ!fW1`&#[QVC-Y%bYD,'1+6uL>DLjNamIZ@m[VM
%G<`$4)K3q[a!k&&e%RhS2_e%Ik*XuC1rYsE%Ge.ch]UBd-o81gAiDEgf*tD4=P)p5V<moP8[2uYqtTYCW&4P"*i\sB\YNoQWq'*D
%Xd)oJ:Q7q"oB#<f*f@%pGc?oG9o?@,i,G+Hm).eSBbui0f3Z_Ndn\OaBkW9ePU^t0A:BSYr*T'sIV!Zbdi"O]Q'p7EZ83#.mQ<=<
%S+j)Kd(cWH<-_]Jh5'a+Au.fU4A;(G'fDKq3_R[gJPI+fC4`<^3[E,j[1fo]j#BMOfl@kKQpFM5A9!PGnnD]"NoA5K*$Yn&=WCpd
%4l'8)q(.Pg`A+6,A[49b(<;f)3!O\Bh&o^8<T]puK7A'u%a*V#p8V7iPEmf8]9Y-JpCfilr.hV(-A+^D#g(<GCXZr<G,sHiAYIF6
%mhsk#<GSR+W;Bao$Fr![p,%*g4V4s7;IPi,4=R)M>`,"s:4c5CC55$"@AB@4%39+Hc(^KZn/Q;$fgS9]772S&CB*XlThFmsmMQq$
%[[Y<aL<Nn[a,[aU2"l6:E`f+l,3IghUbqepBtIMDZe86_P_R5'JfZk]2J??HT;,`iUfRZ$RE_C4G5FiL#CM-bCT6*B)%"jMXN2n"
%Pc"!Ik:,@?'f%S/n<F3G.8T\1K>R7.Hc94]nR^8Lfn%#1*@Q$51WsCt2usW6@e$c:MbfIO1kVKHo=korT;6n(q/VlV2gHF8H#oB4
%Q[*Y)fOWiDk04?]F"%N\baY(,Df-'6__Q^ZG5SlbQXJ%15F2GPbalr4\]gVfgppj%akXE@*fr0RmT_5PB#^BG@WUJSV*e_g?+P7)
%B'$*7UtP5mIr6>*\TrP/+GD88?-"^F-T,H9rJWi@2tQc9AG9SGpI`Zf]b1uHDLRi%T=H(S1;W/mR&fdXjcu$5:qg$h,cKB'b15q+
%PuOHb:A8BQ9pAhhRhXbVHou^ej<u<<ZQ_jbAA"=pU:H2"rn>=M;]k'o.kmB60L;hlU$F6gk"E2.p3V'6DZ<PZ:i8*/oU^7F04F@.
%8MT#XkGcVZC[,?tV5pso'#DBp-A>gl(Uags5q4[nYP"]q8s(dUl*X<>EgRWEroTUNqcda0I[5.hp8.BlmEYMr-R-Os4CJ]uQ81Rm
%BKIp`Br+WR_1/KX?E3&1W9'iETrhr/GOg^9Hn&1=7bC:V+M0VYM3&A&;-Wok>'':Qmpqa#<*KPcHBWPbXFh3V[RU0!518pJ'>lKB
%VQXXEq+n'E#]GB(r(1K7AOb&aNM=WDqVr5L<&-Sb7a^"FnE2Ahq*ns`Acu\]mP.mc(RMO$/d=5&'RQZ17P6=*5,JhqCV"Mq/2s75
%#CF%%8>CG`-E)0AG-u['%oYW!0N1&DqLJ#+muI"*KNtR$pOhb-/nDCN:9d-Tp<>>:#+oame$0D9ju<_Yap`*Jkr4iCDk-d>E>Be?
%fjfZ`C@mHTGKe?YN-,mlaUrT=LX1@].Xpc-.C49=4P0<?c/kF5ffc[jY0#u1FI1unK:1*FbV7R3U](rnY/ck-Qq#/=_cb@X;nm$`
%_:P5.;UT12Z`>t<]3!,.FK:8oZB")?MN@:/`(a-aB)[gLV%gqre6eBD1_7'+N%`=1&TmaG9D,NQPl;Q7A7FtIl[FQFB&JX/#5760
%WrtOW^]cb;gXXepEDSCmCGYXb`mQt;4-TA[EhQB1'@*$\c+H>*D[QC?C"P%<gCoNq9\TnuK9J-m3tp"5DPRR.'>e\:L*-:r:KX*N
%HB%L39WF5#@^;M>R)ZeFfiH+)P@cU/s2qDsdGtjZENg_`W#[]UVeKI8QpRC:]?nTX$Orssl>\VtF!g6e\O_plUpJFgW7@T+[sY<D
%GrWR]Y??bEGZ$*51kQ`2JoiZ\c-54m7O<?hM-pgFNaFX_qp5`,0smb7L%)1t8H/2KJ%]UEDk?lD^Xe$en'OcT0VNljGnM$LG->t)
%lirI-/8Q8Pm0_)-\fVCWlUF^O<R9b*Vj\YaS$ci&GHZBXiofEY7SZY`OQ`=^(f7hTIYbgO1OQ-!LU_1Te"m$&5@!=YrV>^To!a"Y
%H\`JiG<d-T2O]+Sk\hl5$i*8u@5,t1E6]ul&h1,ZOT#T^7a&.PoGX"idB&%]o:XekA<W0c4[`a^[94LJfjQff?ekRc1nte;::8k9
%<4dDf?MtJ6^XVu2Wq#)!3X2$0]*DcT$*7:'?Y)SnRRGTUqk*ofQYF*_5CEdhhlsK-Y4:b7BiP'@59AaDnD=THO7Hq66n]h^MM)WI
%8*MjrpOdX5,[Q1.fVi%BMlUij*r8alBi%>o4mq>#R9trn7^GtV<P+Tkd/WVX@L6<*hkD*6&//plk`t0D1Hip35B,Qh9<pq1[=+7f
%Ii[#4i"&$GD8qS0!Rg`I9Z%(&-COuJ*[Y4oSRX4`l%GOUKoNc<AaW]8IW0mW2ZF*,4e.K/;85pe;G4W6VPQ(#SS@>XC$FMXqb5\g
%%o,&_[[tf#AXb.'9\J:X,k`gZ0slCXcfM<(#-hm2^+IE"#+HInRq"'pC`iX!193B5eA&)`\S6>WU<XHqVPnF9W',#);c&ju@jWVh
%S0M9)g=`l=f0eqA.WoTSK"DNXD%$@se(L/7rXGFco1We03]kgD2qQa"1V#rJA`%ZZ=0b3=[[?/S'\`:T$h^rD11.7Z9kS5;f@;]6
%ZPZ61VDC+.$YnDW^+%-b(;_<@lu:5e*X+U=i"QN,*Z3gG;X77JE+XNiSJ#O,qmVfuPpu)oBkL'8(R-i<gnf6$(TrZc[dEsNU\;,"
%a;)[taj_YCm<U[Yg]IK$c'3CK[!u@q>BUbnacptG['S6$g#/b'_<GQhg2`]W;.kbI;q/Qk?/$\P8EX5NJC:;cLeUpY$i`^T[AfqQ
%VJA467RS*m2iEK&3r:jX[\+SC1S(*$lqD&)3d[_@COU66Z-LY]lqD&)3]kgD1WNVhK@>g&G'<GDl0M)Vs&-FaD96l3k*mFk_/Xm&
%h4VS9DGuROX=.^2Nm/R&M(B)t;qSj]YjG+mB*p_!fU9UJ.B]*]S8P4._6M0u*A`D?.I:D<f\&D^R?mh*C$D^8-I^D2QHisk1WW\i
%K@<P;2Y/_qSa#K7BAZ6mB6WZQb4\o$Xd(2VABHf/[_H2mS%cd&.NUNsM[@K83@Z:EZe<ecYqPEK17L7%e%_u]*K`d[1Gt`&l!K9*
%qjp<uJX5\+EO8jQ.a4F07HD1u.e68-B579%e?k^!RklpmWTibGE!BEYIW2ldQ3OP;c*VSiV)']O;_?7UH9#m?%\pOhn(8DHqH5Fp
%*'+Y<ji)Q8+'1FiRa0FTYH)BXb\G*Q24^`2/9bUd(i+S>]!9Q+NY=4>Sa#LBN+KH-C4:-5Z,4cn`A<4=.I>:"SiOfZ+.R5IZ[qX%
%SXo$39P8!-p.TJVr8;ZQKe8[]77AtcSLNpLaIYE3RNJ&;XL#7K8>`^LSXgYOZc,r9K@>epG'8LEVQ_k1SLNpYii;gjl%TQ"Fg??X
%1528JlmrTm(3jPBE4Va3p?eqb-<&B]Ra,dVR0?oc+.R5GVHqBfXQ`DQB50IhA"5R!RNJ&;Wj>-kZ87c:WU*urXLW7qW2WL/\ZW%c
%CL9Q-PCGj*SS@=^9E1$<c8%[@24^`2bd*g'`gS!>DQL1NA<9JtB0&-'fe^ZNo7PLdF`qrIFf)H#Q(:?2Aq?<2#H+&+l0Ocle'aYM
%cF!3pnC%6mF@.XNh%5``ktF`_>'_N?Bmt$4TpBkl/@@N;e!ZZ=\XKDL6rTHiHZlp\1LI.r:sL%*eG?]mRgKld/Y-V?hpBdq1Sur[
%SS@=q0W'9AArMq]luHf6k=j@sD*\\\\[I-UN6G:%jdDjg'_QAmC>[8MFf))n7K'7jjhc#65.1U'XJB=Vf72H.Ed1W`QtbgBdF)0d
%8#E(<-2f?fC!Us.9"X[g?g,kDV_@q'rntE*G$1]=1G/PE=uo=JaL$&dV)'\d$bS;\38I8$HeE1mR?l.*oWMqB`_D5_d%H=Lf@O3[
%;1Xbk&"/a/[.J9PBd_BXR?l.*oIn]<Af"BYqYIt0YI!<S9ODH/qNkY5Nb=KC2B@u9qLe&.N;+U[.hs*'2cJ7pWr?:(SV=%!<Lp,S
%S#P]1=o1nEc4<Z/e?r%`(2(3:e$Zqu(434QH9NAK0aDJpa<%3`3f7>OgGK.'2<\j1Z\UChrMs*?S?)!M0N6GgRf8RcF*@.\VR%YD
%ZRqAP3]kgDREj*p(n%ZMT<eCun=WkKIRu$D_eQkbMj:EY?@`#`oT.e]OcR:DF63?%_KEBdKB5+r6T0Sc3.CE5:<&\Hr9.tnIJu\O
%!n.q%4pY?$&$L?UD?"je;9?;Z2"(p**!@:sC,Ye?n3OI%[^;jgL%)1tfFM_*[i7s#p.rcdED4X`)..V(rP@QbZCXae1KTQi:C$B;
%VqV]C^gA,q?/GSdl.Q*S^]1]K*_!\pGN[LoW.4e0)@"-LY_bg)R20j'4aLjGNiQE#+$FC-c.?Z7o]VnErnn*l/Ro1fc&KRRoTsZ,
%^Q9.a]n+A@7K8,!Cd7@4(62*9U2?<Ie=3UeNrIrEe+N(;2b(J8lHT.2F#-qJ+1IV/MpAjUX-`[(<A1Mh5f6)YEnqc-EH98^Yrg-g
%(ZFMC-IFU$Zj\iEK;j1O0?!2s0l>.T8Ikdp^L"=437)SI+Ei8cqrE0-An7+k`Fe1Mb`k=5riD_KCY72;dr=Me&:3"8C=:(5\Q9:\
%h."_7ZJ7NJec8Z>pt(1f-,BE6SQF'.Gfe:4`kjt5=p#Zo"l4(.HID,6*R^S,38\TYs4)#dcmX`ojn!5hdLI4r'pt*;5cX$\r)`W*
%.o\_dgi%:prsIJN<RCPLn,`4Zg\qr;H;S2MTlWfC#&G-VSXN9Ns0"4S.W@hn1fUJ4b84S5'q'0m`Ml,lUtVc_KNT3=JS,J1mOQ.$
%"es-$J!)70T.'&@U80#&2)qRhW?`_58l(rhDQX[Sr^s@0YjHNd4Q9N3Fh5io'WAdOZKOn.5VjJU:lrTeSGM-))jo!Zc"FaY\T@WA
%'_(i*B_"p#>+Qfn%R)'A+4c'V#@UH@!q3n)Q0rptKi]k(6@Eq$olH]2cJ3R;SVPb%o2J=/C-!(HJr>+!CB()nf-s"!$+sh"BDL]_
%C\BP!@R$an0r?1kQf<)7m"1e5':sCAg/W*-;kZ/JdF=NtUaltF]llCe@-i5$C^Sh[VICV>YT$QWf_P]6nUGm@G:G(OP)AE8XU/NQ
%;(^;7Y_'O_2UQel1m$U,bg;t#(CfkMS%YtEeo(1b=1>;TR^Je-)CHBIL<0n6p5N,"$JS%J>49uiRQ;RVfVI73)P'n/KId(U@B1,V
%rgu`FEgqE4`^.4`dL=hEUYMq.gBNGLHf;d*&%>IHK]?1[jde+C4cG]qg6%SYYO+>)c"fCY8!/L@]8`:8@<ko'</90cK#V.`k:ib\
%lW_O1G1[,UItbm>peTMoXAlgJ8[VUdrZ'opC*!QJ^s_YYN"R[U2f-;+;EnG3&LK3,W=49c'/\!\_-(I<2d8ipPMD%?me+.Ci5(&=
%dgb'^rt+?1#9iS@0>U&)TBq<'oBSRWg0Q=/ca2'"k#<j8JUkb/E@df=C'BmF+J78<cG^nWW)Yp3,k&+/h,mqRgIAp/D+8T,fL$1W
%<GS0/[=b^6X*$lS9i?Ci7Scp`LQ0tQ^]IhlB3S'^VVm^8Wn04B->6nYgp=M)Z2QXQVMA3<Ydre?fI5E&_<lcPp$1).]_hR(49++e
%f7/#6aus_;o*J#G)U0ld=m,/q+,T/XZ^&Haai1E&fP@mF!BULV`u'/QL$]XFUdo)Odl<>S(:7>Kg'EZjnG^5O,=<pJ7XSP:!YbuO
%-i>KrV<kTWL[^`;(7:`S\R^6Y,/7FKeS88EhM,lPAGC:8s!#j?d-+L>Qqj<dG.`W1qp7nbUa1jMd%eX[o/H^6``p:pD2FJQ)@s/P
%^P-\Fet*+P5[^Km%VdEh*GR:^Sr$VQJ]%2)Z*/$8pEOeAETiOD:a!Yj?mF-hL*%LhLi&f&gkG.c1-AsOk\L<L>2K1TeSKGLfR*qR
%=Qa8jo9r*#f;^FL_&/U9#B]GQZL74(P$bRfb*W)/MM'mm\IKP>;;@]>VPU\A;fd'I\h>GWU^(iY3jT"oVK\.CQq(KM,25Q:Sa.Q/
%p#c7I;G,,Nj`Cls:04m\5]UZhEZ>LNA"`@`&s/kjm&lh+/2bVUft@6rH'6Vq,+&pSK+'Ke(A'VU/(_.CK8d9$+cbEnVJ54fg,]8W
%>f;:5foD@NW+jLr3ArJA'U+nhf:g2J&^aJ13hEFfBV'$!:7F^>QIt+VmgX<gnD`a+3p]dYf.C,N[E5tgcKZ4V',9Khl"Noh8Cu5`
%UtVpU-j]c5q'aDXpYP4h+QT=SoUNmsF/fK4MpB\>qXQ+*XVl.Y87Y7n5,5"+l.0kifb[LI@]e&V@WU'P@H(YA[T0;Z^8j->c_=FM
%[T=>SO'@WJ,1q-?];l\O)Q@`L53+dcmQ.*Z"Bm1J<M%HUT'(He[I"A"0K[<-mBp+&q9%5q;bZ)[gXHG-j0>+g?er;aR#8r?SAVOJ
%hp62UD'3L,j5d+8Cr=!B^4bnCqaR3W4Zl2ZOGoO8l6G4%SUl01_X#sI&%3G:#AQ_7h_i8X#s6\D`[JTAUddIDiJ];aUmB9SC@/Tl
%5UtHI<']'8m`)Ksdt_tGSZBdXa^n2hbm#_G(EJ41nA(o`9lNF%6]+"oaQDk^Y1]t0\J+U^:Es)8_Ie8RD#Yl+7n,CP2*9>c^=_qj
%B=Y'g:c6[VMp/i@=U4<;0^A&ZL4<K]BrBadQ%*,6\7D@TUN7_?6_c7nc,ob$-!8$IeUgg/Ei=^o+[Gp*fKcM18d14!3`2p9ALpO"
%U`rTj`YE?AkI]8^/4;Md>e7P!mRIXo5T="6Ip^g+ghsR'CP0&p(!N<9g9hTnIb0U<T#F:JmTd/MrFST0[n4uYgDgQU>i%HNfq^<=
%&i3,,3hAp#`lXX-P,$Jq2cltaU]4l"<r98W\5N-2]2%f?P"BH=C39O4fN0//P]X^L7.^)O7IT:UiE:[po$skh'uUBr2*?O$@In2<
%dp%f?ImJbGBKZS046HWh.H+:V_H((]IEDc<0;ce2rW\h%UNHN#X^&X8)TU2/R^IpQG3>$cB1#BHBrEr27*&uig;XS5']tj]Yi/kN
%.`P^AjO0se8%!0Ab#`9sC=0S,q5HfZGD3R0/NPB>of'n&,!fN0Zl<&G]m:mjH(![oI9^9dJ4n]iZ+Wu?dpAes'kbWX.]a5%fBAW"
%gAh>-f/L=mnL3"Q7b9ui@&m[ODf,jC$aJ2'NZ7bpeP;QhUQtp!Tn=,9))%D.%cW`=5;0/^A>3YAHQN!<r>pAn[l=0DA!+h"`1co'
%l9A]o5AZsHjUm@qo'U_K[El=o7aS*T;h1R?3D")[))q-@``>1"TKPkRaiOA0?cg,^I!4OkK79V0G%knfSl%A6EJ2T82CPebenpdL
%Yk50O*/>f6\JY1`0Q+U3V^,b*eDh9`[@t%(__gLebnAF5AFtr:>SI&$CHE4q\t3#e(Xc4i>E9tpAsL2'[]D7>LKR+TR'/>BJ8L/i
%2&MdcbuRooZ[X-*1f'&nq,;<+Y3RG;c$dhLa(rkPWXamI%l^r+4f9-_0tdU;[@cjBs7CR'h3/)E_>D1ff)<:Y_KpR0I_KjR\FlS<
%CN8=L7Q&80mYWsL2oV>Qof$)NGO9#n4.dV]Y.&ah\$X8$]mIu3n!I^bpq:p\B\m$%rL/)?^:)\ZXES"AAJf$-Flue0[sHFRS3;A8
%ZbC%,LE"bk:Wp^^m_RT'=?DcY0VDW$h-4k`DKUlp^D-$q98iUlF/P5Z54"k*IOadX8k&XF]>F<rK6K"Cn^Mr+1:"C$Y(,`NIJrDO
%rb*PNp@;(Em8gs&Y?dC,XKQ_douG%jHbIkE<ok$M+aTEf*UiZYVdJ;kL"^k?rQ8j5]Xr1OIUmj@q0'MTAii6.f:G-M-TcoOG;d1,
%I;Qinmf+\Q=13#^QFu[1o7ot_)KHJZK1ZZ/n\6_>/oR&Hf*`P\p@7EOrgn94ET,I-\&[eR&)NO/_VV&cDdV9[?S.Us$iErrn`K)]
%\K%'+bCSENhYjl\rVE6dW82go@&a,"F"b:LGlJ!mn8NgK`OQ/iLt/tAf(4mlKDOUU];s+mrUZ5QlRmBVXaIanboU5nYc,`cnO;Um
%:sOJ#]'h2VZ;TL\%UbFPmZW@$`NW0[pZiHI%m0O:2n%?+]\?]`*A!X/DLW:CT"5lcYE.;l<^*YTP<3-MhkuH\JC7BdkRK5g-h0sE
%DBPpM(+pYc-,lNq.m#*TEbDkk*3@sLh0T"(NPc&"i@FRf9jeh0jS$#VIsLt![&3i0p29JuCqm6bq+^S&5O`OJi:lBoVb]5fH1BS@
%'@kLB-YocJn#sIRC.:"6rq6\Z*X5d_?:7`e&l4'14?:2XThR6(<hXb3j=Z1XB=@R`^6eF]`UAkGVop`CC^._.]*33Fk4RI"ipkLq
%d<W9lhnNCPbo^p5=Wm0^q/?R&WdNTLs6WrBU69'D5&U=F&bkG<Ep`%9d69CFVh^`V+t<.'4FI)!cK[L%9%Yp.Z['b9^Fe+,?^0-r
%mIN:1b3llSZq?ogD$sI^7uNE9:&jN%2>^6HP$X>E/hV;N_lQ%NdT\+7CTLpXE)tn(>@plYoMh>;f2n$E\+<*C]"MNe%]j8ooQp2f
%[r3GV#^+j^>W"`:Wnr:KQ58nt*c@L+K9)KLk1ZS>fPW@2iVo%kBI8ld&NP$Co#EC#n_DjH[h=Sbb?T&a],N.M+BR)Tr)%s3htpU0
%/T%#ln4`QHUf,pFe3B$A*O-)YKpm8W0()tdGFj154?pFKA7-$(%*TsO.rJYJ$Xp-gCT)&#o5s)"F*PEOmE4pr`U6dmp5/6&?F=,L
%ct%8<4QVQ;V^b5[/q)I:&+==!O7?B_=74[+V@O^lPO1P_o&A[;4mL^5ctO9nH>huo<qj+%cQ@U_;-^7f=X_B%:*2S7q4ld.g%sHu
%m@^iN]m^L0X?AI#5=ZE%D([_Rn^;ijnfAR\kAQY>Ib`O"OJ())WM]-6HE[L_o#ZO^6*9f.g$X"P*)tl!gH@NGPfpi>E7f\L&fP%7
%3*ngin*b,[r&A/6>KET:`RFa;YC0Wl6)eu(nCBTC!XcFLJnR.l"2ARd^]kU'4&=l-8$K+52)c>4b"mPLYMXne^VB[@kn@LQYPH)T
%ou9J/qRV:"h81L/`Kr6M09t*HSVQhf@<;.@+kn++Y2:bZ?C3`XY>;Er]&'dY,CBCVag/PYI.r/^I!q3fmbbUfaWKC<]"tg5G1Q1Z
%:P%!J'/MaRH,^U92P*@AV_CgE8$XS[n?3#FO;mg<rDaj*nCRI$'Dag0@09pAfi<K<WT6*5`<1SeZ*fE_eke_DH\<*.YmT.K<SW]V
%"paM`@m-:[e*)]iC4apfV`E-M&0'g]0.2C>8t9m)8>%2\X\s*-0\",cQ#P0H7]!k7U1'CDr</sX<q06XjB5/Nfbe?L$/%:BI2rpY
%O@U9!Z^/NV?GWO@Y&EUE(g%(]Amd@S7nBhnF$bONePD;TKNJ(Ql7*]u/"QkPe%_PO7krkcb9A<.Iu<`YUW.d`S2QNn;XalKhML`Z
%q.5Y/'fME,l\WQF,Y1kp8W5MbhA\o8!Ki(E+u2>"^bd7Y8q.r/qPUY3InRNdN2kJV(;L(1oI]IZR!GYc&gKV-A6,HSmRM"[ZDtd=
%7'rb=duldIM(>!KW/`EZ[#@%q3_C>(Efl=;N#?>('[bL+&SRI8_IF,NkYH4*,$\FD2KoMnr4Ad`69jAK+.Sq9"G?;WCLI1`+2**U
%.'5:K!Q/a0gH#PE3"$p=Z1MA[>:U_<NukF,ResQ8Dn^Z">jlN&G7ul(_GV4mUQY#+U![e?7Le_,Nt]eXo>.,G=V)+Z-@GUQ;Kp;i
%rO>eK>8MKjOI+=TdUR;>?l6*C_K7`'(/O>Wb@a'+j=l;J0RqG/I$6e]DV$fhmjp-as&pqTqtF:Jk;[]']4Z/;m8$5:np;=0IBm[R
%eQ)(5%CiBNSb;$3YX%!onsb9Eqt\2snO<?&[o"1,S`a@go.T"77N5OUmEN>&Xj18*<]8os.)8m_3>]4A\Z9"oX8NA\3OERQ]t*R#
%0B(+6l0HXREcqBqR+.Ti2P`'Fn_9\=p6I=RQ!fuT[hLVJ+t"E$p\DL#nb]rYNTt_m]R!brG6Xr5,6h\(qTX-n.SZGh;J\6?$hpn!
%-12*X>4jd\Ne_in"V.+>c^#V9P9[`KSpgbDDXYE]q;Vu)bLNLd<n)HgPH)r/\H)'DQ""YLF]rf+p7KeH^o5g)N&'`jhH)h.R)ro'
%a8Mp!h.&ItIpPL_,BaUoI=oI;rJU1,#,"q@>l&XAe1Y]fE)4;chrH-AZ?HQNI=:G?k5cYoES@92ptP,ol'o^tTX@E]rii[W7?QA.
%g_,"6`4iD1^UQtOgsXe-O7&5j)ng1fSmV4K$`kr:?2ioqjdd3AfDFlac%l-G'aX#O\<h^DlL8YipopKBLj?^[hfLMt-i<&ObEGun
%8Il"Qpr<bIRuR$c[oOP7h)[aNr:M?@bF!WZ\Cc3<LB%6e/A*JMQ2+Uni(n705=>MSF/;d<RCK0-6@s]Gj!*\$NYq^j&$68==%OQQ
%j^(0#p,;]>7lYP@='pEd%5-f=Xo?W?nqUG7n$"]Gg3ikD/YCUF(?*A%O,(f$Vt:)VZtJQm*j)gL)H86ro/2%^N]NZM/U"G6qW:'r
%&QIdcmIogZDuY1`kY:OI7TcXXV9eHC9]u4LUoO_f*>hSQQ("V;nI:DF*bd?(p6JU8XhGq=eWO`hOhY6cZ,=Ip`AfRc']Uu[kgIBI
%g1mVNI,p?\Ie`JI\B>T6J4..6#r+(!*1mm9EG_;)(VO;GTX(r=o'6*@ZtCD9gSMoEMC&B40"$-bX2X2pX6Z4M&&RH"nEW"YBh-Ec
%X8#)^ds"S-h"c5h^@r>N[6AZmQ!N&.=W`4M#G',[O2PaA$]DP+)+r\to>=d>H2")FHM[R#CjkDn.G:!9hpTL<:G<9<]D1+>#P"<F
%:[I8EWOW#sI('N"pi3\Y[e=mc`Xm?;loPL5`Ks*,\)[#7\$_bOf_M,ph)mS7?](aO719`G/iIp#H"T;?BsYHZHT5D%WG(GI]aN2i
%rb]-Nr9A.uBP/@Id9df`rn>58Hcba<pCES)XAlr\Vm,IT*oYfuX<+o:4]r!'fm*^4bNCg\j43b__,:$W+*C]MZWl`[Ss@4g#@+H=
%hE,GBjk016M[B[3N-<q&h&f:dKr4lhi&>hbZd%MoU+I0/rG&<.X.-$&1`%7Qe!7TWl`2V0%3qe)dFpiaf6c>$FD37?Z;RZlr"s>B
%EN*XJ+!6_*6?/,P.L)tNoBpiM?i3c,?eKd3UI@g*Riu+4du>a:pRa]qMS&\:U\,_H%!&8P;15b)=^NW6$cFjkIV[uo`nP-gfdQKA
%j/uD*T8MCbKDgE#Nd$7Zs6H4[YaLl^9+*DEmJ,!lQb(=)<XY;tG'bZ=?f'&"(=2DrZ/([GD?GinlD(j>Bb"TjVdU6an'g".]D%>J
%ak&FHQ9VhSc#Pg'n*'c,_p\(GqhK^\j3O3%^N[j8[N$XY<d4/2n7ViW=kS4>IEEWPh7qL\1=*D(IWnaf9C^#^<6>!?T.f/dkBBN;
%q(H,;Y&@flYZ+jiEhY7_S?IF)h`T&nrkY"@Ik0"Lc%:4T'AOB*oVET]2&;5sZOQi>UUSQ%f%6M%n<g.NCRFidoFVik*cta'ljpS_
%4FcqTIZOn<AcMGrZB4rW_d%#m!r$63R1qokhSfB_"U7Ku@E5q]*lLQ5mULrr[pG=@Ib=,O?[cCJ`2HI<^8_ktFap[b_uo/1!(qb0
%i[i[#;C+9:SN@.?NQs_`qL/:Aq7V%<^ShlC*`_\)45\b-V0oCbRpr;u9S4mH#D+J02O6QD?bTcLQ8T_4ICN81A>]g3Q2JI8]rLN:
%?m@X7(/IQuVZh(DjV51Vg:\Y0<82m.eG4-8MD\I_\U>D!>m$7s[b0@7:g,fia0>&mPL?R'M[]O=2u&N]6%Z1V+HOj]7).<JKnn(W
%FcY=]qY4k)hS9_pU;L_[@Cr-*cTf1U;_%5(*gZ6%CsY!,_R"BcnBm8M;HZNZVqCF3K>>-HG\863s*MJo[Zl+uH5LI@Ig^nQT:sf4
%2(WQf0(S^&iQ^LOkN!$9'K/K8Za9Fh(',\*l,2W#*:=O9_pbBCIBWr0.d1!LbW!lB*[P*mX$i8`5B7+7'S%TLs+sJ^E4pKN38FAC
%F`6T(#>B3d9/Q))PeI,*XPY?$KT8+8L)0*e`SB>G>(V$lMT'2ldDJBRerb@k4H9"PSQW+MIeg*,`tL,_,]QPu.\?1YlJh3`cQD;V
%jAt-;S<apsDY_D>-C0)Yq%!C#b9*=_:8L>"`U0uurO2G`@6gqZDuGL11Z!%`R!7+bi3'fNgWpu8hXKJ5`b?6uldZL3@tcs;YpN*#
%G456n>6T@(CDc9hfWFMq)851dd.$tqEd@8Pq0_FqG";;aIG#%CD;Qtq+5]l\fb(,.Cm&G7hSXA8'6sQ[]d3f##Zoeh:6/g,T0N/Q
%k4nYNBTjcSqRujcIHc3a'c-.B!F-dea:k^<25r6RTMBQt[DM\,qs25gb3Ns8`POqJcVq=7a]#nheB)1Rm,$X6V2'MNa/^HOg7;*\
%Xg2p#G:L[^MtttcNa^6bf3)!3^Z]gbm8$r%"(It/!OJVM[.<MJ8[%dR/$C1q=jbq#a!=#8#n)UG!$trLigtGc$208N$cUTlXZN9S
%ZMUG>>g"_n%o`G<GQo\HH/u,UI=-hu8rj5/`d6:A^dt\^]`$bSdqA,U0'BpM:)EL5^sLgGhQM,E^;!s$q;TSY@^u.)G._M:,PYlg
%[XHj2:%ER4XISY5:]!/$l\"s)r-@P:qdlb6rZF>g5LC,i01so2^L84-lh.)q%gH:ogA:"RIGR(Hb.fHu3VTQVROh?G>(8s[[o?LF
%=Z0tS0`(m31,mKCXo0[0pX`V"]:E975FO"=&*=rJb8\8dnPOG>m&jK\iTA20mEI&T8PK[\p('g+<s<kf.<c`+-<m:^,gl<M\jtYL
%0:.R04<8@S"uG>V;R+`mn%t*2oWW;>]!eEYQ@U[75hR1ON[f$(Lt%B`e(;&:cGL:Wfka\iMJ!7GW>Zc4;3Y,BH]p[-mX,[DIltA7
%3n?ja_Lo7ec,D>i>OX5Ja!"`_([T/6X%9Uq59@KdT"GRE5jY(+hth<IqF1fJ&u/*u+"`S3/3X)W^/VZgg97,5",#eT..!9b$8eY/
%Urm$tFHNWT`1-_J15P:d`R6oX!8dD7K>li.>Gl'G#MHW+`7lB3H.jE6pNG>WJ^1%1aD%LJ+3tkEe)m";'PJC&pf<iui*fU\BWIJ8
%IEfP)ps=q%!)j4GCmKFW^Nt7QXWu_,I'Hj9?@9@?LeZCHd:RH-/+;rjgW%olklIBLH[V*<3bXAPI.Kj@),j#uMI3A*mdqNJa/WP/
%7IYIZ-:+91r>KM4h9pqXH_oouaDV+jlJ:9$n\sNM:3,Q%p[2YhA?eI8$1IXF"g6asO/mbhL>5s>N;SUG^A;uOQTs2CO23WSJ0Ve@
%']bbZYS>DYp0oW7=4^Ng]IC@Mm3>[0EqY2s>i;ip^8uY`eZiH^6*.3ic@&aYB'K<G:+K(^b2'Yt^D5`soh6>WIJClBD_2]icPr/-
%Y(-/J%?l4#V:u0^;8)Ye!Qr[I8*(g]oBoM/[X@8h`Zk[?6iAo&")grC0\gu8=o\4Qc@>4W[k#o"/H&_5LQ.u"m^u^2Ms]Hk&K-k]
%n%6iZi90,qG_V'O6eR]$]>JYc9@6NckamjV[H-J8M7CZc8d9<@><sJ`>I^iUG2^nnXk'9,Q"JeG;miVjDgT6$3nDif=!TBXdU:P!
%G0ju0f947AebUnaNEfKGU)QVsem(@BR_iJl!01hr;YOBdQ<mnG1UZ(9[2o(OT#\^qH.WF_TH+s,o?^=1X[X])i[)Ydj6uTD@<;Q]
%&0kj*\4@.p42"U\>&FH`r%ZJje^s*IN&MdB)#i?Rht;-iZe7-<2>FQ30Z$EsJ"^St:=&G&JndZ%B-d7^d=?eC%N7S5UYE_Ib+V\/
%[-,6'"nK9tGQA@,BrtR)2lUnFj`?s]G,%SSR;lk[A2PD>]Ebc\T#MGDG)Tbf!jAZN?,DtT"ek+"]@sin#"5Z;6$RQ/5!%m\EkSj?
%;UF[B$W#V[_nT-Wh@IoKmCk'VCSl(cQ"sXDF-?-q=5GL$gQ&f3j9f4r2;<hpJ8JhNccp@1\5X[6*Bn`&8#*[Lb:-9Zlo0KrXt%#A
%8?9lV&j3fUfmP)Ya_Qd6;4d[K+sc!pDR7_AT=:<_YR$19DcFEWnmJ,C/+6fTjI9q&RGh9CIe=U"i>0peCX^i$A%Z,K)eg#V^:[bP
%Aa!gWSReKr<5"1YoD/na$T+q#.?M84^K(g-Y?kLYpH_$EiQEm&--;M'U^lf]n&#&jb"HHWeII%G`0GcX8meti>K@"72`s.ieP@)L
%[<<#N81c+_k9t=->)I_F2@`pBUM@R2E[/CkU,B5_mh3VZ&u\Ig(=V10FX:&bf0\<?FB-FtUbCtYJeB1848RjZp-flmi;+CaY*&pa
%rjEbW:h;R!LJ,"Qeg1/+"[6[P[dhLsr(/[oB"](Mdd::CCZin.k"3qU$%@WVDI]U(`6f3@25\G(=!2gkqYW^NPdE/_Up7?YYe8N8
%C/jqoJdnonKBd3^m3gJHe6T[FNF&7s<1aXK3VZl\AL7'ck>L,uk+Y*;8cg-=h4.\oJcJnW4=&!,j->:)F1"/]b;ErC>\WRFp.fS*
%Ats^'j@Q=E7rA=%C?q(4&bOt)?R3/In<7,%NQC&up5]`:^VX:GRAqrGIc(j>'K8Yobm>r_>,Ri?2g^Z)X=Iqm)]&]B=Yk"+QCQ')
%kodS36\VHCZXkF0(*\@VUi5'-DR^XocX<2g-f:Un"0\@Rik+9G5qg*IL[mXY&8qQmKBjMa8)LL.P"tgVm4^rV7NV<h#Vm]tdi*Ie
%k8lhKK>E:l-_:Da74fVE@d5Nur3tu2N-bcB=_0Puh)Y<*^D<cU_&aLV%9bNSgSdcpheX*;$"`F4BJ%iS4GN!:U<D_=U<!&A(-No9
%rpP@:X%33iW2C^hbP@IKR!e;Djmj.`S8"EU4WDB5F&U;ZVmO[<\ETcbQL24CbOQZ`#t2t_3?E9Ef5S`8"W+'#)ES(GEis%PHcC*7
%,pKSR=<<%<SAVl=]/eVg/F(3,#s0'nj_VT_$K5kthuj[3T=T#`XtNo,&'Ro_*1@/^9#CI;&+J&kQ=^/R-CF,r$2n*WjNG=b#L0tE
%K%/L:H6\coZ@+[pfX@6QjdEh.P6<[q[qFB[!C-[=YpD+UD!W:k#1OV:.'muT.?$$)^iQYtAHtuUp-".I),T+o<EkA9"a"#.W1eS^
%F:SN+;f`(8NOne!Nt]mcq%!#W'SL&@277Hg=5Uo34\pM;?TBGB(8G[*ZY,jaM?N$*8S_oP@tH*[\Sl7Ma']Bd!?29Z/Dr/#'q%b`
%$]--JU/8e;9j<ef(tW?1#8a<j=3>P79iIA\EVb4$[*/S'W!NWH8H8uDBbF:9>MmnoZC"s67gNJ01jRT'"em.X"+/slO[KUZO8GM'
%M?\Qpd[I42U,X\`8uA+1n.MgF?%JCc5uHc9jF#;Y6A[>AQh`aqgU>3<)`ac.FmR*\N7Pn"M#u'MR--":`-]VH%QV"]@'0XdFaYe*
%Kl`q9@bVYkJGZ3-*q=GFf7DMHkutri=u$:Tf`=NX!78qmptD?FAP6.@<"<l1j\!0VhE9d':]i_OGm\Yia"2&mTGDWL@siel!<r5I
%:r!aU#7\_A3B$)/lIE:mnGstU%hWg`%aE-$QM!sF8j?&$[HV`OoG<OP^fBG48_"+E`ut8:)Od2OFYtZri1S>^7nA4E_FGq!Pt]u8
%#ts%D[H(J^X/Q4qk'3m.i=SLU[Obcae2:[Xmg%jqN6kJO8]#mPK7_3&os$#C&rQQS4Igp(`2.W2Qm+==/sFe?cV;G=&m3Q(ad!qp
%^c3V^FrW1hBX4;!@.&oQ6"bJ'V8*0+((rN[D1pmkgZ/srijes^[)7/]18,6*VETSlkRfE?$j\.=[DkAT@7d\uj;8Rrg^?ePe&1;l
%#u8cm9Oc>!LR8Wn\faL`1K%U^#n<sT[m@>D0B2Oh3sT2uJ=ne4#!Cio7c7Yp=hZC&h*s[3FF7&6Z6?<[#/SS;8+;)FM@0_AVrMaW
%60M*`'1$"fq$_(-)VI#S,Vn"BSgTmDg.",2T:Q$gjj:pj"Q=DKAS;qFEQG^:KTI$;%uRYIGm(f`Mt6rqO*ZeA$bRi4MEhk%AsTL!
%.>M,@U+"P<K^6^e@9b3Y$K#t&@6A3!DG22Wp-9gMJPqA2\rpg<3eFE[am::IH`jJ7LPblG"o,Xk1SYIT:nbTKqB5(`P]7)aO;&KK
%bFTpb*J8boI!d-F"ZnmdVBf3hPihE:B/<&7\'Wk6a3@6E3hQj#LPQ<2&^rkcKr8>6Q]d4ZcY@S>K4.YcS.\]HGU93jN]2AH[O(+s
%=ZOfN?263KPG;Rj0ZVe0OQ@-X_A\jF+GKSmfJk2\L>;m.q>_Ap#QftKJ:r3NUb;LbMRp[6'udut;Ab"Fj%4C1ESkfuig@Tlj?URL
%gJPesj?qDf@KL6t\7H_`,BW0(8MjZlf2JGkki38s?2Ze-PM;8eppk)V8USm]o;%fm6@Gq_N/Yi+aUAs+RH!6D$q?:J$HrQ\pnTT/
%%\Y=k".1jPmE3Q)pklC'PtelJPYR\NhQh)R;M=1!5qL'BA,+8Figp.&Nki]#WB]&$M9PbW[OL:a?l\+Oq"g?HI.]M(K2#P'ofrRm
%kSP3,o;/<'`d8\A*74d@,\:3KLO-1cfVhLrfQo,JWCS+<\X!LVY4NdG:(fi/D+=3/E/9QoBc'pI'X$Qi_n_0t8ne'70RC5m#m#/4
%aINcC:9Ubk!Jog>W=1\TW$du55A.^(n8T-oD-+m1+Qh]p@[eS_E<7cX4mcu-fPre$il^2b@Jf/XOGmZU07j8/q3#ZHPEi+X>Ms1`
%\-O^k3^0f$_*Cm0<<PBS#!N=4J.C13><G-CL?8"mW1N[LbUj'=nE!V$fSChn+s9F5TT-s"q!>LDQe"Jj&7G(bGe#9UQE.O2p99*S
%EUp7QgBGD<9aXVZ8KnK$,kNdL#E@9s0c5O!1_Otg:XK7Ql!cA-3qH$U2OD6X18RP_0J9.Ck/&J2@E9T]#C^_c2%O.Z%f).Li*m[$
%=GlWXnsH)=>SL&i#J$$JN8[G'^7qc+Af4Jd>Zuh'P2CEDk?o6REcF5!=)(Hk$;5ob;+"trJ$$QNAoK)d>./9@qJ_pLMR^ln+<R^l
%\MQ!7=4.P+!8BF.YXG[^kWOn#3!J(L.`qn6,;>([k_rp(O\j\bPpAHL,;I6(>_AW\!lJX:OVJ4.@p;8[4UrCKj<b.k9'OEQ"#_l:
%;Sn]MY6<@<,3q!?m_a0-PJdI9hbJ_!Aj%IA(OuV,.WMoPLX!0^%n8Ra4^9r)8;<r5Kr,-]d)2QR7&=b#I7Bl^l"_GRZt0W"qTY:"
%3Hm=(,QeHE!NSa/r@qDNZl0eg]&Xn];ZRB"+Enk*A."J-R"o>-H?9B?9tQq2W#\;B&np8pC]L>/+,?@6BS!uX?b'/CYR^1IbVq*s
%$1-F-M'@X:8N'3[o,:-'\<Y2Mj=:Ku#B2dcOMItB#m1YpD+@!$CG9Qj[U[FVg`hG$E.'-$KnEn!#!oubpsJC'%e0RKNIGm\*F(@(
%dX2>lEQU9cm<D/6?luV)PugD]@($,hlq.!SWF@32SNt6<;PFOu!]RoWXCF%n8L)@XWC:7Tm\@4&gfR5Y2#@dH&5*7>@PA2lr^#=p
%RNMG6r[J,gHJ2jAFP9Iq24,s#]3Nc3#,AD),T'qD\2"JI9]8k`%[<8lOrk3DA"/e<DfGT8lj;uqq';s_h`dC6'c:8#,g>j#-AV,A
%44WL+(a`g(CkfN3'WMCR)imZt3P$kRGbC`nVVQUpFtZ1!:f8")8Y?AgP;4tRqD\U@5mh.MXu;^O(rNo>QRJ$F,Y]RAH0$pa0X0^<
%#XQou\bm:LB2>Z?-p93'&S(kf5[Y@H0.)_]4*ZkGWMWAC&e6N(H(?q)7rB".BM:q5>pMY>!I[]qI#JLe(akYq)"DUg3<mi(3<KLl
%F_.d)^gNFJ+u;8:^2Tla5uV;^O#TSu];6!X!0"?IRII-cM!)RVJpkY%/\+Fk)IXCM&7H7`bQ[Z^%#4`+-I39MA;o;!#>b??fCG$Z
%Bu`M4bLC#(2`S1c?rsmRn/*1Q=@kjj@m1A\N[`ppFMq('1dN7G-;L-[^g)f7%7":Y)b",<W\$Y\?[JAp,NoQ4662\C$($E=[du2'
%0D],H"ckju5VO`,\I@,aOQ:seL8g<3D[%o/:Z<'O@KH=i2G/g`:obn'/r$VP-P-*qKQ8n[9W!cO";q-VLrR/_HatY\OFkFO@kqdk
%PI3Z`.9t:!k=V.GJ2ZEKiF^"B?=9g*(jS;%N+_HQCBBHW(HE,,'=ed,d122%01YbIXOK^oe:CqrW)"p[j&m2gH]/M`DG!V^N;H_e
%(hpfKM'I(A%RlOK(iU8u7mTU,>3I::2#p(snJju>b[HS]E\nVer#15paRsNma\6kQR'n*Q\.W+Y3_^b$[aF8GZDD9`^1QErR!N^3
%Fb!?)?%.d2iPZ#s[7To3"I?9&1<;M8q,fWp:\VrnZVg=>MTuJc.F`uX4DuNU`s8?N[UL9FCPN3l#&K0/!:*as'CD_n^dc@E^t=J+
%WRqFsc$>7]L-\#k%"^dnL#^4EW!NMc/?TGqiH^L)lk1YD2N.2Nba,#4>TWt+-A??OTPO`$11>mI%5nj70LXtW\MmX]i!5q5mO/:7
%Z[<!^Jhc2I8*eO&\f)o#79C9j;*[XsaQ>Ai%>MUH1,`fiFGFRDQbm^-NsS:aqV&p0+0M[KqLW.W-&E$W6i!<.$L]^*H%HScL=fa<
%;)\][5V>SS"uL-f>gMSj\=2k?lL-/1"WF?1>Au;[\ME*l#W[hPh^;jr-.t#$1`60#M`qsPC7p[\@2*1IZ.0Q9oo2/Ed@4Y2F,W-O
%@0<qESQq+=I#LrU(ru5<,SW\/R:9V*F(q0h(sc<.#Rm/Z:pB.?K1AbYU7`)PN[6ds#!^;)@#tOR]#td%3)b.s(1pl4<Y?sZe-_[L
%;'-QpPqZ?Q1ln>5O%I@]6"N?ZSqRfR_P@=#2@kBk:ZLU">^9F`Tm('n&_NB].16h)*g>ui:+TaMP@LC`\rD<2;VqQnpr$1;AHhcQ
%qZtC9UJ>3K,kAHUapB+DmkGE1e%rUKB?ThdXZc^h[`;)M@)*`l)7ctbckNl$7upS^f!2V4ig;[aHBQZ,$r6k^o!t-(b0\EVR-g(I
%KjhcReXsli:ng.Bh:SPSa>i-l%:KYK7gDC'R?#2-3@]L^-Yf,m[L*IO*l?803O5XQg"[Euq`#9uJekTVj*=(A!/pqITH(`e3_(:o
%Hc!0*JR(i)(ZXtQ68!('j?LN5%`UF6D=1$a-&q3^__=9VNmeVKU4HQAN.'.<S.=;$27bnSjlfZhR_ZEfPLWI$RuYmO%rQcXkX2;0
%;\an[0Un"6S=f%:pQNCO[RC>"#a'X/K&*;+LH?u'/84H^I,G#gGgQk7Tt2M0Z8#Ho/$KI,/#[7A=N>Uj_=4#2gm=T2q-aBt0m?)_
%HVC/o>Eg@PZXfXoI/o34<>]!U2Ou5*Ee0o58rJ\^Q#m"D@EtIeW"gH!:;gQV,?[I3c:Fp#;_UU%$*u#r)M`;qQ/[u1UN_cR4*E%m
%1/L5M\ult,Q4j>Ekh;mrf:[D@X,(0Y`^MC>JIaU1V%aB64q:/F8HC4pk,?NO!=$g1?rDrf.,$!3lX>Ht:pf:YJ2G=5Di#YZaH@@W
%0e!\FILp?C,kD?X,Yl3-b[HM\Uqs8S3Fn3)PYJ%=$d6H;kcX#?R"o,pQNu&"\LdNdD7N+X5"&H+(kqfG,op5)diutg+o?MAcj2NM
%"h&Cq-NQRn_H!\T/`hC'PhT`#!:*`h]!.t+@"S;L-=eYoJgp>BpgN0mc2Bp^a=d6JE@5LMR(FTM*AK\D0hFF;`oQ,fm[pC8S/@(U
%5Db)H.B@JbAV^U!+1\7jZ@Id9l=^15*#6/M+A6GPLJkW5fp"3q_d)1[L.BV)@`&<cZ[?J+%]i<85GjfX9a2&EEK;FQXu<c]i%Rrf
%*$0hhGqu^9FI5bk*CbAq1*4nq@H*7"@hR;=EC-$>E"Z^kE"'p/=5q7H04OdIl"]LV-VfsBB"OJ,Jgj/afc(@]hY$_R%]1^;&U?2M
%X]b3i*BJdRe7D<,X`S"Q6ubQh[=u&MYJ0/[f-ISRjeBik0]qD[Duj2l6O'd-bgi^M!=%#)':jg\c3`m_+B?c&R7"b[a?<G29tah?
%?sFbtTdoOld?G9Re/#o?qiri^3=2f_VVH5!G3#Ig+P;c]b4K%[X'M3nLZ)8(OA%L1Cc+2rPArY:1F]8SRQ/:lRY#$W)l$4O$QmEb
%^^,t(#b1n\:nb[g20ip@"SQA*!X\4_8sRe$U;RY-BdGE`jlk/oLM)dud_\m'4Lj^0Jb1-do]HQtiXpq*aJQC72Eo]YR,mmt.&ded
%'J#E?_aFZJ!e-0?(4?HsJe1e-)##bjZAh.D;cYlN22&f@qB-b_,E-Ml;Zp'0P`\a%GUU"&\)l8JQiVU8'ktN7169Un.bK/\r7Ud/
%/;.`<[O,n6&noB**>lo[^8g`q_U50c%I2J&AJ#h@"L]mp+FHX7+HK.ZAXkAT+4L>XItBGM'jdoBDu)2iNs=VmLJ!^4["@iKqS4dZ
%h]o-.4En+GWEl,H;@C_K;"R727O%-V!J[Y$+@f<^Q>UN4TB&I,9iKBI@o@##qU%JVC$O8HoY]4b*&Rt=lNQdBR\on,Ou53>/MKP%
%V?Z&p3ZCA<Z#Ve710dSt7U&_E[uF,tdpQDU=&c9?A[*$iMB;@5\FfQQP;mla4/sBl8]#NWnZ*9mbbMTtY/$?`67KEL<&?7q+*F@1
%)XW$j'B$UHO6M>TZt1;_S1ip*$H=IPPWk$r#H!2F6sQiN_rrH_Dh6Ff#m>UAUQ2%QP0@KL_udBKW<A-qQ8N[/fYf%3$"U>D#KCeP
%at2k2UW"V((O__7N\t@7.RBIJ-Fk<o'p]3#1Y].@c'%>mFp!M7THn-8C?q",N?Z8BWZkrA!2cWq8p1!g+ClN>baB<7Z\>-^.oVmu
%g:kqN`is,G@LDJF*2\%dD9;l91$)"b7TT]0+UY0I$G%CX<<PgY92KI>FDEB.id(ng#D^EA3V7Sce:WSi)m4P'R#XY\;T!L@[)3/1
%N3tJT-q0Qr0O_&#d#$-U\##BW37m=XBEg1?`+XIrfJ%n/:Y#&GBSPdB7C;+q<PRf\.Y*D!AJXkp4GmGq\59KuE$t(.;&'*D"V'@[
%9-ukM?%<]iC['PbVMcZ4:os&WRQK<lD+C]b1M(PL-GDN]ra5q5b.OO%Z^B^]bl>Hi5,pKnfX+?^1o5)%\?S-,LBJSA=9`mt0Ze!b
%$J5LsBB'D:2(`pjCjht;:+_[p!UIp73k\>K"oG"Z35u4:N8pF2&k#[JjH`E#:;X7u(X&0dA0'.k'rbKZe"l]uDF/me9+spj2.N[.
%CeI[F<M9C2c??/M;$&UH4g^,(W?O=B,6d?uTM*0;Yt^W5Li`'>:dEWhHGG^M[0YCeV%4hK_[Y8iNKJ<"V\T9p1FXY(D_]V8-O<`g
%Pj-:PFHS^J(@cgt9GD[$E3:^hl**Xp0r]h/WfYc?<,gB]\=P0R`R8gn"T(fm*F2g9Qm=\Od;4Oa5:.\,oi=C\j.[b:eX7l@fd,&#
%2fta]VcMM>Vd<Gna[JYuh=VGXAeDpXQFO"QZW0qfC8#00RD'"p\=Sm827%E[[4=liWRab+*;"fTdTp!nVX&eeV:4F7]pZ![;o&U4
%ZB5Ds9W7X\6&GYPX#I@!QDUW38<Q@BX_,c!7k-LYMTi:F4,,@J'+2g"O%Rol\Z,n(=gk"SaYZjD(VLn]8UJRZZfi_=S'"Z@fpSrJ
%%;K.O['EP'9^:'jS[.`Y=(tkSV7.]](,CJ+M?m^o4EE3:+f>]R@3i+\iQT\W?RM#pJZ@mH2I_u`3<eA8aWV_Ml#Ih+Lt:+k52Ndl
%_(P9iP@,L::P--?Aim#nVE*pW':=[TNgfd2KHKdejG=C@(TS88I8D@QS208DYhL^1(\=+KjlU(GP3;,AIBLIl<!&na8mo4X($f7Z
%\%G<:YLeldoT\^8ZnY+%co!cpS>rW$V(-(=3#!M,nRS97[4uZSDJ5[u@A^B8E43K`M03WDaTSo:dO*.2"pluL.\6c#n4k+>'.)V)
%_+0o!2AR.OMbnrL/d8cs9BIYNfs7JFU1n*t#Zj/k']q`TmjLqC1-n&(6ps2@dfC+i1l17fJo>1gW^td\)aWNfKWd!?E-7ZY-O[YP
%.bqHL,mm.EdE6H#qI'_i[9h2"+Gm\KJ>ts%)JmQrAhI$58_e,EJu6Es+&,"C@g[f^gJYKqJ:O\*HlJ.;W72,HUJ5%dk?nms,`jHn
%)<_;=ijNXA]uV)>)DTEX#2mnQa&UQ?Km/i_n-3r&Qh84(8qj+i2\/QsR9X:OOi;6@(?;?O1!&(5[:'OL>Eh*%W?WBn=@lioaJ1m7
%@7%8jKb8";:'iW2gHiBe%YjpRd8Dr]b1a)4:DKWc^5@ls1gN/a`;4+A%WRF;hOVG6h\_(C3+P3=#qj[ulN:NbqO@][.8l$+E_WQ1
%!#/.3'@$/kKfR0OjiIaTDTPLQ9JT[Dn_tfs<Z/eKbjCB]Uqe%_Yb#[Q4]`BHq@krc_&]5lr$b/c^W,SCCo4s*e_E#GW84GgHl2Nr
%b.=f2&40s%GbjH"Oqds)c\i.nokof/#EC>Z7;G\cj'ZU_QXKI([8:AP(n$\3AV$cJ7Zt`%Wb@[`Zdo6r@u-/$4&HYZ4i0p/&?P%X
%-:u650a^/'Ce^D`P*6`A#BWq$M,e.C>66H)Yc3?kMs^^H<T4F*Q'(`F5))rLLG;<Mrjc-7XtMYPR>*_,<@eM`"e'sNKKrSl@BKVG
%'7q=A-mIf*D(64O>Rt>-\mtuFKBU[9$Ccka@s"pf=:3G0k$tCH,>'q9+aqQMW=ON%,SEA6:"_L.=g*X^q9D@X(ZEDNg/[YM$pb3m
%/r$DaLK^'^Y$hr+f4XX*Y-&3<duDP*9OCr\bGZPD/.:[(g_bRkbNbR["&',&gI<83F=.VY7NjqGEZV7*ng":$\5;W!H^"bNkc-I^
%2[6X2$sf.\.cGRCIM#X,H'fUFV)rZs)PSN/"nR+3?"b@JeqPmr$^>5u.TN=UWbS0/!n:4a6te[Fkkg$D;49,32Mp0%=PE=h\l"iU
%[jhjU@_a4OJZ:Q>.>+oBUT-.5Z'3-9Z78SRK'<OQ@0dXY,<nXVdn&&Y@6M2\36*_c.6o!=-,BZ=:>8=*V;XJWb&^^OjscJ*EQ+Va
%bI]hiGX-hf(`V(jk<5RO+"J;bdM7mEnk>Tr':=p@K&A%b"Mt@H_3*B=Y'([[ef@O$d)Qqld!D(Z(>Eo;[>IT.[oL*pGBN80^gt0)
%VQ=dil(=W([oM)K+BZs:9Nr6srD;K$bgs]Nqt^:0F1Wli96MPV-0#n!WdTduSm8oY66DK2ofTbRZFEeu4K3*THl:duCR\]K$EFZ$
%4Mdh\]F$,@H,B-#O5)?=H(s"M9EiunK5n_k^`7JHR#]Q+R"*3R@2eaB'g-J9&FT.g/2@E>,mdQWaatm_q1B5h*ls3d?dTkbf+Jfo
%qC2o3%Lh?S-`fk*;<7ohPQ.2@6jbKl\ogD?ng#K;I-J@DacjFo5rdSN`KDToZOMBO:`XQX+\]fsWXn.hh^Nif6?uLb<N5'$<i*Bl
%\5!)P9:gNfXr6%"5p]<e.^<TOY7%/)jG>?9Z"TAKK=+EUMX%,Bl3,bYC3;&p`0QZ(/nQ\L?[-hP@nI/oV*D?(@!he9I^:::0.<S@
%gplDObspUNI3h[&M5ZU@?1FY#'u`_q4Sb.+I*ChJei_pY"J33^/."e(aV0)&:KYCc-tt*0H33OAX:9BXl3SFYS*oQ6<&e=*0o=9`
%eAkY`V!c+hosHnR0O6fXUTu7i!JI[_hH0E(QU5Yolb[c"'3=\a72)\gacWC+YhUQ3_YCMTdml\Y4hu,<d?CT.osq/kMFsIjgqqK2
%T5hsdI;HJa+"CeT42r\Ma'S=)L-"FMlJ+X-nt\lC.;)ped[2eBO3fcW`DESs8JU\LXqQ-ARO9Z%`Q4PP8(C>$6YZAq+;jUVHkCRs
%-4#N>$I]pslZnPlVMF4![=fK*;8REL:CMF.S_F.^:o1mU!LfaYi0gIH<,FhJrXfl8.Gj.V;D#P](tG-&)2,XD!]d^'RR!hK+Hg+O
%2?u5RV@sSh3=LAu>RiAsR*!1Fd7moN!qR*m($O@rcX@nZGS(DlcnObFORebQ=KANAk"10TXWmi;Y_L\l'Z*Q_0iZ\H(_\^U70Qd8
%#+LadZ@oBK+KR/?6OM2gifr/cJD#/t85(-87WXkm71WEp#Y?,1ZM\]Y=TSmDLMt\_Qsjf'0#57&<C'5f'[+tAbUC-E.HbpmBp(Q/
%C%amVZ")XX/G5n,H^2m;V+*5H)R&$rehVenH0LWSf?-(Q'F2rP/RObhP"@.>GY>?BPNQ1fnM(`>[Tl&b6HtObL6`YZlUd./a=XL+
%U[&"uN+CYRfH^Z"%P6/Z31q.3?,&$@:Z&JIEa2rYMWs@fI1'g(R1`HIPEe4sE$Y)l?I*>$Qu2,OG=UI6QitkQOu,5;A2@68m%C+B
%UY@t(KoO]V>C(DDb8dZ8F=jML9-Ansi0XU#L&4upH&*5V,s><GR7'm$=c<^V/A0rm;3qX*VI1h]-0*AVI(I06X!oVj>mipL(Wb^#
%JKc$Zhm<2g!jcjZLd2l;Q7QT'A!c`n*LgqBp!i2GlB](B>(2I1P4Hm'1c'i$,`rf3'P7L)@kHfYbOW`:^p?Nf4mO";<7s;9G=]6J
%b/gk&gR.hd!<cU^T,Xt\oX$I8aX<GJW`X#]Pi18?6a?i8;^>c3a5[VR;(6EmE^!fmi=1@gSAuo8EPW2tK<#9JXE,#Spld^E>gXfS
%TS3T^]'<2E3K`snEO]Xr0\&1_!ajOu/ni*8G[D+jJq`8*4Fg*>1s%gM^sHLWAPRR&@j6u8pJFrGYb&F\+U6uG=3T3[:9q7Xa/2mE
%V%^.od'_%rk<^ZFVJIA.WcZ[U0Moo'U85mt=39#^+u'q\2.\45<9f-JV^<;N<9b`AKL_9<Fu_0t_U;VObj,Bu-5NO9@he?@X*0Xb
%"2I+bW$C+D(^h*MiQ6*fFd%F;\Q3(J'2i+LGD=82U2(#S.clsR9Y.a(,*,;4`nA"l6lHITLe"&9/9gY1M*0bna`8bea_\o*gkiIg
%qV&<95(%>$UJ5eHos*(0iK48B'MA1%0fT;_16=p^ft(_H;9qiGPPD;p<<9nZZ;k%NHm&OIg$#AD;/!#;"WHn`4]4QMPr<DeY_=uu
%Y)A>'LK_XG',dD8GXS+Z/tt`<<%bnUI!8./EhPZQrV1pi=$AEmp[k,tWkj]?o/8;I5R1]I_b66W!IDttD#KG.,n4htLJ?Dr_C6o=
%ccJm/lGc__]$TEAcP,g/grDf-q;dVWai8*jFP8gm*JLq5;j@VO]-Q]i*5(CO\+R(#nj+/)*m)u%#5#hDomkVfksiuO;8*FpR)Ymk
%Q[CZPm4-_b%uq.)I^Y#L&4@X@(:s@i,tCiQ$Q_Dn!I=r>p4-4$qF3]\$k('\@jDN';IMfnd>R:X<o:efNhWOJ7=OO`-(uaK:kFCK
%H-'(rI:d1k3U4mmJoeL^9"h'sl,kTX$;1FTC(q70Jm'pUWLmJe'r=$if@nV#_"M:f'4*l7,T25\i'orBR#pI@`^h#,[CUn1$]/:O
%$Z@iPc\ol2QY[-*<>GTu^#Vd/[7qP%dW!s,FTcBu0fsh)ac``D@GRD:iK8%03=68=L*tqH@F(]!YiIVu<IC\Tgc,*bS`\#6LLde8
%#.Uerj%Gu0+=ct_O"UgY".m]dgIIP[F+``R,lNmZHu?u'U?0Q3Bm`b!QT>WqHh-S\H=][F_W/<=Nd`K%!QSJ6^<&^f01l#oGf,&A
%ki\:S_4o2a:3ss<)6"\(Qa,e6?=N&s`^8f@%9$[T-T_WtcqRc^9g6DSC#-cX^PACgne@o?R=0X#WO?86FP_\J'YV;XKp0V+0c7l;
%2-FADm!bU]R9GHFWZns*!DZg%9KH#BZXd+.IY::k'l]PjpBm,24j_G`$8Ya:+_U?"9RUFgV^@MU,JN.=b"7F_BPb*;'PZ)D1id?&
%]\QVTcj2L9d#@hS.TqM,1^4+N<<\?t>h>mC+(_:-*f=hM9iTL'3^Zj&[7iG7ZE+-[I7r.\:^rDed'HI.I&Ir%=l"_0bZ7t$j/^2:
%U83VX<#AsWNN]hlg_?kd,$G"QD'gc-Y_YbKq;O8h>SC>TJVbo8kt2+^6mED9H,O$p/k-M?RtEE-:</Ad'u?<LIR;T3fSWW\771#`
%NMfgm1%fl?ZA-BL4d]-?&dZAnb%/=#<#C)oNND5.7B*W6A.ag)iBkK%1:Ai;KB'q8qVjppU2a1K?emZ895('"D4asf=rF$Lb]H5c
%XK/80Ft;&f2,1lEE0B_)acC/:PN=R*&sBCj[?G/YQ51[.;Qm$X7TZ70nj[@s7H5m&n6MW5YUM%Hp>o/[XJ6B-Z0T!kP>.M:<,7gK
%Ui@,(9eM3r65iF?4;E%7GFN].*r,7L=[s]<K2S0jUE<pgMBW'?6&"jZdVuUqY0_l\#rnqD;q;pc0o_JngQt]Bq,'^"/qL(\'Tg9j
%^4K;2]e5DoKOs_6X!H%`,U"Popc_5R9]IU+\MEQ/MJ6$Q,f`dT;eT9,,;g:8E&]fQ0h-dcfZ$H;N4k`Nq?'h;D!ADcAN:4OE8-H>
%B'<t0aYo_CN*#[/\sV,oRBF;uJf7q+/_p?R),%f@R&Yc(&o);SFZ_KV9bph_.gb[6s-T$:U3q^SNN/j.5D\9gOt3[6Z5Tgik&`17
%Q.<rJ.Cqi=5@#SY-sY"%Z<SqX<We=e\cY`ochNt*[_<hC!CgNR\q!qLe]>m$<VhiVX-&Gd$_?WOKf-GHPfl_-P6fY21^I&[(gh->
%Y+^"2h77s0U3ddS95?LM,j"@?)PI>^Mb"jif&/1B8>9LpX3_%=bb^'s&jWObNj=l_AN9<;Vob.12+/oq-:Z,:)I"kFWtX*Zl5J?.
%91b5%;At9Y(o/9D:gr_`21ALHb]H"3Y-1]6_n)-k.^1(nnLuag_e"N2[>t^[AVlDL\.qd2PR\GWkd![(7VE?n[jc;UmO+GMh<2t9
%iH"d)dKHl*6l5B>pb7&C!00r&*%reJd9PTa>&@DT@k/>a/c@A@<+@)^5cTgBdY8[PAFi_kNR5Y?QEQp/Le;MtC;-drMe[*>l*;\[
%;lJD>^RoB-q`\Q(:%VIHQ[+N]N#d1Li(,V^[H'dmW,l6TRtTh8%(]!K(XcA4%u=IAH%+'3&m2`tJ]_k@WAiZH@$0T3MJ6TiXs9Hc
%+P'6p*YU&UUV4lW?$i?='mD*L9%De^-(m2R'?)njmXQph94EX6.%g8P6&,D3rJc3_g=JomZ2dB=K&2FBT;)`5@N3Y@Dd:Bs*8MYq
%SL&#ijD49f+DRl;O5jsoJt(/?HMZ_NM*>QLjU]U7?XMaUK"DWD+-SIqC(uL/4r!)QE>_Ls6ae'OiTU.@>ksn#</!]_:G5fBQf1IF
%TW?XT*KD>KM]BNrKfHA1gX@K8&rq:f&]n2rXC;rUDZ5.Zc=Q1)A@p!49BR<rdkl4[pIiu8QI3,P8/=]^1b9Tf7eI]3#0Up\N\T^Q
%N*In!gg#,8=U##Jo\0+2b`%L>N0rK>`o=M!DpAE$:DO1Ig/LC?TCBa5&(X8.T*''KT,ps=^W2gHdlNCs1/FdeSed?]LMt,a<[VDA
%Ed!LU$*f:+-Buenf3j:(d?u?%G:"*Ie/g=oVc]ZSCT99DLR#CGkD&(ls6#dlI!`?lYF,0U*'F&dGIXA;GLW3OhN,IX\qAQbf]Al_
%U@D.;,^O"Q,!CA\iOkKpgb4a1rcde5SRGpe:GE[u]R^n0q)ul,a-k83q"H3&6FH7VD"U/V4O&-'LP2duh1_dfn!S3<VjbVB*SgC,
%riG6Kj>VLAjcT^3"s7;6PVmW85"+g7hLe._FnI_OC#rekjGfU.`\u4(42B$NSi/uWj'Ar3k!S4tYc7+"H$,<#I!h)@HN"2qTM,oo
%SZZV>LY'Nl?&2TS3b_1Iq&SVX#UCHq<U+#6fu%6%12&<$6T6?$AQoSTki5?u_@_-*rm+_pb7&NB9$iC8nO[V%lJ<RTVQ#%b]]n\k
%^]cq!T07Z<AcQ*qgjsp_.[U7%Y_pS\(77Nc%LJ38_6`%@^$TIZj,BbfPT<)-5lqn-cShi*JSH7>o$?gQle!N&EAm7k&$5pt)uWV#
%%osuT501F:DJT]5%kOea7m0IfO6Yc'`.gMZYT+M\dEoGIUh+\X]08p)$E'dZqTtrFVT"]3]=E`I4/:FT0Z'bsj2bBcS@LX<8_f0C
%>N3!jot_-W-#-'>]n%@524Hflrkq0Q-3>m4oQU'-XA-eCc-.V@E80/5(X9i0.3DOrROT*Sau*;jNOoi\FCV92)QV4P(b7t,2@2;H
%P=`P9SaPUqnXJ:XPRR9*6)TKOB]h>l"J,B^*HE3K7R$[@I=JQn#@D[e/cn_VaFFBOAU)Lh>o)5RN>dS9_L2`N#EYZLi(WM6H.<Bg
%#0C1[LLbX`:OqqKEF(:X(r&M#:.LG*>O1cr8Q%>DD"L)UH)t&X7JNup[InYO&(#kYpVJ7P1YZL108+cuE.Hjtm=5\1e[n2?+Zceh
%Rdj-4=gOM(#BiP@(u7J@BD9d/_S@!_;](k.LUn:l/nY"HX\Hk+Nd$Ydm3+ueA_S3(WPA*^S*]0@h]H8E<\?EDSK/$k;WMR#7h!@p
%bqaAl]V?k,"s/raL(]HojlU"L#CE"I)BtP[fH*,/@Tdp<N+*r']kL`uj?kusNb?sU"(ZcnAJZc:F>Ms6o9;li_(Ad/5Pk=,ZSWsO
%Jo?W"mg\k3E_om!YM0Ug)^'R)1L,l?KT@^8h!]]OCsJ=8bD,uu_l)B'!5)1L(66eR*JH69mDF+Ab5OSorQoU\*uUBk2gC"e-Irt#
%/CpU/&8[0HnJb(ph2QpllIcK]W`[aKB85HhUDWMh)kq(3D7+_lbjGe`1$bI80N&baZ6>ZS[[SW.3SG$)4dfKc\.H3SFe!gb[VhgY
%L6'\of:R<3[o>W`:-N)jQs.SLL?Ls'/47J0TR<>YlkM(,PTe`lGrQL%eE/@4/=E2qoK$LO9^eHJPJYsl[9H3A,0sl%D>7JI)56#a
%Wp_i6c/">V6)&"IBGfRjl`T\P53h:nj.+n`Z5(TJTlEnr>K;-.b_O9ehqhm266@D(`4-I.HQr:t\ZKYLAbR?'\+K`fVu@b*n3a/;
%79o';#koK(Zd3eZoW6N#LO0P%CFN*XobI`T8/-bA7.RDHnEb9>U?l:YaPuC,J]8e_OUQW3&(.bV2WIl`E(I)'P]snY`ofLOhr[;e
%B!*t,E[.=>87!d[=62n>jEap&9h-7Ja@XH^cd?C_+!Hur>[SMKeD5qZqV9U05,&Y:YS?'nm3O,(#NL.`]+^<Gq7M*2U89VEEb/kh
%hl5R.O%"&9dEJHoou$4b8fM(1+QBONb]E)f6'V#&JVRNW6J[Xl]'K!P:H>Frh:!&.@EH=k7\073Po0dN3+Q(G"*#$>N97"XHhgk]
%XOk&maWnV-")aiW.s$G7/9Psc6R_jM#+dj!.LL;21+l=mVJl]Kh0:doJ4A@%g*=;T\='s3HS:4:f@NaCT,>CW-30i7P@RH#e.tTZ
%)67KI6.M]Rd"!gGI+aDl)JJp\*"kJ#M1l_;3fc_]\A[mpeo^%E@2q&oWr\PD"VFkk)Kq%RDNJ2$[&a0d1i]OjQ,fnJ]Ir"CA.i6n
%4b%Pj08p2#iY5h0Kiq5k+fJcT4un]i:lXD=!E-7EEi/`OBp85s:n^r>/#L^_S28rqX@SojTAnoMbYDroV`8MA7SgQ\/?N=RY)jVF
%j)ru>BAohID770b;gPDW@uV6c"gWnF8&e:5qcSu#gH3e3W#6GU8KMVk,"$8H)U#(Z5)lqdU82EV"/LWG(#0_`=SdN:[rG_fgg[2N
%cOK!lH3p<u`:-:CT1>e!Q1`u4%@emnePAL]RgUY"LK2R5JQ![/U8Z*9:>qU?N-l=2^]FnHr#W!lePUS!X^W*o7A`8;r"'EM5S?k%
%)YRkCX3.]HXE_qJSVU"nn$0*hFiCoB6laoP<L=N3.38IHO@*)5b'ou/I:nW4TF[Y&Fe&A0p*t<9d]MDV[f<$p))g!W`=8;,)`lM4
%,68m=6Do&XI!j187oeaeqb3QWR<E\0=28R?HVMLTl*n(L$]'n/*K;sN:G29hM.<ZLbCZWCo/LWcc',tBQM(<9<!G#NHEufj%!7Bh
%?$_I8c'_nIBm>Z0l9:eS*AS)XiY,9e>4g>:A>P\04I(!n,VnBOPRVF[2"MD0jZfWpC0\U=6^Msi-U6__pk)Lb^o&`5NOPrAI&cE@
%N7)lsWp0X".J&QKYO48jPD/2q.7;SRh;k26c;/T%Mi=*\:K8JnD/<=>.6PBq%m,4qF!3_YkTKR+Y+1aT^1(lhmd]PT&&md\De@I'
%Z`;AjRfCb)1!q.AS1S"H.Qp1Ngp$BK_f']k<#7E@b3gcZ"5U99.%-e7\W[JEI]E1(CGi:CE`0mV<f/[3ftu8tl%Di8hJihY(HuCj
%a+r8%GTf7^(P'pVXcA@)Rf;>`p(EuXGRU2o5*Y?\a?@Gf*u\ju;p!LQB_(BVPTI55K>8f$kA"b$<pFTc<:rI64--?l=FAJ9S8Rgq
%nY?Y49K>484AiNOAf'V^YrL1_Pf$Ee=5_r"F&LK9g<C#g1C9,J;]rWP;?c`\ELGgZ<jjHI**joc;O\fdf'4.!2T-cP<(2m:BMJ85
%O;QlI!gSu'ij=J!W'$Zao)[b8hqqUoO,`+&h05uNBG/*%BXAuA6;PD^[)3cb'TF4Q!]:]K5/LAD^Nb:F,[23bVl:"T3SkliZ/aXC
%e$4Vq0^8,f@u)rPQDrY<!n.?$j5$3Uq2W='RhLuNeN59[;f\9G&t?-WQPZgmm0\puA@^p\j'nD;D&OI(9=CW]oh.^1*d9R!,7(Ce
%X3%G"3O55g[h[tJpqguX6W*fEom5Ghp[ltA5;jt1kJ?R2QdV9oeV[k9r3C*]cQ7"*pBHj.'p,FF"jtue\%kcd0&=AbXQ(n2*'=Ro
%O;\bngK$3-*bWIX=R9#\kO/+b(-L\sr3.YW7EAFM\)#CrK;Xt+RX%YHOOWp;7:9e]VZa:!EO&N/FkG]rSgSlM.N"'fF"DsAN$t,I
%38cqMro;ef)8)d(3I&^Gbd#`Wp#8A=4gECnrsYK6Sh'4`>IM.]5a(@Nd4$/D-tJB];,YmCR$T5h60p#>1K>qHmA*&7PiNUY<[W&_
%H4-]'=H;`IeeLe@NJNI0@@:ctP(cD]3!O%3k$'!-oCWm>oN.FPN2j3.M1[huXi':fCE_X6_+-IMF\N3&XYRU%YCHMX-<BgbQCI+5
%<R#/bD\prHH-KjH+Ht\r,3WEB]hrH8Q;%m?=biH>Vnlj"]smcmiDXf]JgZ;^,t'cq2/"Vq_UMA,&I=<C+b3!]n2r(BJqTFYPd)X^
%DfX>hBgt`F2nl$dZ,nro*XcSXV*kLapUM4M?l,qC#,kR&L^'ZOnrU/W4u82ZM_;dcYJ"/MIqEEeR=[q+TO_lr2fj)\H./,>^@Xi6
%7hNbt_#)ic=5e\B<%K/>jWAu6!Q1tpii$sX&m>h\=<R$=7DKCMIX,1>#T^RmT<4?r93]TUS(9g2N.Y<YF;YANUM/N?j1o_=kXV=1
%-dl-i9fOF9;Y?$:H4MW!$Ap<'(IEX</s/=s:AHPYW!Xj44Z9i>CuK()Jp,+I:N]!<#/:Wt2KGO.UC"IMR$*POL.T^Q90#(f)Mu=F
%kp?Ln!.e?8YS/?)AWK2B`A#C?r+gVU;IUpnHE,Ij.>AhO,dZ:NA3>gn^jQQe3Kc*IXIH+q19FM]61KU])j8:PCoMGWY!JJ9=ipbZ
%bs?$EX7tNR#&Whb!pu3/K:[]Ck5_$doctd:hNlh,MT+lOH1$!U5q'^L1"2F8H"EDn13]?WM#kErQVmfJRDf&TKLm@pf5CC*LEt^P
%ZY)'CIX)T.o,jD(=Bjc*FOg8lpGfB^\g;Aa]^'amb3]H#@Rm%kNt8?9,?X;$B[B24M@p*oK^%J=^-&`0R,XuQOUpLo8$P0H(G7eD
%0`RN]-/aSb%1?_%m/iAU=C/?X&TciVL+TG'*qV9O_?6>h@F:2#PWb%4B[V:,1^RbG$MSRA$8UAMQ(BD!hc<fW.%1O!i>N/<(-\`Q
%@#]rsJq]Lp]"eYCPPqnik,>qubfH5,h%Q@VUN,,Z=aOLW+B5T>%.m>B%sf-87=kU7]Ys>=V"m[Re!chp3hJV&Y6W)rVeMW&*/RD`
%HgJE/TuWRUY=)f[4fT>AAAQC[j2q*&*fp#J8BCP77Ui5dY!mZgpnuI]!.Blr<p[7$%bfq#EX`>.X&8D6IJhZEKgq/U7r-:0$B@#.
%ZB!7%_Em=![+%8J%l4//3PEJ_Fb)-)D5#nE3RJrE#ZaL95L\"jS2j=dgLb;5(Z:fM(hr<enPZa7lQuj4bQF/okUAYq1Ng#_=q>%L
%?)798/c5BXHWk$$Ukc04$3-C5OhA7qj4C7j(JXpN@rQYJK&X1PbG?_j30q\VoJmO*DS*p\3GQuP^g=BcpF*J8O+0C"HShi7=#V&p
%be]L,^d?g9#-,C]pFtLtd5e5[Q[V7J)GTpBkV6b",UMqO63l:[hr$HZ>VeJMhZ[KJWIB3RDk_l2j=ZhYDpfT?SGmR.Xin#:eY=Jl
%-Z1boGg^KKIquI%2`Z,IJMZ[!%$n*k3+Ps@N>Vo?6q(m'q8#9QOT!lk#gUI*7;(e!6e`$1n*BZrLt0@sd4$+Z`HL4ubQbUT$I22P
%U?qX0eueA8b:^B\2XoS*#R@[0T]b61*0+?"c%ePY77biEO!(EiEq?7[rd\%Uo/1ngcTs'b6CC>@eUq'7%Ad(TP%Ua.*MFq4P1k`>
%2)F'iC3\KZi9(*rW[-L6VS&FR[gS55qSo18PoC&Xa[5>77Vt'H`1&;?1;:5^5dSb8Ue;[T#Q3pGdjbgRBI]0eXdY\=CQ[$XD6$oI
%-.sh!1TK\hDD^0:"U")/j%@m[j85])lRM"]-ZZMqOt$Z3&*sAiY,]'`D$4c?$_Y5^>>T$YFGQ!ch%_V<"q>SK=31oBaoVcO6J9de
%'Ja2PlAE(1mchbAV+CB@(04^u!)V&63*4dnl#u=*=B)"5'2jnKcW9=^X*C1_s-_G&<'X2/Ve42UO@]E*U\5*R""7km-*`M'K2Qou
%Z<Q-];L>[RP$1CLL4Gs_cuY/W+2$4MZ"aPa%l<ZL<oark4u(,25ZYeQ#""Zu'2M9FA[o5p)r#,HPi1T$#dO%:-'IL2o$0Hs]""X>
%qg[Ujp,I5edk\57bua*ceEUXOCCF7b$[W2R=]rjFIIR0`4fTb4190cu$3h4ASp@V$"WXO.Z.L%ZR<-K]bu>s^=1/MobgFS.S4U1b
%nZLDgM4Frt'G$rrPZ-rYWg0KY<O?G[2M".sUmUsfXP`,R6UrXK55aR?m[#VM<tNV:Q]%Q&,O`=)q%i*K4MrAkd(\JlW)oUl^"!WV
%n0`rK=G3rqF0*D/k:SCuUZ]:*2=L$>FoQH*Gi.17JD?Sq2b7goP_AlS4pK?#mC\8A_(ic\%sH5;rD7N0ILPn:R'GPq\]J%2$TX!:
%3m@@ocEZ4E_aZ2g&Q<S7?E#mHi7t\HQ=sM>$+XKTk4[:/c4+Pe,B<21S;Rl18do0[F7?D.1(c9\cC+KR`THC<h-YB>IZBk<U\-26
%TKN]H'JcO52)eAg0ZC.322=Un&>FJKF/\+U,/d;;Q_kVL,hc]=1W]+1O2>id@)Y"%3R:KXlc(u(9E"&EcHP5hV\>J>`nT!sD`[kW
%12#1mdGCO7a;i&an2ZWAkT#)3o*d]92a@T5=[%s.0\eFd0Jq(+q4;VU%j0-aJ7dj9C\oHY1idjPX4\"Hi[6V73UGcf0o$!fQ#]XD
%<P-#1QkhEs)#X6-bbPM<9tTlEf[#bK4+<Wr=bQkmZ?c-\m5=+"YAe+h["(.p',Ejpb0+3L,R?d\0A"-eB,Y5s]u4nAT:jN%5Kh59
%V*gD3He8L!G$Y[XjUfs`?7rg.8i^lBnoClbdCCL`+Iis?DV/fF*/$PN.gDPABJQ!;a[5,NmnI-0S>R?,:-175rEfd^>0l'tl.Ws4
%*ImW72nLJ9g=R[1)TK.jEg_U3`1EHhQ".m83Yc7>j`l7qF18JbXuk6/ZD+(3Pp>l`[.k^)-C.[7BDVmT,?fC(X4\"Hk(Y/kCMbNs
%Yh?ksLRBNLjnHHUpZ4tVFkkR0[^:R[5-9R^ENJ-]g_;Y.\Z63Wg]^ZZ.-mAgKuRjia3BO^Eduj(.@>$5<c^it]e_@&k"ai/^RrEK
%I,n]*qT`SJ%OIZP<n#J1ArV_h.\?/_/J&#igsWjMYudT$k``9l'!&B8*,E'VEguuC+c_gn%NtL((66p.j_KH&*6Y>X2@(=Ah8*m4
%p=ETr+6Ba72p+,p$ESoq/l?:3:4>,[ll[V+4=Q\/*\+m0)hhXa)G'?g-uO3G?YEGNB@\MQF;r6:Yk'%&U[JTnCZ5OLY;fcu+RgWf
%IljoS+!`;c#l(SB<Zt2qIc,H8qhW[-lo'98qiNU\joHD\DK*=FZ$g<Q#r'<g;&BL--F,_.X/Ku.=:\7VCm$4I(21LC^=jb=7t5+R
%HH+Ymj#-dVKe$2`h0rOJF7G1Dk\8]qC!W;nGMQXoh$4o!gplCp+o#W<LYbPQ*ur3&+,RgkHq,t7^99?<04CpnnN+t9f/!\)DCEb?
%T2UEp\5G^+^8G9i$(,TU/+Wd/`35S=?GU8PoH2P*c%=VlKs;5h?)C77lT*HJij+TqNGL\XCdR`:@=_PAa$mg04-gd!AL3ADobb)o
%.D9WJn,s;73U,DLS:#52itK_GC_Q[3-5cOS@dt/E)K#'X[p[U)fZ*Yq%W$6_m^F]9jgF\:lOlT'QgZh<iWXW_r+j>Q?$q%hG'.^i
%Z<^X]c>(Chm2\dg7\.RmO7<fUo<OiB4?CK%WaIoca3(aJ$fObKCA[f/pYRDon7p(j7j4o[l$pY=A"TNq\k%npOjVI0]'n-N]YZ%K
%^[Ekj+*EY9^@Ld4pR]$cb"?BCmI<j@+0$4bKNl.+H-0:*_Wrqn_gV_Ef$Vt82U<NJSF#V7P]CqI[,Nh8U-8,c"2Wnn5X=J%0ridJ
%>;4`e`ILa@=MlqR'd%U#m&KL/d&FGoXU-=#7`'>GjiE,lYK[WL4.[^\cL+^LZ+*BA,@DoUin_ge;7Ki)Ya`p-@P?#!p]`>7Z=eK,
%4_dDP:4NecT8F-HU^k"8p8uZUf!B7dJuApq.^.Lb3*d[kL<C@Y?8Zd@96IW,"FTaBiZg:i%E09l^3:DQd%(2%P40k8$D@U's$'ih
%'e2(JME:lq\A"ntX$qA-4%c*2miAE[m-'lFG,buU%2nLPTLUfA[Q#TnX,jP)V7t!65Lk2S[]\ZZ+o#ZNepOq*TfKp4`PcTUT&X]L
%<qHN_l8N"hCiJB4h$t+_3bF5!fUZbKbXef0(ne(2>fXGU3!UM(R_.5A5;hc:\;h#:>-0?o0\8%3+?QA?gl%);.,PGeN[dOWf.l;f
%.H\c2Y\2Xm&FBe98])5)c[/QoJ(J9%[`),=fMC8,lH'A^`g:M^oXJJs4IPS=ndARQ[MaoNY<D.dY$a*d4Jb[?@hENL-LNoQ4B4DC
%q`VQ!oFP"Z9%Pd:*4Q'H,/%JhpX%[rDmJln<']Ir>LbP1p/B1F>(n#RpX<C6R+0()o0>S2e/`8+-D:+h06;Mg)"A&.Z#Hrg'*@!!
%\bM1BJ$s\7AR-[nPnCbMbO.lDD>lnDJO*ci]MU8lZZBE5;..@tZ#eH6GHQP.K%3%P%rV`n1-hl:-n(W1g-FgHFc])cO@c,8&(+eL
%"QqlW:KJ#X,Nk#F`&W9fk;/&b"p]5[b!s\0$j"SDg8<`1k#[B4JDDL03H@kTQ'KN6m?ksie$8/:$<DjJDD(-eb6u,nVH74CnB,UP
%E.-u1ZoM2]e3:0\Ec[+JOj&taEcY5)!GSX)mH[a4J#[,1\@Lm+W)K)Dl523!k5QY2O&C$=:kimHm.>"2='%i!Ga7*G3K=EIkI.bW
%dD$luU,DSQdrB10J<%OdBA?Y6IU?pJgYrj6kr&@uDXD8/Atl/jS+]''%@Gbun.m+</noAHZSJ#Fk?NthENK&ncJ7f-a"[rg/l,FH
%E%MMOSDTN,/7'H;5>HamAM$s\Dp;77-Z*jj\sa9KQVQ*cSF4RW/*03hNik]#ZQ(bDP-r9q`R\T[AfCF7R>49DUGF@O0WqQYG)=+T
%b1_O&BOACT(O^;P0g0N@/$Z5m=0jfe'5i?2_3b?q)TBiP5q"(=[]Zjoac7\&F_pl&-Z4OHl^0Fe]8@0EFf_bs7/)LA?,HnL0<a+m
%4Gk%T%ml]p2&26ZZlNB@U?A#S@p.LseC7;WPUqZJdZVsFfT*N(3t?6U&7bECU6o__*PiKr6Bp6D?EAEUnso:rY4b*!)$(I'hI-1p
%J%^P5:g;_-CAK8"6s"38B<Gam$n4V[,d`m.q5!dT\[d`3l+Wt92k\ia.EC5E[OZ06lnejSZ-%=td2l4m>g^$R5\^)a2UaA_[p:c_
%dP":(m4IHLG[`!RY:[kHV!RB.Hb<fpPP,-d*4,*JBL$O#`%B#unmBPm;(6!S8d-klZ+T#lVE9#*V;VuORHYd5@bJuABK;qpV&J1K
%/Z9K=2E1"1oGj(@HDTEUV99</p[:Do_ilkW9tP3Q@HkNgN\.5\PQ_oOE(g?_qeFmpa.sGHMU\1BEr:nRD(O^V2^VG0HGu/'*O[%:
%1%G4EKbL).nKViZIqSnVhj/]dA8HU+WncTYHtm#CA$0*g%p/p7;#Qme_O!*'_m(b8JW^FAUu@^1H4%QXYLq94R!qZlG%3;^/gIuD
%<H=#6A'm-ER;p&^/./O+12k5A*QM]Kc1?W^Io-Zt8*_K.O'm]H7^0)W7=gdb"r47(c$$17Y%OTN'c$,$rZpkCRZ7hK2DcW`bXY@d
%,L%39[ie(.C-FG]im!,ijZ4aH4Cshl;tE53%\N<LU@">cpK56iG>;)OE!L1DYM1<baqp0[CHaYTSc/4&B2rerM4Tpd8hpe<';*2&
%TAmskM$Y]Sp2.dp%<X:k,N$Vb6'+C$Z^3Yq>flDPr*1SM1g]2)KUe((XD\(ZSE$(VC2H+$JRa'<SeC#n!H^tu!if/e!8TBtL3_hu
%5hA0R#+L^Hb>QC&EY'N\kFrem(j=J-pfs[;GC0d!o?Z1\3K'XLUqN:iPKZ9alY`c"R.fWYDYRJa^X#;cpML!ZZ3ThS#EKAaJpM1r
%!gKt&c1hUq'VF*D`i86j)GAcL!YOjCMBS=4"qLZ$F]89*EGRL3&^8;iDZ,B(^j9=^k`+*@L)fUN9B.+?cN-@1HdgCa3MXXT6_3cg
%_npSZ=[-gAf't(912]#$B);JPAnTA@5bj-3`u3*pn"d1\aO%;=gZ'u-jfgcp/;P#TIP`!tAJ@)[_Yk.cJn7'rGoL]+BD<YVldGgr
%&?P-0N6:^_->Kaj_!9@^R#+K+%D[Q<7aU21!E^nK*K.>2JXiAd($Af*S#P6N@!N_,%-E^B!)&/D`n#&2(*(l"m*%BiMc\iWbMH[/
%EVb%/ZLBu,[Bor'=aC-O<T+O#JOf]3j!ZQ,%.[KELXGX#XRM'RJc-(NS5nX$DZ5G6ch$ZJ4"moY#q8.,Mr-AjTfU/V[#4WbEoE-4
%N2Ho9ZPNU7We1AWUem50ljjBXpqXbO)%5.,^hWl/32<FR2Y=J=[@OI>`k`pe-ibd=b^882\1q(ieV7Z&70lQ-r@pjlldB-r"W7C8
%Ob:\6/C+T$mp*Wk&r-[LO_,trPu&kiqj#(9%2a-9fJkF4*Q-;tZqBm)/^Q1c$US8iLPD-TeD0EA$H+\"I*rQl,aQ!?#8O*g(<\=<
%ATSl9Kf`sCBK'XMSAqk>JO10>Vd;3GKj,>U'26*ZL/M?oRROu'0p3oDAL\.!H$H#&cSic4011aAE@?4cKn-9@-7F6:%!0neVjJ^Y
%8)"%[[;q2@Qn=>b.FAj>6@(8WpdV>?@LKD2I__"6M/JS).?Mfi!FoWlSdZ*9],CLNBZgA#aRYbP_T*@XLbH\a%P-FmFUfpuLQ$dC
%$4=pc=ajcuhWVmfL59HgF`n,O"(l4dPCY).!6[q,N^a%?H^O*ZbUI/:.CG("#t&gAT#knV#SLZpK>]6S.t4C:p.Wq3ngtWMN)E]N
%'SiX&1goRXC1!s#h=?VA_lE?+!Sm)XPdg#>'j'</rM="4R1+NiiQ7u>M`P4eT^!sZX#(YTobB\tYYG@rW,Drk-#9<$M*h=E\V[T0
%X3IB?J+b!cnjN[t).Et*/tIb%dEV,uNPksPoCM^d)ZS.uOAQNL`.T0Rl97l/n`j9i%=9/FAIG1+7d_SOY=DJ(fafhDEj]u0ATBSp
%ePjkF)_7tn&[[^r!&sL#-a5D.C0Y#M7huuK5)r*%q"g@i>RMkT-?eO]=i-(9ID4#kiKr"7XIK2RJgR&1J;AajM_9"J5h!.F$[ih#
%%)^YnekM.A!GQ#8CoPG*Uj,_\M$>mg%ct(G2>\"[>@m^R8%A[]&mVkVBAfQDfk:Fo9Se\j*tiDXYamOMa3FFkFpq&BI1LW>*X.fO
%YSKboU9^U$<!n`RE,_EqSUBS(1S"hL9e6J&MK8<Pis7uu%MK!oN><aSO"XG('W@s's-Q@sgU)ZO2\rG?(O5HCko!-(jupGfqk8fF
%7&!fQ^?iBqcmY@$=rPKDI7q!:,hF_.2OAeH=L#tB3ikpH,duXdhSMA3`=^VZ@`Q(*U#6kE<_GWFrD7r<U1rW:?4ZE=#"cgYk"0SZ
%iunu72Nk-:fL\t)+NK[^SCqP6EEk+L&^>dKOKDuAUlR-)kmSYt.S>^@jiS'1pFb>P8%G;'<5QUWb8J?D-+R^^cEEtgIQp;B-0nrD
%CSETlX!L-`E7dpT4aa8r.@/+90')n?KGMT3igg<*Nb:B7?&NTe@M"S:PC80oE`D'Sf#l9<+#g*&8?P6E@f>meEoEX3KmRtJ\BF38
%f8i7'FJp+tY0r;TZdnVc#ng;n>:lb-;fQ)-\()BTAkmIPZdkf6![OSK/u"&cM([`H-)^M,9I<3trS#%YiU-Oa<kFuL_VL[g/"29W
%IuLk]>AGYDe&>P7IU?q>;t4%LrP"Z(iqHg%>DlLD&P=%+;frVQl1#BrgZ!HT7*(t-?Ii\JB(GNfHrZU-?1T.1'Kr9p'8He4j%['e
%CO$oB';V#>>0D3s$7@K>/^"]?988D1BK2S#B9D*9XB#5>!W&(ect`QX]#/fN=)V:)T!_^:fj4cHKe2_9CFs%VYUYSJCFpdGRQ5?R
%4i<=.H,I6N4@2ju.EX+kZ+o/5E)j1j_-)\l#a.>Q(#meJ9m<8B7%%7p%DP5<8\;TG.C$keP:_M5Zd"1T],(]7Uk7D?I_8]WFr4hM
%Kmg%r)_c\Cn'5+c09Ace?9/k(%/_^aNtN-dmkR?A'fF^D8([uQ&_BY$NO:U-U9"F@=Nc_[./"pWA2DfBlU)LjU8_B;gMSb^:fHB=
%(=2tjf,Af7XfeHrBAiZ8o,g"N1/B>"On%YbDQK[IW/g,f9K=!0K[5IuUK]cpAa9EP+hWRG8pZLr23Na?>/Ph0)G_X'6>QGTl:HaT
%(*?.\PVZ7a[Mso&MpPdJXd-g7[]ZqaZdoc%ecJW#[iQ'Ol+[CeL*r"B/18D`)QGk5Dn3a6eL!r*b[.>q[ejHT65]QXk(haIh6h&<
%'IOAQPrHH/V7#r`hLZXB5%glr4PJYjbdE2g3]*Gcdp1'S74*5E7'/bN`,5XZ?n.LiLB1&4o"*)_P>d%[1!OW]`&>Zf>9&P<1<p@9
%'n>d`@WA;36<UW[Q*.$Y+O+O./'BkBBWfX'O[F<!M-3Z%,$PmpBqS).+[QBN;@U&d7#2;f6=7>KL'S*$XP=T]DH6`(Qj+U[k286d
%81>"e($[Dk*4T4B8-fZ#FgpWI&jf##FHiqf'11BU:eG)ROT.;.r.BUXe"LW@4cHL[]<><W9M]fh>\&4YoiThsXReaDhcj*GFfYAr
%9)X]S;XcdiAF7OJaPH>.U$&d#iJY\M+H`aI+]Oti2&f/%Z$bVbHtnY>d1J<*%S5qnDQ4/Qq!_GEGZ*PH!K"gW6cFU8m=4=oB5#N]
%(<<93\]8trf,#OYrH;+<<e+$<f81t=SHR>rZY`\%K5;KLTZ5^@k=>Xhs&3c,C"D:sRs'1+9bB]l(htjF9-],..lMq^"pc)peI3p.
%a+jWFp)WV-n/NRHU]qMdJ%`lAX:)?G+\/uQ93jM$<-8GOUl^QJdK<[s]>V3$-+6e/_\GS5g#bX;H4U.MW>=HS;"e^\4G>5D"i^4I
%cXi27f+fdW_S'_emu7"6kM^\[a;TfXI9Aar&t0le0o><A,p]-@$Mns=8=4!m0V;3/!n/O<)2j+O')S#,7qkg$ilCm\Cf3.]eT)<"
%C<]9/+.<Ko'W=qY<q+$CB8Pdc+uK3u#>-lm+_2T!X2+>DJ7&LJ%]g*N3dr%]O^A3ALB"+$[>`l#)7hb:!CHM(#M[7B5fhU/M-Y?<
%7c]1)_H%RZn,5StXckT68U-U5U=>]+[TqhARn-UEW7/XWClX!jZCJ1bSI_0<"YW[-OIo9Vi;+55>P7V0L\D@p:c:M9j*kPo9$SPG
%GUKNu^k6I__?C>mh0YGB:V6oq%=]Wc#e&i&c8Idu.^&@BN=J;FEY^K*3iMg]3`Q4i%MIh]+Ul0]"p$T/[?_7?)@Q!\9X!aj]sD1u
%,]hH.LZSWt@^<I%/<toPN\=$<_h<YI4TI,HY-g2J#RYd%_ea-cL]'"V%:b#Y:5<4HAg[Z`ls/lQ4cF/Rmsd]WJ7Oun18r>5]g]2`
%)]Jp=Q(-BlI\AqU^2A#](`_U8;#atL%1VTKXNXtta<3X1DW4)?W$qC=)@P)R]^4NgX(L8)TS@`#^;[,JNGVp^`N`%tL5'\6U4&(A
%<Q,-PD?)lZ1^fEREnp_s?UoKLHWtK[;-u72pu>1:5b8"[CfjM7*9DWsk.h/.TOC5U4,]k!gf4HnV@GjH81a.SSi6WTYi#"'gu=E(
%l\e6TQ:SVd0l)76D#?X6^dc<4r_=4"1G15g7T-*&)?c$^lC[HW&>eOM"DA4"*oL_Y)c[aRhp9-Jn4<h8="d"6==\3#G@c=k!d\'[
%g%GUS<W<na#D6ucR-9gLG8I8-I'dd3n/N=QGl+'8WbmTEc@d%5;7].EHKa@/ZEc\?Y-=$SNFJm3+eZJY!(tW:;\1,[5oA])YLFb>
%0W6J'Et"a6cLp*"bRFXf)8lo%6ZMS`E=36*^.H2*P5r<.?-iZ9bb]'!]8ri0V2\6QUGsotBkD#:C:1-$Q;28sLtLDo'X-ks8n`Z&
%/Q_!QA8\ipTc.%H3,3@X6jM1Uc"H>aRKh!,83I9u`S1&GNd1r5Bi!#lG-KMf3Aam#FH`I1O<O?1&1c][IYd8rccu]sfe=0@1G+IV
%hr4W-PPfj'!(D]-7<aP+^(1C:jKT\Dkg-W?=4ToKH4)m#rZ:\G4G$A1N*n<<Sb>a'Wp1j2BBDn:o@.SD`8$c<;SP+Sbb%JXo-e&>
%q\0kD:CXKj#3^DO2HDE@+Z*6=d1)[<Q<BYgf8Uh<%\)iql:uO^#KIQqBsmbX_+&eV"nrEf$;O!*Q.SgU.#&BKKQ>eVil*5!M03?Q
%Gd$7=Vg&_Dln`E9^AE&AUT36UgQ^kp102ZZZmU?a=.HbD['$0I@Y+pPpRgi&W%ocOIW?hI)R\"6hr=\R.HV]0Y>b@*;pUbs7ro2`
%8@2*"4j`fkObL@'pa]=\,[GrQUBORrNa(#IpE$51/"N(HC(CFW=#3=aZ)hk$_6(0uq\uW<]?&TUIE"q#!/L+G]?A&)PJEb(lls!E
%q^([a&k<N0SO#YnUK/eTWW@r0".*<uS24(TO.WPQ*OdOE@E,j_b&n4aZ`@!0'W7h@d:UF19,H>AN?(J-]X8='a%iM>!Ndoa!"6"`
%4Td-q?aj0_Z?-AkcJ=fQ/.e)j45t-1Lj3rK&AfH-BJ]lm53)-Y9Ms0AW:1%'WGWZBW>a^V6_W0NJAkGc[?8G/pV*G&eofKd6@n4q
%&QeQGRL2l9n,.V=4X\^N/I\T`<kr3;#eJV2YZ<\l\Ll/)Qt<B"#ISWg`FKr([dIs`bF!WZ!0*YEh$+$_Y70:JE4oee2(n2M<nP6s
%@UIW\qZ_8=W3F_O&QGC)fYF5)lbqI2+JO8!DNaJp7WIQ9dkKG_<qeR30s+%;GV\$ZG-@u4Np.OD'=+39P6q.4FE.-+&RbA)n0*ds
%QhV?>k$+Z]XZ/6149&J2g1cs9mS!+UX0'3[F6s%-p[YS?$P6+e42tRNoX`;aUDO_XV%\*.0[o1=e3&3(U0ckQj//im6t8'm9<Y(n
%A(D;ho-W5S8-&Pb!75SOWlL;qXLI]Hq\!XIQUrdoGmde[gbo,*M1Ao%6M0Ei7'MABMNQ^-./Od&#*'@1i'V3r@FhFfQ&1QV>\#EN
%?(?:gMg1$=QhrWLU#X2FR1HD_NkGU!"*H?%FM!]sPISGtr/cJ):=6L[OaV1sEc,'NW'+IZ.<o;?fFj@ORoD"h:/c3QKFZea.5,c:
%4P[3AoTd-%Z^23OdO?gqJ7rZ5B"&<7j1]*\_%j%UJb:)1"p;B;;ih5AG>I;deGL)hdhf#&Q/l$)l>,j.Kq@i#2@E;U"6PbWbTiWi
%]0IP7.R\t6rPut(gmp9f!i2h2cV6bU`d1fE*NO=6KHp2K_:/%$ao\KL37t5c/f%6/g5a8uJ&Kn6LLu*H#FaO@l9YF=lPd_U6n$nT
%Sq[c+$1D2g4GgETEsVBR"22]YR*dLV=?:7cAHlUeB':Lj]N2S-CiP]J<&k2k\kJqN^?fD(A,n)ITRCLCfoo\AV;9'N\*i5hI#QZO
%$6C@jc@eUP-M>*`4]Qchf>QjC967SJLE'._<+g\j+TKo5:#,50F(6uS4nE[YT%+h&:2E5/p!RH1[Gk:5gRX=)*c7mF_9B2eE9QP)
%Z!<6[`*0'@a6VGhSDqK]TVpbj=eJXp./=^IP#f*2_(=!S"^eKlih+JS`:+HkNFBs\&A(bY/3EYn7lu*HH''?J2U+CC1/Ggf;QX-=
%m;Y8Tk0lcR6Yca"mV4>peuA`9eZ?BCjih!'g=28B]*0/@*8Z:i_%Qq+;BiPn8>'Ni("h9^0C])L->=<YM7/u[3rm&*=ACL`:eZK4
%.4/F].hlFi3NP<@?oJ$?,qB271FQMd`sMD`V_WVSY2O5RmR9p&?%:=t_;2h;EJ;13pYKIt>NY[QkMaf#NWEm%#feol,!tu_X"`dO
%M9T7-VpF(kTJ(T*LS;ggfT/&8j6V02^8ts(lnQ4IUi7pMinu+Qpm>i"i0Q!VBltcn9BNrV\i97SQG(7bOn[^Aj+sn(RhS!,IrPUM
%m_W(Q(gGA<+q\5Fm2j2R\X<W,hd)Me&MRA%-R2D'fYt3EZU3K"Ge1fTGIHN+Z=uB(AsDj?8$9.XPEGn<"p"spr1D$O4i"C*J^7)<
%h'M!!(<esq![^H>`A/:S6#1jXN].f6_ds0K0H/056u9BCDN3[a2Le%uoE5##4A&-#j-i=*EqnIZH/,CZBk\Z/2?+iLae1-39.4D3
%rZPoJ=A_%8Tj1"&815_jJG'_]ePID]:3j[V,@Mj5.,Wt?_2`t5O%8SbH(9Ca-;G0)FY[kS_K2g@I('$J4;eMq6mYa.[d?UfnW#tF
%7S"@$HVDugf8L%%Mui0#8T]MJG(JTkk)P,JO4t1tk2;8K.JMVthN4u0\I>7XKnM2Ngl(Ab86@\-Y5KIH=XV&p\Dp?DG[3Ci,/!Oh
%oIN*pKOqp#6X*oa>[cVJpl.gHoj$$NgHrcSmXW5V$jk)u:<Dj\89lYf'H=OdK6_-I8=8LR5V&KZ,]%_.#5>hO#to^PC@MIa0k#ME
%GT&>Df,d<XXhG$'%F7CMemNlbPoU4T*fetN1+:?fiE4@(:%;+tl@AMkPf/LeiuNuT.4?st8]D]O4Sm?iLTC/4LD=GHQ'8aReNOrP
%cuHS#;"e9oY#`1Dj'<0-\%WggX$-`dD(?l*&(0p-D`\T?SmuMGE`&U:_CAAk?U\Z^g@r1s'=J%a_SM1*`GX5GK,LOJ@#$"`K@8q;
%WWB8kY=if-*```@qFn_H3*>cV3j8beHHT6_Sl]2WR%DK976uZ\kn0F_Q)VcUAWJ5!(W^j'nXMAX'),ch&$6KNoD%kT.`;i'KR!W=
%[t9\uJUYs'ME;>LFb*5qUqOeTL"5WX:W&qi=N.b*[20#6:#d2L!VRj1I/96FM4WutE]9IG`Nts76n2"J5;&#PhDPMJ*+)j3!i=CF
%mN,^sjrPW$rM7[kDl;#=<E=Uur.cU#m'XiNcW5d8XWWYhJnBCf'!X=8fU;4=#/TN)`l<Icac/g5<"2(A`^Wu@(-de%`4:H6\9K47
%.X)#2./p,:PuQid02QqCnY48N:bqfHc(4?@B58-+dk+?:0(f\FK3TX:7eZi@d%!na9bJKJArmX,&:jCUpKEP4<LDX+29F%8/6.ti
%?g)3!>u0G+`s[DK(T'V`;S*=mO(f'f'Qjf*4$*8BmB9/&/*4u>QXOK34BF'`[l1/u0\fSaAE&sGckX(jFm1X-R.q`p1d&q(J;/ru
%Ba5.<^TMP`0l[09R4rD\[IQpE@3Y2@pL-HldZe1QUEO&lE4a4X)u:l&LJfds;:X,7$?`P3#VuYtG/eY*@12W8106:Vb]l5!NUpl:
%]*l*cf51^5j2$*___u>TN<f&7V"GN5Q9@r")I,]LX=O&*l52B@*_/6,0BG$E52Ur'-1\`&NsiX]Ol\\pK/HG(2fhX?@)]HZK,]P+
%$oW5/X/F_L'lYAi*qU^?3k4?NSNDSAd+6epNWMqLXP#2UmEls0r2M=<B\qT+U(BHR2_?b:fo<G8i/<&#Fh!6=4+ZI]=_8S!*6!9e
%o2X]M@5e66+Z;G%.@"hI7e9lt,<dW4/;Q)@^FoIWIO]<'KI=e6R1dYP?pK.RV^e-J0gW9^g'UAN2>M"Z<"_(@5+94N`M$+gRT$n_
%4M,a0,rSMaVXD94k%@<;MW=;_^/_[Z*=GF\]&3LD_-8#u,d_d*FG_/LWFo,K#bdd)9,\kjSC.psj9g0aU7-+U?'ppEj$VT7(bHR(
%Lh<igG]Y9Y&lk)$&dgT-I0P3PO#%IsjgNOm.B[ZK6ZT?0XO:9T4MEp^59'XL16/ct;0_J1=st/iSrPYl^O`]?Tb/se^&]E'np]R+
%bhtG$SZO9_[`^1SibFR9H?XQb$L@"l/P/n0(.TS9/W7f`_#C:@G[hEH=@*8jRPt!Hh[mst38<6#pD4`;jZVg!GQ`6GP(MLT:\>d+
%/Bj$BgX0RqQA(f3lt?Zf4?9!*O\QLh&BT)`K8XF[(W>#tIQVPR,Gu:;JhF:e3634*Jub3;[._L2)bl-sJW(PP-6fh+Vf`$?_f,Jl
%I2TVEjP\-?!-Vl?V_OiiTTg[-lpM3NibF+aY[Wql4S9jK?I4.,B1fdpLn?2T_KW]8fo3q"cLQa3j*ZnTD(c9Tf\20RAml91m=/dj
%J@TW+0%qO%.-um'5f\NeJ]Y;CSVU^ToB(2s2?mc5#t3]]8V??mI\p3Y:(VHpM!L>0@g$9Q'4-:AEI/Ze6QBCAX?ZCI>IM-@"uL@/
%USRYO$E0M:((g*tG<GRO6cFl-fM*D.+eG'ci]"=/.cP/8(A=K)9aN+1h32t,[X5SC,[g\TNrq(i@B%(2@o+)h/_7Fle;h6GKDD,'
%$@Ob9e"N7P(&!<TW;g01V]ae=aMsVed^nPhX5IuOQG"+"EX1K4pY[h<O$ZWAA2h^JD'+A$K%[b_4S]!mR4Nj$!H`'SnnO9Oc+;1O
%HLAV!HauD^I[Pj_HA!`)9[?)TY4*2k\t@t5lT/eD^e-l`bt\)-_OftYA1`g`JGOR&"'HYBDq*2J$0Ej.h^HTVbUi\Fr..9&cXcek
%N2(3\!st:<=Uj;P'DO!BEtr5H$auWo[R8H7r.`IjEZ.H)p*IUp<rhLQ!&Q*EIXl9@"5)GI>L:jg`,)[@"Ik!a[uF9l5nCW`2C_<<
%Ts1oIIA<V91=B;'$so=Qkn6!_D?[GfFSpq@1I0Cm<]lcCZ$`<7^`PKc]jr*/-g,Lg:XM-o:A;d[(15[RJTT'!FdIb/B*'i*B#)mR
%ptN`VSah`22!1<5hf>3YFIV0l5)rqugF\-fDYHW%)V8'?1UH]0!'\Ik%*b>IS8No5hVZ+4LaP$.V&@o5S)l3WY`7t$BtJXtmbPju
%*&5s4*'DC:@<TRt_\MO5.ZCb?<J@UF5sI*MZN*qfF$tSe#51cP7jILuL@<2t[&(bX`,f50J%rig>LQ5M?hH6u6iPI7!Q,X"gF'i%
%>&:^!D$[=OiSG;5>9D[NPj3nI<RB"Z;?=MM+\!97f2n4/bHVh%'<:1=0jpHFoMB5ePh3"[UHJ/EC9)DdQd!oO&fnNdEOj%c42I?#
%]Y83h7rq.@Z`bcDRju?G:XSN%VU+BW\9A>rYac2AZLGrN5#]lPdCR]_/WTE)DXa+T=7of5gX^u2<qG4.'C/#>Y[d!$J65^Teb<6N
%US6muYeZ(_iqKi[.WRcP^*Ht1,?=0qpQ['%;,5.c.,"CJ^_L2-D?3@FYM0aR3kS=l\YLNZ<jJ-AM5Hk3E&ughg@?+W>,I_BQbgPk
%F@j+#Q_C:D*H^L?>;%M:7(HE'B^-IRc$$q;T<0XcV_mr<qpmu2QYoQ"JtZ9A^4caDVds+<h%UuJ!-DtQRbcTBh&is11S_"7T&DC4
%H%k(@6lJ,##MdjFqHnhbL&_$+N1,Ufp/0<2Xs#>]l"`6TlEYrc5m;aMp*IIe<\@^j$Zep@:k.WcM7U\Y+Via^/nK5u'_\2&6>17D
%dkb"`n5R$k*7DUu$*UNVbnW9-\:)sIc7uW/F:Y)u2!eOU9h+ck.N@XF[@FXO#cH9Up)CeaBY+>Ge<c#;i*"7"_cYjL%J\/aUQcZ[
%Z_W"'AS#:^?UF$jQh?*DI8q@F,=oN)%)6W:Te95-LZ+S**;FWjpjI:G#Kc&onY>RN#5S8L8-fO`'L1U6pkL2I%?c?5!S4:>/0ElR
%W*s64XFo@,ob84c<uMkM1/U,953PKF)4_YP2a&4Jj1lF#h/lru52056TV13"[/ZgnSKqF]YcTDD0OJ7&DnX#8:l-SOV`0u]%A^`5
%0MktS>E+3c;S1A)'h\ULi?G\-^Ql-@8RCD<ih=U"Bti\'Suj,bj8"3?NCCC?k?H/V,bD=7$tkuM9`.T$_`/_p1*im,Voj*idM:rG
%F;A(;?dfHt6fr!Vq=O.]"&KEQduY%fT".[EODS)Wo6VI2-hRi<(#CJBL$AcSgq80^@6UYFE-(I$i=%)op:AMcj#EY>\0pR1he53,
%b9tN#nPS4j)]R"f#NRu]-HmhO\+U3:2jR>;O=SZnVo[q.#Zhs"ab46Io[3;djoFGoMRU&f%cn<.i^?EVdX4[qj&i6Rd<t);a>6<C
%Ctbj?MuY)&2k'41ENA6)eu;)JIk!teqig-beV]A?/0F;q>UWsFVf6BSF;`7L>lFGJ0!B'*+CC@?[lJ]#k!M)#Hh'r'R53!<q.):R
%HP8s%<q]=$0k+uJ+cT;f]OH4!!U0/[g4RY?Y23<qN7nFfDiNitSuGbi_dG$&p0U_VqLnZL3X&S-]s;i!<"k7ODR/cm*,sVI6(S(1
%)k6fXMPhni/fa9gOjneNF-m&s%?UXY^Wcl)8AB]oFIsQ:oi5Nm4e(fi/De)/1"Ek<E\t(H]T:U3O2aC@$Q'=Q]ts[Bo\P/'W^j!"
%SL"g_oF)d*?9Vb_2f'E>JM[3oO4LNQUTV`ur4!KUoJZIPAQi%/**YP!QMQJlTq$W%,6:>;%^Pq+`LV'n,V26cFtE5<HgS]IdeTlg
%,Wpj8BdbiT:4KstZhZ0Y$L=:`9RXmN$Hpp%lQ9(C"A5sc>m.ht$\kZcW#ujJD6luAENG9op)=c*4]s=j^0kAOY+4oh_SYg2NPF=2
%L-&MX>>SII'F_nKoJSrs;0/q[27d7.d\3N$RlcHV?SA-\1"fb@'0q^-$<6nSXik*m*t=W+op^EbZ<=7p/@^Mu:RX9;0Qn5UfP[GU
%6,E]&P<s38:2IWV/#MS5YL'MDE>B,<5G*\D^Mk>AN.7%E7gAaVP/PUW+5^9>]9jF=co1N;5]C(q6OTlb/,RFGU`-]Plno$m'golY
%i];K)6M/Fgh\IbTEMk=g30%?D[NCjkQ.D7H"57H0!;BlXA$`kn7n1EdGC<aYL(/_'*jd1T34oVW=\TYe(?ulrSD)sVDoBPC4PtCT
%=bh@:O=5uSUop/A:8A;k:Z-qL%]hdMa1"T0NTh%.EN0bc+$XZ@C15I!-LeKBoa0F6_qTpL8R-?AK*hs@Ej6B:qs'$>:R(P*TNW$/
%4^OSA?gs(es0:r@hdtaQ9[-IEIg3cQ^@uc,_`>64=4iut+:fQ=h"tP^D+fD'5\a?8+K`X"&pW4/im#nIS!>O2K;]+dB<"Srqa,Km
%riq"]cf(k'F&$X>185:P3ph@#\\lGl:I2un*Qu$H.(Qq6_P8=q&;V'^+%t3_28EqT=qoP#(`Bnq'HU:S@C-b&L8.70r9<O.P\/uE
%'VW%4h(Kn"`FLgcnc#*5rUP4)hM9\F\dn\//Dfu5cU[RKWa>c"DE?TenF8R5Z^Eu%K'X:cgLDta"V5KoUN?Wp\mh_P8.iW\K^tKF
%1q$5YD7Ci$(<sRR?Qn*4.4Y!qB%[>)O5@1)N@`%R@sB-1h5CI0-<+n"5MVRt)8)BDE8YE;b^7C)D_BpYi=TI_3U&_rC0PfL)5kr;
%&U`491aoQKs,Yj)6dK1&Z+_IuE'1MVaJ$C&hW00(RO[YF6tp=@\N7UT'0CgaboKk;Sj;/8kh3C?Eo$lF6tULG4j9[_CPMqe`V6$<
%iDEp(fHTJtalrghP:smL[[qJeN"MkDrWi`jj&J4"Bns^#.[InbL1[A5fS&?Y3'jRsmr=l%crA#_G<]%A8m=BHVOCW]n>5pk9a.m_
%'-PO%Yg_R5l7!'m`2G]/%DUXLZ_6.phX&6'lbt2b@(LUm4itAUo87[Tc$[QmCL^Y$H+>Bu$2CK*+\;lu\W#'5_J&dt?nm-JRCnC)
%VZ+)2JL5;.W?AG+@-]Q4-t@\]A`8IjED).LV$[RulPbN3h.6$u*Sq4Hj!J54Wnh`_Rk:?Cbi):&gT6]@]!bW=CK(JJ#-%TCZ$7dj
%eM6F9dc4'm"go6?9:*,er:bASGoO=]Vel"V@3B88OSVYfPOj<mUfhd/7@"'c-EB4:1_2gW2N'Lc7aMTCn`2Yk,l[;Pqq\GrI"W>L
%MA(TS>J0W_Ap:dK=ZgumQWc0affe&rXLN'C6^*%oCt[Rtn9qmaI!U7%QFE3uHq@+Aiut>:I*tdR;NGd7994&<7SAp,li(BERknet
%pg6XeMLRbK&a$X0#-4W2#YB_`%]dPDOq@"_qo.JfN,X;"fX8VEW:K74$dSj%f`tH04knS8Y$g\*+aqm^Q!+u!f7T[2<huQeUi6,$
%3fTCY88n91Rn^@g5o`k41K>ra,BdRl#kU[gUm<1&cr[5XYetAIQK#IWX/!-6iuYZ.(/u%j-2MROC7d&tCLr%c3rRn$4WZ&IZ2;0/
%'9'>m$s)T\k)'j4$.KW,rbeT@!JJ$ir8$`6W0WEi\9dU2D#VL[1R44`G(6u:lQ;Q%bhK4EHhjB5oc>ch6/i)e`U>_Y#A*C:0q8dJ
%Mo4:qOQ/GDhM2'?jsZ!Do=Ufpa;CYK[Q$/_34A&?B!h%]6Tc7!aTjpD<K>Jc/]fh3R-3_b0d-;cJDFbp&`ed/WBQ\!QL\DO\UqS_
%YsEJVPHmX:/snZ3FZkLSgL015<].X;*B?jK>UKM_7CBc3;.CH`]#+*+&+h?]%;$)g@^E,joX%L*I/)e77tW`,M%"9R>riD..C@]D
%(*4bD@@_#6.VMKa=Zb!g/Lu;JVq=D-Hl!k]%ITMhLLTikbH]dcbVi[jkeWAk5u5ED"o41QGQ/G6L>n`8_ctL4C27O'e,6,:-i0<T
%DfHdtd*ibCBeMr1H+[i.eA7D.4l2W\'m^GODgl#=]R!->F0g,o;CIZGA=C&O!U[,s?%=8?e!nomEU0j!QXE7HpK2OBI*fSVb9[WF
%Dc=GcW;L["4%?fn^2A#]`'ggUKVCZjipnFMSS6TSB(IA*T#<2n[s?0rb80qV*Heb"ase0C9^fFLIr4bdD3&6F&@V9#'uiSN/=3gp
%iI`$T@@PH0ZHmqn]0J.e,JO:S./%P0CW`j8'KeA`C^+X9.Hp;2o-P*_&&$$.k"R*V'g=0DRlC4-9#O^-C,Tug^oHe>>+C=b6<?Yi
%j2e_5DQ%mOrG8@L)d6s$O'e@Ucn%GGZRCF=9(?O)6^`ta+ar41hs+tB4L9=>q\j>?hC(@N\k!^8%3m5tT'Y/ff^e%6fF6U.W5e,W
%i0QE:'A8$b2pHkS[Zu$*e!grbd3sI=Dj%)CHo$dF\)m5t7Cm,Y\iu>I#kk3]:nqR2Yhbm"lt>kqU<VGS3.gO;dcE(ELL)kbS%%?P
%lPN<q3Oe6kc)BC+Js>[`*V!1#48U\a]SV/'DH2/-k"Wu(C&,]pjt3]bcZS6u=n#,P/`m@a'QV(3/@tcp-+[IPEE;f,f7i4R-mn"&
%k=5!X]4NTJ%'Z$*4Q,S-0k7$Sg?RM`TI;u09GFVdp,H.VoB&+`^4F-4Ic$:IX.o3H98`m7.6_]4B!&cJHVhan`T1;G*lIbJKac3%
%?gmLhIboXp/qJ^oHR9Ph&,0I&'4h:A-?YFk]52B/4!?B)p$3[;meV6!cF?_5kp;Kg7eXg2s,H*W4b0cs43>MnE"d0Y)V-qI4m709
%FHi+69H]?V"_B^75uH8M5h%HCrZ2-V09>oYM-<;o$c8c:4V+(:%P-%]Lr>B0+au7Rk6'VBg+V4?^j,?snbq04:eXHMj.C1<kU!\]
%;1i'$o`GW?C%UJTEWa4P'1);@"2eC6j;:R-3>#$X1U&%LN)IV#M>ku@Tl'Rk&g*>'JR7=qXQ6T@/Be;F'IWZq[p`]i*ep!'L4q3c
%h43$)IWZ>=ZOJibG`E/IT$mc2PHX^?[:.LK$QCo('U>NPeY\&_`e=HLCf(J*]CQMi<S+]f2UfO^KsdbQcqW&%j2*kF(3^cW/dus^
%"q/<P7QDVGdHYS'pRinmGr!T_g4hEPnpuN=/l`u<_k^+*QU&S\L;@?+l#Ar00VIXs8q:(0n>WE`fI_P7f/#'&m;+'qMP+,7VY(I"
%3,T.,LZ=^OU0Q].dm16#)qOq)f>OD0A&BjB9F60\@1^d("(WH312L>3M^AIZJ7[&S'^;iWO%c!U3mfX2ifcrq#n7R/)qqS_!u_rO
%!&,c0"nli-RPMM\4U2M(@8P"+[*g"n36[Wr)tX,(M[Yf*9J-5P3ZGLQ8rQ'hE%el>)lon2?o>j=G;]j[hemma-QCW^\)q/;])OND
%e[$/5eoZU898C3u"j;o%]$8+`Cm\)QfS!8Th$/WXT";#A:,o<[1WEC!E7cn6)RRGts(]qi_Xgn_Dt+JC!smXlQ,pK&,TKVR9^/@s
%e4qtUO#B2]CB%5^'-)(pNq-j<eb-Z5j4NU++^dW.8b(P@"&%s**b^Iuj6Ns]H&?'0]W=t<"ce_Gg#Bb0^7^o"X.a^`L7!#"g#<H1
%\n9:o>mogp$VhnO25.u?06$bd)i=_2>I-H0p&u`:Y8r7[&Ke<J/3GX'S2l-]L=DL^<4OOg*/]dh[\OM03K:tfL*LTO$&ES^H0LM(
%d7jJ:YPuR3V5qTWm'[G$9W^9T7tsP<e:CTF<68_lane@r8AsM[^1a^LmFh_G]"3##HrGBMGm^.5#B6^.IQ/pHCquCXUY'lXnBN?r
%'C5H`17+l*MANJ4D:'V\^ACp9Qt6gN1+#E.JUa]Nj68.)*%`cPMA^/9fAT$"-)ENE1,l=bBGLUJ'!0a#dX4A8c5CQ%n0Q-W#Q&YI
%$]S.AjZ=<ZW:(J/`,r+o309`Ml#$%6%>(a1pE<X4E.U7sZ7nAX<RnXiC,a[YP5*D$AIE6lhs>*\g3/0b<[6MC2:'F.FR*$!+")EH
%DNaJpppB-.@ThuqhSS@Z>P[@?2;h,l#!l(k!Z?*gVm"_RJoqcm`EdL#_d"GNK^1udd[Ke@K)gF^%52]POpO_=WbpFj(B_b+KUbH"
%;lJ3K!!-+>)7W!kGIk+j\:rUR^df"Y`L_\WkC"TEhKg!h(VkjL!WH3Iqs,%t<d#dG@^_Y]B.maZ`_q^pgf%=LW2@Gq'++`J@_4]M
%(XH83CiO^i%'R_-gNd>+Y%>RHq]D742YIKcfZaq?S.HA.c5f/c)$r%jY\H\G#r*%?a/X0o&Roi3]-4ut5((LC\:Q^OBjF,dX=Vm$
%#cm>'ASGYL$DdI8MXPO-C1B8Y"mJpL<YliYHlsHee&&H4!=]LNO^o$cJ6:'nE9n]L&f#g'4'gg(""M;fR1QV,j.!7BL5;Oh+c$j\
%,$"hC:0KnfHA8F%)Tpp4iF,+_cp43>gT]Xn%E[=G,%C>nBZsJ=h#_N2co2XNZ1Zo#e&eSm"ecH2jmGF5iKl?'6Gs5>p[-h-LfiUF
%CC:`<a#mt_%2!Zk*1snBoF<C_MoP)?jP`s,N:pK,@-m)k9jmBt/)Ko3dlsjjI'1<9$Jdm>[cXJS"RX)82$2_l-&l=k@E.m><mW=4
%MjIjbD;X7*3T2Ge5NCW"B;Pe*jl.F``M^ck!n3udbIH,Yjr\2(.sUm_0NYp@qCkgd9"&39Y2WH9R:TKfCD:9@3bgYK0RqrP@XR\U
%@p9k#;8sZl[/H[LR;LOEp6OoOVgBCNX-';7o.Zc5inG^/ZHU3;5K-;=N2<19P[1!^^`!G6&$ribaPrI3mkB@r0_g5Q>P:&5-aUrW
%b`Z2SCJE)_(;s*Ks86Q2*W*e_REj6I8Qb]p`"C>R,mB?[(gB1U=[RYOa0CIpUro4FVC.8E+a4Ff&W4!Q<*/<(<r<:Fb"D(+B!l@J
%R)1c-,tL=ldq*BMNt6qV*(@io8b-+tDIpA"=SH/,Hp-0ukT&/qL!:jDlNT8Z".r_@'Z?[=QF.*10*sLnddgs3]$e5QLG^/I7;dqL
%*&`1$<@9!G3m>aT?q6.O1Q0^,Cse#<@b$DJJ$);ck@Kf<&fk*uh>dFdRfC_P'TKG^fZH<^O_Bg90rd?d0^l71G<8UO@$u5+oaO0[
%.OAa@A^<JnJU,>(H!'SYkJYhDo*MJs[jW;5=#f5bQZO_#dm)&KB9/DLZta%@&$rX\>>KB4jr\2:@&_=)&5.J'a@GSL%8WK\m5`"[
%U:>_:?ECr\rPQhlN!l-Cfe+T9JLcX^1&nK:=6N[+DjFeUs'.3>>-ag"=Vb^"=,J)XW`BO/UOQD=AEBUK?E/Gk"OXc0fN]3uDYL$"
%i?"<A?FOWnE\]>m-N!#JGWU;da&-fqXHPQjPBVE7M`utupkMupWa<Q8P3fME[?GcdNKeN'#RN!Grhj@pe]/`O)33Ca&N6ot-W`>_
%fZ9`2#Z2/\8n<p7o8UmB"RB1\$eTXa>o'$,NC7_-T3?N\NAP.j@T3h_UZ/fkger.K898lUA66*ocn<\UUZ)E=o%J/1M`!<-gLqgi
%B:&=2g8K@u1,T]'2KEo(@MO2W5T;T"\RfgK0\/>ZjF(Y!ESdXP:To27OWg^t/gk#.f+a(:-oSLZ]m#Dp'(SUYYj[%330Q>r'ZD@8
%=_+IXLHr\03%@*,;!dlPfhSB?<#$D0[/ZioS^B@G>FZj?Yq\bcreK`()fo!VIco"F/7X^G^Ji9Sd=e2>_QJgm)&RHPrPpqZ/F'2/
%T:0njm&_s<eLCg(.eXIKp15C;QLnucW@)^39Q-/;_F7qPD9qc*#L<uP6FbK`ajWnW&dj31,*%C*9'1/8!H@sYDdt/T1qto3]d6,^
%rNGnHjs<JkUWmRKiVGpJ6t*SacVk>>:4!lLn[f@=n1kU]MDpFkmCgL+95cOri-F%tg(g`gA>>-Qik:3^,&JSV[`"PWg.3IQpeDHU
%"FOd<c:u-!!$*RF8*t"Uo+pfo<;.GV*O\m\.CnS(IVJgLZ[e/rdp%dJk++FDnim3A/WD\-I_1XOVKi?*E)NrSTp)1$S/dUENAp,8
%=@f4;.rPOr?I"I5(ndm3hO_5S_Ke!H3t4+]c8_[.OuD)$6nHKDYPgn`(S@k",Wpi$#rL4jGE5)'@^/BtJ((*m/_6jLq^3bU9gt3h
%$JeU+6:Cm>-`c+t+;B7"@^*hF;],uq,AEB*:WWsQN&=N(VUWAN2&^oI;WjBqiVj#+%3I%o,EYI&&l!3jNOn+LmpmZ&M@ZLFQO=^/
%U[A6K(aq_4:k6o'G9)J-r9[#ed)r=;b:SaL_OAg:$tC,6b=(m@2sl*.(>(;[*k;fH^'EDX\"<=3`t^JKag"tVCo@rRatu5+N2]*>
%CrS0WW;(:0;p7h.<(osY,`VZ;<27!ZJM^QUgXF<!:Xk2DhHg'LM&Ht_28/jg_shp^A:8C%n/,se:d7qlSm*&>:0bRJ20.39-=nBL
%*&U(^Rm)3Ye0m0fbn`MhW4A=elQ/a^W4'N3`f?c_E:cR<<DSlS\Jo?!4h^<g&MLpQ^9(lW)l<LUQ\4I0,MBi`[/@"%Ri@$^f-7)J
%XHBI6gg0?u=JI:S]!N_@BsC,1Am6!4[$W%b"Ej+!SRL`oj`Xs!NPmBSba^lOrm2p068ju*i*MpsM1]q+"/U\i!FS\[#;t"%H3n,d
%2q4d>"Ag%RB8uD_<MP.H'S/J+K,c-0349XI2N4`"@+I&8#C`sJoTF+8QAM]*JR$PV?m5-u1XnJZpRnGC3S6mhG00jgp,Jiu>/&uc
%OmZaonO?gYi+,n)E'tQIX,f2o84[fsDWN0HbY.=43!,:KH`S%C#g#\=[sYb0*Gj/.3pACaHGB\fmQ4^-]G@9WDmJln7"D<%@+%Xq
%a:6k`7?O?JEA4!V[GSOLR!^`%WPV`hX[W,)i\k>4P?J2A,W(iO^D7o9h2D'0U'S6tnSFE2s8LTn#lPu"6uJIncs0u@9@XuOK?Kln
%ib5u%9f/NkE62]!9Obq_#SK+5)=;A^Bak/n*L[/^nD>RA.NhcD;ESR<^Ye&$"?Y[0,p%>>F3bl*(8Ef\Q<+VKW0.RlHT/!mX^bI\
%L]"a._BVIgR1^Y?;09UF.dgu]fiH_IL$iL!]B\DgG9DmoD(FZsabIg%^KF3$=J1qAhLa"Re9$6Va&9IXB2rUqgF:>6.gP0sS!pqE
%I11,?Q";;/%Tb`%]$8*e8-[Wh;e.pbXM5JDH3eI&Mk$4a3CuE%ZBX;[5K8T9mRttAO)nWYYes)\/=rrmm$h._QTFj8n43ACi5`Eh
%2\T?99l#l\k!)gEACU,@(*=RhRe8J^a/Dgg(uVI`=@:h\(ds&J3YS3?jBn.>ghbW&)&`^V%Ygb6lA7.G?r\m<4gLhuqs'-(l"oKN
%KhkWgScdth/s,Spp6mSC';ssf"#\aT@(B@)61%s4fF$pJDt<D9A?[Eb]-Ue?Ef$to9i/%-<XCUrb2-,-aUH]r,mt@N;:L('ArdY-
%,f]ggbB+:TK7qEjLj4bdKAZ+bK`-aHh%][9J2Z&m60IV\.X&*AAEXATd%4P'?-Jf`DY!:-<>"A;GOE8AeX':a&beUAHfVi>.(J$(
%NMjEWi\AOa,<2B+l@ah18MLQ#-=pt4*#-#G26)=/Ek0//,!Y@<S_U9;3p:_SnOra$RLem&1)s5g%[InKDK4sQZ9BpN^VhTi-Q!rV
%_F791;(Qol_$[-,ir[?C5p!ruE:00mT]6`&R_e-d:XV4dDrS.L37(D6H,aE$kC8!pL,U.,d!Ar)@[Q-Y:fhF4A6?[8XUD_k(R?"\
%;t)@LO0BL+;NckAI_Ee0]@jF@[KR%umGh0WLM%1ld`%Dm/AHqkcD%8VIZ'3T.0Y9WA$9Z%Qs#brV)X.-'Cdqb2(q&TjJ`WIXe!k_
%UY+5-XLF8ZM>"N&M`StGs3DZI8nl,r8TrSeQ5ZYYQ$ZRG*8dltKT[CK;gF'iD^)jc<&q0C;i*pO@_Bs:aqRJQ`EpST*/f\4cKf^*
%-d(sXIh/UM&'Y2gae\X-l8![P3!r.p?&@K5j_ioTI'VOj_@XeZ]?4L*DQ3FKaC\@;B.?d!EH$(U"01U8C,inNNFTlBr`V$>jDRFJ
%L\V>+R&UNfln_q+WKs6&+u$V$N$pWWR%#op0b*J0_&ee:JN]%L9nI#dHX/eh'>Bh$:"==jH<76lk\at^O<!J+StOi&XfJ)q0`,'*
%D0=N9]OScoi#8_sPjCAm=tg^s46F*UXJp#T!:cZ2IDf1,5[r@dprpU='7os@)$5UP#2r)EVTOcts84g"W['biq4_-^<!'">n#(Y7
%o#jB<1WZt]/l\-!N9"Q!FiKJT]@D/2TdlLFU=LMIc$sCZ0Q/;k+K+QmHC$Tn8MW3d:Y#Ad+$ZV9')ee_*TO!TkRNQ-1^\3kqJpp4
%;?!YsQTLI'qV_G323*l+\JmChom!n:Qi*i$-2&tK2#:-2^4_2_4h[e[Dn%r<2bA7Ie"S]uo:EteBA8b4FuTe/RR>Wt>`V`Ff5!A*
%D%SB9<Rn9LM8mtcapDTTZF!c>@.^&9dEZ"!3#9]I=Z!'\\W3e<ZMi.52k]I<Al.$"!OK;i3sLh2>$e[@G]G,rC$QHSMYbK!CU?Gr
%MnEDJ&)._,?qi-`TO_'+S,fQq1FSGJ3U=meYZ?WrOf`D)_.5eE\)-6(AoTPoXJ"TbRkoi8]r0Zll:hZ?lekG&$=rPBfJ]7#?MY&c
%'k;+;F7@-3hD9b3C_u'A`1^a.Q5C)YN^rhYOr;hHLZ*1SQEL_p;H$o5$AECjgarhO,i@kCK@n64j36#1PC6hBnYE6k7i\=/)h^.:
%%q/b;iE\HcKkAVTB@gP4XZQ<LL.@"XM5fb6S$_;/HQ8Dg>27aCX`0Zo"NQPrjs&]Z'8=;uCK!C,0k6O%\#H%l@1E'-Y((\Q@o[S2
%Mi!5W-pA5$-E*N7pcCA<=ID)<Q[ZaZZb-N+$.!$idSP`P_f\P9G,:0:;lU)3[i?<M_FR!n^]ocU^HaZJFlU@X6t0&D$fZ\^1LXMX
%Cb2q\A+oTNGd%ku1o<>gWf3V\)XH\rS.YK*6_;<c^df1>8B_o&TA#<aM)[+ZlSV&LA:'lIj=^oZRm*.D=9h@96th?"!ph2MJCV#g
%5N8g"rqcAqQ$V04LiJLEXoHA,EQA*IY<Vu0Y@%<r?iA+Hec,q/^74Z?KFQcB>QM)iWGd[/PPXf$Nmkd_9P)!</%#"PJsKkaWd#ck
%@VqRM)iTonc,n'Z^OG_i=JH/_`($Fl[;[E,Zi)^GGDtjD0l`e<(etcoj<"K<CaO%!V@]gfYYALI-*_5-@h?U\Y\%59VR\oH]Dqb8
%9kXJ!=+>8Gf"_7<!JA^O=D.V=#7QC-J,COO%k^JB;L@M;s1Gau;EOq-5[,,VqZkQ,iQN^Y#(Q3&VIW1"bU?J%OO7aFpIK\DrheZE
%$g$rfNF0C<^\6k=7B(@FW38+06!u<Vbd8c^7bD)JbR");EW=6LS.uqN%bh(O0[Ug6VR=0P55t-9Y*<8mrm1WD+'sHnB7GA(MgtHp
%s6t5^p=%ptec.W^p_Wu/+9(t`rlt*ci>%FRSW;+ml[RnRIJs"\Ie>'_1YdKV"oh+qJ)ig6s7JU:a?RCJGl>VI^](_3qO:h4s24ka
%dt7)c1]1Upr^T+D/?D"sIah:QHp?OR&u9=<I>L7MQPF)Z")O.f$&ciBO*<XVXPf)Ck-0S":93!^io,-gH`]YTkET2OiZ08:@[ZKs
%2E7>mPheK/<&n(22YOS\m%gI"bfCF4mdV@eS@eh_'H:5_^`+c#6<oWAE<.`ST?S3<]`5(Eoqo:_4T)CX1QTeus89]SQ\ho<ai%!T
%bY7s-@lNi5VP-5%)YsUBe,)glokl?BXb4<ML/s11Rm7--KV*_BOSc]P5M]]F2m/2@J<B>`[XA/Z9sJls@L+mt/qAu-s*u*N5pFf[
%4eHY!^#cHdBhJK`[rsf()5?.CCjj:UM$[K1Wtg)orU_mIIln$ep_*)!)dbhYD4>]GCg^G1&CNAd3Y%dTh3]n@`p.V=rV3^O`55E3
%L2&E#WM%G]FY_`-9:g$)]Y0m8[IiWhe;(p0P>usCE.HQ:h:3HuIc2),VfjOf-=2m2*F3P*WBpfpDo5?d;"l]fH7d7+"@no8dm,lF
%Vff_CB)56^jHo^J\8.jNjg.aKQ(l,N.NimQODn;Jl%G(1N8`r%qs4-a[cZCTj(`&/Ha-VboV-CsmZ6-]ptoE.^W`bT%sY0>hT\:V
%OPNYM\$O8ukkO]IAZZ9]V(!W>lWD,L]Y2JKgFEG,8sik%JdXJd#Yi$J>9k?aXFq%/W,_4'_9(Hsi$r!jG]#A%D_=/Q7b/W?F$"Uf
%;ZhW[pVMndF+Qp(JBgt/[ojTA:l;\Y@-+R8d\=arMr3F-5Q4?*++H*H;4`TYe6%SmpP\'-r3+-VQ.R^H<`Ft4)O+a61V$mTcj=%j
%<!KJO%%l,gpT<i89E1RcTqQMC%NJ:Q`Y5m7(/XD>qQK8fE4O0FGO`sCL;BC3+/aCZcIg^!bJ2(hGb^/?p;aW"C=Q#_IcJA8.+p<?
%n,BIUZOMu9;8X*V%UkZ>8*-Tu5A_I/->^'pO2U_B[L;Su^hILcLR,t.Ur+T28=?Aq]`?pRGb\qud9d"5Q\2o8WEi`tm).olaIX2_
%SptVgY(h@:i>53EB6-6ca7L#&[t4D&OcM68nU?EPb'7e'0mgg-f=idY/XEn4g8GE&3BXmXfdm;T-]&-cDM;%E>Kt,!/FYCcd5=c?
%@&F^lNqA.i1eA'AhBH[2l\!_j'\P<9!<ap2X,'d1$4/VJ^&'fgJT-(eT,X.-=?A4\fG!Y0P;Uqt2Hu?;=tg.D,8npme,(+2\OR>S
%kJ7g!+_36L@/8B_$1U`nMEmjK?5Je1Z:h/4"hXPFZXdh[CQhS6E.gLD%8'@T`"r_>QKU:^ZSu28nAAPr8t9--.Lgh-f`&pl^m8?J
%ng['B]5Xh*S2O1`Ob:*<-]4R5Ugjn]8TK]H77>c@NYS&j5N(TZ=.LVg[[*n!Zj$aq3DNM2\*8RVn@)6Tl<TYj_/tU8qod\(CQlgD
%cQVZaYbO[B&!6&R,_&j@0E;eoakP3TPIDQ;!iMJf'(Z+.0GQ1eB>oKP/bap!V)1Lo]1Y)tFu/FEancXd0*]bO,eeRGTr6r"5_fEN
%N`"q:IXkNn[&QlO%-lX<2SuR9Zq"SOUWY_@o)c?#A8$W/S*#>HBC^p>F?lr;LY&p%"e998bUpjE4<!3(WC)mU6%JPqEnldJ5"6!r
%+'H_g:)QJ`7uU+;AqbPnCUXT\m4ou>>i!eTR`<SD66;4kr9#rCp9-G<IDesnT].("$e*a;;XoA%aMZ:mNt;H(p_`&(PeXMV$8;(+
%,WhY[5(o'\9UrRAQ@cG@<%>WMk-El(eUGDO2';.ehfZ(2p]<jC,_V<EKOe"tpPJQF/RtIo-n?%?G>mEd@FGD,pU#*].RZP(:TLed
%kT#)/(K]s(WKd3b6]@Ja5PdUjK?%74C8Jl[[Xt=s;ol%tJ[P-LY%S#eRi.tXLbXn?[\coeX%h%lZO&S:S(Us94-[s`T6LD'j,t2h
%>4;WgN]ZI$:</8n5o(nRgEr#"[(&HT>b]]oOKnTnVe[jML2L;VHk"q]H>V=mftXdEi"$Y*+jK&"*UD"8O3_5V!CsF=VRc`I^3p58
%4<D>uOZYh;c83Z(Ri>kqGj+G"%\R9]pD]C&VOO(&cg!5'1YO&kXG3!A4W]\n29g,MXa%JZ_,(eG_#6j\+#H*k2G[ki?9M2?M-1U\
%a7iK)-kG01UDUX*BukVU&f+gaIgHQ2^U';!mtKt?o+Mg.i%hH%8^n)CO!SLNfb/qVQD=gTeas[/c26Mt^OZ'4c1WQX./GtA;n>,J
%=0&;,=R0qlW"qm?-6U(K(p#_)<thMUbAnIf*E2#p;*#?"FZ5?LgOKnh/2CfkNX`DW>[c]g=im-:CaB]5Sf)4#l::&$bo%.h`_-+^
%4L0r+9G-EYJ]^a%C_B.+<;D25=8d7RaGXIN?kG$kFfACppG'%)ff=70/\uZb-o'^F#c_8TU'[$Qd.p?V1WaJ,58kh`M47qPQ3B?*
%K3o[\#*@&F-1*7HY+mYf2`nuCo&o$Ln6_H^H-.n1a(@T8S1Ht^bA\A`--K!p%*PG.lN-,L\-q5t<&uhe'4Yp8)+O0M[2B^TMSkM3
%Jn>aV&Gd9n%iWiR;!fAV#EqMP4?C@bXJ[tAJ03$C5/kF@Y`Q7>'U&m#GDZ67AQO#-p,dcI]Tj'@$ftS.3Z!u%q8\Yro2U/8YDeIA
%TW`e]_@M+gj8\e?\)VU0m+WJP*Br>p(nYS!R)@]'E_fecR)h*cD4")0%=_#GZ\935?DeuQ'QAH4!#'h:9ln.,Iu#!`Z"YgF(+\'t
%Wd88gk4!WUqs/J\I^$"XE4c:Rr$-sJ`0=>KQ+0Q7HjGq)Mu=k)O82;ICC@t^csp3<Yt@nUV=9fDAq1l[&O`4,8t8/b4(;=h=-7JY
%q9#f!*T]2Dpl*"$5f]11T7V1eQ@MYGZd1G33l+siT!4@;Sp^_1*>=0I;uCP;Yg9sh27VljAC\B/^[lM$lGjW_6+lI&jLfXSWTVKf
%+>63K[9$YmF+jJ06&fqsL^$Hqj*6mWkRi$!/sdoh&6Zo.ZmE$iU>u-T>DLrnRbuGkZt1A(8a%q1p?ZBZ[p)(g;jL]6fQ.\7>L31I
%D7AA,\aerT",<-T:V'U^R*7A=mX-E3Xhe(ReD->b&W-LISjZV&>1ar7VV<b&qEn?B&Z*RkL>g+VILL^O!(Y33FfGsu_k?J[T+mhW
%ND89h'\0S2/M,*3d-InZeOu/Y9:T;*YIH_/;B?*YFfZpEcZ-ur$lhHu-s\fkql<j11"8]VNlq5SmDlW%5QTqD=?"E1)T`B'R3)8P
%J0l6X+&\\f,C+W+E(.)Al@Y,t1p2^A_3$fB6QoOqI5QDo+LuR)EYI7Y?FQ^"[k2Jr`=2A)ijM5O-.o;e@J3p":U-.VQ)6!:5'RDR
%4tung7<\kuJ^``4WD'5c/`FmmjX%15S]*@*9^gCD9@u".C>+c>:s/4_Ks7B;pc!GA[gV-#"6OeIU,=UcTOVPsf"L>$hM`'+JCsb<
%h8Qph?QgS&2J@,nW#.B4m0ZrM(Cd7%.=eD^ac7_]h%XgXTj;,G=6R.+[]g&FhIj!fLp&gd-mNtas%0i0;tl?hg*FC8?*T(AkXhuA
%:URqqNQ8ij$,\CbGq4C!&3HbZA(CLh&$^W`/%ni_"E!K:qX=P_L5RX\J0.W8*PkqGB#@Y.nNf9h`AJh>0MV;kl;j374?dF6K4"tN
%I?8#:WJ12T=jL5i(<6jq5@+Qf@k8`^[NPI=C_R@L'cHAS2!FGkm-_N<G]S!c]VU4_OFeq!dtl_0&?R\S,FA_FYrWJK9n,-!K+%Je
%KU05A#L`Sg<VX7Nd8C7mFg"0O9tuD(F(?&`l.=Q099!jh3,?$o-5HcPRs9WVT6n!TYUqAA&^5E]'lf$fq/ug;OZd&2fgp6k@G#l0
%H&UO[6LacK[3$J$G1:)-S%:br`3ui,K#=f9`>:7=N]uD#(9"mP'>sSk%%EYjjI2Vq-W\/i/`,OCI5h]5(1]*mHPA1WKAJ1NAG"i6
%r==8`,?W3,2o:G1F*1K62gZLTOdU@rPf27Ve8a2EX513ra/I%Ie"B&4KD,cg`p*[p\S^p%nF!I.#/dYa!U>NY/%li@A,e_.XUcrV
%f<bJ-jFS5pPVIT"ea\V1rL(eYfHAN5UL/Q^8erM6X!.i8TD^f7Xel8_GNSO>`?*adL1omkZG>=M&T-S`je4,JR2:=qa%7?!f)D5d
%Zhj4f>Cr$+nKH,5#CC(%H\6SaeIW!u5Jcc0"@ih-l:Ma@?1W+\#GjLCltl`D*uD^ZQFgE;;rL>R8QG(JaB5m9%UL:L2CM)Ef8*hs
%m?n2r4k'U^@^lsgD0p-9;+uhqJeb=.Xtje!Y84YDQF3N2ON6@Fd9nX3qaLX@cq;a0g(qhMQd9Q]MtlfkO>M6'>XF>&4b]P!i;Yq:
%12('p2pZuEmD6Y=&t8f!>!X81=QS9)%d)e]X]a!=0qXTe#GVd9ltsTAOICYAAWn_J1uFb9`sN7/MpLXEb+r;-]AOHV2@F%DK)!P]
%$TbDhkm6&BarT6B]TG"=MCR[SMD^>:rG$2l=`&\BM.aJOQKgAEHrC+rCUT>A@%9ff`W+gc,7H3%Ia!3h%Xjqj=tk&YO0X^5E?jf=
%MP#oG9f8;/07V3jgudXL$c=3F/ZP[^qH,uXXaij[YW.@dmlQFf29VF<4CZDIn@/k*2`^kcZ[EEJ;45U$#WeHG+bDgF7i,dCn$A$Q
%OeFC80k'+F(OZ?)(HDC\pL)r/-%^:k_dN2U5j"rs=Qki(i[^LMlot*:;C*V^mIA`,?hV#+n1i\qoNRVjOIW9>pR':rojla.:E4JC
%^[uXelq_-fG0Nk\l3tikATDk0L:=]ji!r-c:90hAAoHDS/5ojE(e&&Mq!d]]h%j??"0iq`K($%9_qU(b\4!Yl*lbjnfT4r/58a!e
%C$s,Bhn;!NW^Z4WqdVT1RJ+aZ=sBOi+?<<F/S<fNfAM\2a5KF[>k`7%?]8)anfSO\T"Fi\UXfT.9<:K6l\VOimR?D]Ef&<7]t6SF
%I<-/'lZXEQORm\hFo5=j&>1G2fe$T>q+R*U1kd8.4r8*HV;[&VH_IC6C9Dmb':'j:VV(\sL]2VM!"-tR;!-Y`>$)eAIEe7_GQ?VK
%ZS?UTBK+gRl=*Q&dqJ&WL#A$uBq.j)(I+'-DQS/TO!TI-jl)<'qr.ctG#OjHBDg[J/-_CnQ#KVnI@?WVrg'D$KK%'Bo;GDGHiI]\
%?hdFokeSagAlY.0Eh]Ve-n+p))U2<28K3T.oGcT8P2U,e?T)!?;N*#.>8)AU&#!;\pB)/)>,u-nfs?,im>]"f=nLa:q9FS%>1)Zq
%GQdS@Bh.%aVkVT2[CYZPU:k_.`m97nfBXVkI;kiLl_+eS5G%FalZbNTfV[L(##XK$I^80!&LU]&(:lKZ(c')mSm1Z:])ksE#W4=;
%geHt,C'uF@p17(K0Gs!=T02?]'q(P&q]N)paKp(+#Q2u[s6%kMn`K6<(CR3=N/-]t09o&eolW>eI`jF(o6=^AIOj@=Wd:o1_!CR7
%j2j5f&h>'04maK$jT0o1%L.i@'IDP"ZkaZ2X`.pD21dXg[RVoWJ&\YVlVCK#ld\n=\[G^e%_`be%ms&:)LF-VBD_%1Z.Qq[rObI@
%&RV[Pf:"u1.F<:G)$##tCL=*FY>uXsQR[cE'Q!/j1W/<m_'9lTlWW-)"D9ugZ*;bk(.p8]C!@^]kaK<.I^Q@M!gh@@<ifKA@QO#I
%,+Pf7gSW`iUlW_4LQA'pXJth=9Nq27jYV"r>I%ZG-SJ^%*=kYNSHja0/0D`2qt\cHIE)bg[C56f,2U&mn4D=NCc(q3rjPAH)\t:c
%aW9#9[DiIGk^/]f\f$^h,4K<MQCIp3gUHh1F_'+K%JW/,,+p`">jmG'C<IX-!@;_p)g4[P+VAH5C8sS!gW7.U=cZkOP57RE@O!\'
%GeUcP;711(em=:6E0&p!34ot4YA8;b'U$X09s!YD!4t0o/DLrMD6Tmm7KMcuFO\Ctm[Pi=)/W3-FkoY:!q-u6RVss&A?#BBW%n3T
%);OT"4n!Z:Qau"Y5J^bHQNcdac#n2,f2.+uj;k5h&V2l*hfJ>(B.[cg50-'pUfa6P\Yn>#2#n/sp>SU6!rtU<.]]kAEsk2^JIW9[
%^B%)7enkkh\__KSJlde@kPJ(RGAd+p6&N31nV!#F!L7Z):A>PI!a't_d+\^TJ$&iZcMd+<PtFll?;Zi/At(,(/]cib]sbIleC7Y?
%i<t[`4LQmnX]0<S/[\2c[I>DB_!RrV%COf<%)U8pJRW1N3U4>;;YSg?aqC+Y-#GVW8eEj8;>*[@QsAhc6%c&!\>uo<:adjd#>k`k
%X[`,<H#_Ac[VBe#>gg#P),]kPi3I&>7<@5cm.G<4&uF"r(L&=;+lc?s#(&L-LQ4;30e8FUq0^8Kkj"kqiNN;hI@_?]hna-C:PKeh
%LJ!<R/>FIl6H^:Fh?#'gDnM!]#<TO#lTKl:9BMnO4-SL3Sngl.FM?Q<Oc'q:cWL&f19n.>ofQGZM`(-S"JYr@i8Cuf!R?pU!cOmM
%G:<::PoUkXq<C8XTSQ?5>Zk\"$cs'I6Hgf1^.9AOS-)'2:i8AGIQr]i.E->#!:Ym;/s#/Ui(UFraN*L5,22?EoTejKFYNW3qolM@
%h82rQ*-N4&IC%NMJ6VUb+M6sG$-C=s6UDoL%8_`OKO+A']@0V+r<;U!Jt%/Z6a(suj!Lq>%1\#:MQblY+@Vc"K@q]`"DD/R1JP!;
%."(UHj+9dQa8;ne`<'k9H<[TeB@$6ZbIAZeK`i3!Zc-fI1/?4KCqA.d>ab.F]=(\HE.OpWg2X&f2TaCaS?0+,Bs92u\X6<5B80iF
%2gTIanZPqKA*b\\(@Nd86Y]:@PB_nGEf;AG8Lm)m_%sY(jSX&f!+-769C,iX''C.ieN#]]F6#+-a]EE3^muP\$J2="-Le`cXS`EQ
%T4uGPQ<lE!_c0!b+R6_,6G((plq^4NG9Dfu;J9/i>FflfqoZ8$[J\\f>BjG"#5F`P/lm<"#)aG!2HOM7^q<Xnp'u6q@5'VtNM)T@
%C<96foS:S9$0Abg$S'5R;V6U%A/!:4k`**Y9T9:qOq`3B(q<iG]0dqaL6R"D`kNk_XZm`oJUTG9F47Cd&4PY'_.Y]/2AS<XFq75%
%1"-t4.gSfB8\J"UV?Ud(.cRO1QPu5'Wce3]6cE=Uj+2JsTOtd\EcCn*j;$(Lcm]O9R_a5D.!7dXFtU$2S:J=IA"2c,grRl]NQp`M
%!*V//1::CW*;iCE$67<@\)7C%A6"^LR,JGn1e!Q3UP@B.EXW5EOi+DcWe!./0)iga'qK:j12,G&g>3[N'fLAmK;%'Vr9&UL+B#mg
%jh'o4?(-@@!Lq\W^[faA84V"dT_&IC7P.,B@?MRi@#Ui44oo=gdp/gg&:tQ#Osa4qIh'nN2Ls@*!sFB?!sEHH@YA+B1D7`Y>$B2_
%N;pge&k,VBe-Tp(\kTe0S59XIk8aUJG&EsMIXm`iS?lY%C-QVtlN*aZ('c8C&(aJfjNk>L/#o9$lZ,^@bW=:)Q)3u.0g'bQUl<e*
%2:6SlH'@m@(qaH&0ppN$%@Xs7?u9^?F=I"%hk##%fKa+S^QBJe%Lh0SbJY3di,"/hC-p[-HRhEY7O2[PC1`1;Roae'C5eoQYem<.
%EAG=3+4hG,J/JQ`>op<<3QH+o;`8$$KjA:<m6!2+^&q#S/PHtAG!P2_0NEN3CX#,L[8n>\:_H`(\E8,T=nZ@Q"-'TkaT8UrHets"
%KE["e9>60p(0]N,(Ji`=%jmbh,sVDo"bQ2bE7+s_'k`$Rf#K-:bPehJ;;$\Gm4lI=O(",NOrU=4jfHLY$kl=O-"tj&,!%-gQX7**
%B@t%p>!Npelb:7ElFn)MHoh\6bXJ$Yb!TFCDbSfcE'R/o3cZO2?V6fB/`kg*O<Z`q4fa[8J=GACn[(2r6H(sDa<%gj7r*<VBuj*p
%TZ#Tuf,V@`-+=X2W_N$VfJW@E`p8KfE:iW&VcDI_(?R;gQ`!tL\C5i0@hC=[P=:Tjejb!Oj,WUHbF*P'H@3'SO3nTX0"9/C!V5'L
%=<WTc"(k]e$<r=<Cl]7/[g3!f(Nm]ZR!?cHG:1-#P__gtF`$aN58LeRP,jUq3]$dD'L7':;'Io9;ud@dXp>>ddVZ,F'T>L($ajhq
%fXC:20rnG/fIY%gJF$a,s0I1+SiQ^2lZ8R0%@OUf!r^u54CiC8Nj+.)7LX-r1Ea8C7!9UaZo\L`GcM;V^#s!O%2IS;?bra4.)GYi
%Y!,`EQ>)!egu6;i&u<SZ%-bd)7T&m^35HlZ-nu94cT#?9lMu`p@?>'VlM^li</G:d&uhZEOpQfPEjMJ\'Fq2',q)qHJ3i-JoJ5W"
%lk*LV;e82#igC<qif'4N"[HE+S6qoT`iA05]?_PU/PiC%liYP#AH2"Re!:794D8Li:cj%%MXRPb]Je<4N$l'o]&=pQi,%?k+@R0:
%$_WdGcN/[c(ht4*^Uj\c<PiG^?$=,fS"L;A##M#tI^V=.!HH0^,7_fF4U?FgT8_e/%*\Lh>gaIZh@_YNb;84*e9?3]n%lUIMF$A%
%gpIfR%4j!"_bZE;8]IlE.3f$?-9'^Z<"$a\7F]qB'h+7iQ4jgbO,!C2%dh4`b-7]RX(Bp4]F>d=<fN;YS\PtsPVQ$")rKHjE3m0\
%COq`<K8]!oYc]sic47!')<>&B4tiu?o(h*op-ZWq!I:VNd_YqIYY\/5oN>\mpD";W5eL4KLAN]nN>HUM&kT!E#E,)S0%iA8%#J8X
%Gj$=Yj2ooq(H;DT1onr)l43N\\:l'I^b/cka4>l^BW!!%KSIGQB'EU"6a0Z+Mo!DfEI^NFU,A0/8r3k)_`PNFXBkX9AIgim3pc@Q
%XrK"to/(9"J2H,PV?^LC5j(B=UP,(U,?6eW'a//@BLc:S,R./\Y+u9IT?7Z'H&='XL_'3V;CR-F7Y7BqI6QU5ZLCJCrF<Lt9b3B\
%b8s1I:m&Lm4,L-9&D877\SZd!G0s$0pln]*D-Tk%dTc/KH-`1FN\)$U>GD7P[o:MfNoQ-0gVBgC+]Mq[Ou54WY&%3?TdL#Lr[.Z,
%eQoj\[+6ba5Y7Lfbb-M^Fs@qKa8L=qp#S6)9"*]0#AK`eV[*i!=0lYG7AnT&AS+ap`_"%)?pphQnkBd5K%HA`TE(;A:uECn.l<Fk
%?kI'DO%33.ObQ(sXY%W`=,ppD^V%i]P:qdI\mjq>LE&FS-b$<HOADu%iJ*P$#Sd:OWg*u.W8MCD&PAo,l'-_F0_#E&=km1"T'eeg
%a-umuKUro6i)H>(Y/#c#^S/RI#^:=:W<$ab9s#@Z%_W%8aUBF:QJXTAqP6;0IL\+]@t\G^T-VRpS\)KPYd+k:7'K]]%`C_aq(jZk
%UdCs6iH[XrN3@@1,QmuDN[tW)(E"2Am,82(n*qJ2jkVQC5rllF<.G(6A_nKK1N6)O@3BpQB./<WQn!!1g^b>@#Ph[+O6X9gI;r]I
%H$sJ^a2,7jcL<LtC`Zt0O435#9Z@ofh8:,[nU5<M^A.6GcEpB\L\Dg\J+pb[9&(U4not-"jbrT!rT;)"cThHcGMg+1dgn)rs83sG
%^A@O65PfU.aKFe,T=X`SQ`kmdq<$R_EI.2EIsUeYT7;7Yk/ZAnrq<sjBA3+8^q[SZk/T^)Kr0cSl[n$/IeDa%(Z52;5JR!Uc&:1<
%hS9'ahgbZi48eODYQ)pu]_^UKHg`\ZMT:)Afr+Z%lYdiJ6ar7Cb0RhrruKsRrqFT;IsLk9IsCK2bkL,AMa.4!s*jmp#LDS(5P`>9
%YJ9o$jdZ;Lif>aBB%m!'`-R(8.M;fU%h.VRX@n9V%>&Jo/CD`lc+MolaI`qg3',Q+#hUn)77\!:cnoE\\\X*4Y\&ImL\3':94nRM
%EU>-JK9Gsc^j^&gNNuQUWdk[Ch14;$.W.1h)A:`g,;%Vg_)%DjV:'GpeX]&6]sBqi6knaiDKXk>oE<[Y'TAeXT9nrj9+a$#ZD9U6
%J3&3/TICAIW<Q?,bm_+t/A]'*"SfKEHtO(e2\[bse60r*RH_YWQ[tCHir3TNM$B*sA/"YMT2CB>GaOfO_(E)=1+.l]];c7-)9tU:
%9fkMt%"b,e;;D(:SsJ<!+X`CZ"]-[r_r,XYWo2m!8XMpUO(lr\]V]@B#K19@<V5C]'hm@^h&o=S!"(hr%7DW(hr[uC-unYUZ-+JQ
%5qjob$lr.shC%04?BI'-hPr@@E:&n]iHbe3rQ1^CpkoOrNs6n/KP:N`T&`o@JZJ\A[X]P_ISp%qrceP_b;C($-bnjrp*k2`WXN/T
%f<Jpc_&V`EGd\c&SiU,V&%&;m,?C[(5!?gFSZh((Y,lQsi*5iMT;r0:!_0+k_7=/C)5Kr<6jSTOL!aY2m[/<.olp#JZn7koMdP,7
%p]o]u9EmYQ,S5?M'<i9I-Ecg=agSZ20^"jWG6<9R#I6Tl=2$!GqAAgY$jkfI^n#66#+U!TWM")qjm`@;pH6b)H)hE1&Fe$e-ASa)
%-HP0nQg4W[Q^.ca8ul)50b.^ra&2XXBa_kH'_Z*al#bb?i=uIRO;0d9RNi9#Z=&<@Mt4+kgG:ps.L*ZikQHrK'D+gTA(+H"X8uS/
%>jFAtbXA@u!>?nXj'T(@RP?79T6&`h)p7N1=K0tB?i+*\Q_DhG=35)/Vj6:O+Z'C/h\CbqI]:=jYP>]bG:N[WLn5dCN9a1.,HP>V
%=qPsKTJHcCInnYS,YA5;d:I6SpEn^?HJIYk,:#(!";8Q!Wp([>3OrlQXL82[\WR/H\sdJDrmd`/moCqO@PSnL->T7S">B)"pVtW(
%o$Ueo'$)CV4C!LuK!_*L"E=-oCM,[t@Wl@H;A0e'G%2gb"Y'<\94n6bo0qGbL]Fq88Cmu6N3$S[67rV\m@hiUZTNEXnZcsd_lse.
%LU#j&TsKeoCG8Oo953o?_JF`q"WD]_m9m5D*U2c+&?.2&jYu!%o6HH"W:$`W&mAgL9Hjn+NDB<h(@b2tq3WI/0/dcWChj[6.iB>E
%9Q%-LE%mja8pmD*$2W4&)5&rsE@2oU:haqY;fU*i<*mq`D:'\j*c6+e+snD\rS5MS<+s3A/0I:(=S*S$TH?(RN6lbP-J1IWM.1/S
%7nY'ZmYRcR#6Hp4Y1ab@MqkEe2SgZMHaKGA'b#**8SnZNBm:8QH=O*;25:KbY=o*ij-?1;AB8YTVlS)IZfcB4It,W#PkPLaW)`t/
%;65hB$p%mu0c@Nthb&/anpAM8ebF%(OMojNJF9\`<>aMf75%DS!KR4AgYF@[*d;[jjO=]_Y[JmufUD).:SS$KNE@gl^f7?&+;^TW
%^(B!"#(aXQ`m3cB]%4@aC.@#aLZP0]VXJ])*mI_Y@-9im1`"37OaT`*rG8kV*F.h0Mr%Tq6Js8N)kE<-NHsI[9KOB^4Un/k[Wc'l
%2iJC4:,+SMd5T&kq0`p7UsGE(VZm_.82TN?%+IZXZ(>NG*FrRrLB'2j7ESc(PoULQ1+.FSf9uc"n-dQ=UgqM[a4)*e^b^ie-N[LK
%T%FJ*-QhJ'rpum-`i#]BImRELoF6pgKj@_*f]7!TZCY&eiM1W(4dq<F0Sjb_6F/:B)%;].lpO_J>hgY^[uaGQD8rsD=Hi&84@WEM
%CHM>Dmhf\Q/ORXS4ua$!`Kp[plncO_+[_(:Dk:4H20gr>Dn,W5`081Q="`mQ6L\m(B4rd>'WgIh)FSZtW(4Hb,ZYKg!ai?;@rU#G
%0gt8gIU]"Pn2'B/lIEa=-hJJuUG[3'p?Xqo(Im&;`g\X$-Y7tSM]3]$`q#C,aRI29#T&9KedNkSb1WSfk65C'n!5!UH<>h+^#*#+
%H/or$B*k3(-1X0#eZ"M5mp:GJ4Wdg.2G,R9`Hjq4LQYeoa!^0V:FsQ\QA6A\5Bm)Qje4oRV(27`pm0<nc!"GiQ:K>c]7Fo`hGp4P
%3Ar7[YJS.,^C9(GFP[C=L6b]%f?VFq_USZXa^eKRC+@d/0UTp_"W#YN*C@nJ,<JC="6/fp):_](>M@&m+:=5b3ILAUZ$Onm$eq%/
%$q-?d*iJdq2;$t,+VE((]>WVGi=hu$XWn_tQVE38oFb\!0Y24glc?=>J>!@,/r+!Tq8SfO5dioa#eX?Pfgm=u/IZfF*JQ]/c.P4.
%D)U[hUZT>o\kn<;]=F"T8loo,V_pi.m'Od1M?ioOnlZ>S.@lb7AP/p%+NI@*/YLDB[E3utS,-Mm79PT:9YUOiN8LFrC/G.$ESDGA
%.\Prc.T53Chp\Ab/47.X*.Nukf&Kdsp%XJuF8?im"Ak6NM1tkM*&g+*p4&W?f@g2/>Nqpr5Psa/2@fcMe$]aapr(F03BhH[E/IHG
%5a^OE[h,J4PYK*:pr%$f3Bh:)`<Z53>D^P_;`5::pr)RlfiRX+-i.Dd.6m^SDdS"oRP_BAe7(WJ>l<BlJ#;l0n,MduJ,T=14T#'0
%DuTOkoiLges7GZm:hq;(F^9FocVO3kDQiPBjL+soYR35GefFAk$,smQ2QPSS-3+Ct190An'bI$Z/31?jPsu*IEKD6@"a(G+MZnqO
%Mn:#XBb3gb>Ye69RDG3LF@41(CcFt_13!:^Z.k.$EhB`%O]SJ&lT6j4W,-:DrW[EHm?n40H-X7likP9Jjhs'7[rNW(Q7h85-a>C/
%K8(f"WiVJ7%@p?R=F-/""9<ST'mpT.c.fr*5qt/3fQbh.B3B45&9)t`Fo[Y4NEYE9#/(+o)MG)He(e@?]0+3fIZ6!:iaGnh+[/MQ
%gWusE-<uP='1#jP[=QhB4fi:jB8Wg'o7k8.g1c]\O0FA*X'a1u.*%WY_p-rF*TP_Lcfj1(>C*2l"&LHZ=!I?fRR+Kr764!j`kDVh
%JJnOnC'6]63SXG3a7nNVL6G-Y+4jC"@8N\=a+](]+!_k+lia7N3ib9^!eG3nDQC,U[)@UiQ>`[=lGh2'4.>P[)`e.b.oGA]pp:eG
%ibd5U"Va:F5_EdX0XD22B1!*DN\2qmg`_U0=4E8Er,V_Pe6!83BqFo(e8kBs$)hg7&0the>"G<;YP)`]j%:mlcu^UUeH\f'crE,i
%d.&d"%PiQo'fA3$2L:;u'#J'rQP@A$K;jC!9[J,2$kQcPcS[m)REkY9EVX'EANXPcOJK'7c3,,dpRQ0>fH<V)7?bDY$jHh,8JZ1+
%PYhskHIM'Y:,,+:DP&Mp.XFd'q8EbUCtg]9os'jt<GO)N9Z!d;XkYUG&sC4\TCoLJg#7f6:,pm":6SC///)+%RMB@*_bS@BbL?M(
%P;mTAU.^k!c"S(YfCaR9(:^KYLY6HO)nFt+"J*M>)ZG/L;ZlSfmM9pfLa4'^rRPds-\KuD[Iru;LH/(Op@Ane14L#id,N%+[*daR
%'t@^iqb.U5#_\$6k9u5D,fh$AEI'7;`^1LK=P*6Tdp7%@kHsRCGhQ;Z%9t_i'cQ!n=$@N6b-7"n4O,FphHlnFEYoC8(XE)'GHB,)
%JdVm2q],Zd@T"d7$e-'iTdi8@TI3g>]=P>Vl-\SN)<bASF90k:,V0//<Y>k&%UA'RD,J-n>AA\4cp,G";nt9E\A+/]l1->\ZUn$V
%<fbtB'h"k9)$UCRQ;(G]XFGDjEHS>pWAp17&[O^I`NnM@L@B]r#4Qr]1tj)l&Hje(M]C?V1P<uT"o&=JT-?=@EmcO?7tC'/LDHo5
%RqXtRJ#$GQ4-D,k[/*Nid"`T1)2DKK2hMsAc^0g8V4TEGC'qR@d1`C::n$r_X5&jI#Ya@$YJFBP?308I)8ef1.C1)88epeB/E;):
%0='fn1OjMike$)M:IY,R^6$?+o?SiJUP;!lV#^Ii":\``Zpo".'h4BPVRSEX4Vd#D^ckO[^KCqZ=Vcbr7Ukt&/@J-^8XUZV?%FZ#
%.FXkdZNo0Q9(tT=DFIRh`KIdK%id*!!',0&Ce8b`0FVhRlUK[O_4F8,''bFN!#-UDU!dKWnlj@c$(H>lqOsQ<@`%QYVX1B!Jiu'(
%A+FNs`dr:9O"D*Ai'bn>HV_`o2NXH2N^@OSfa/TSlr)A3cH0:25;UgUE>5&dZ&Uksn;9nT$@#2T^m,d+?8fO$i32LTg.s3$SR$l+
%bUeAUq=X5T[68H[k:gLJWL[$EN_U*#<=fJj:q^L=eKrZ1!.gMD$fK?GXA;P@R-ep3[L'cPfO8@CYogfq"$fH/>)$k=3]hY-*OMr%
%]8kRXj#a]uQ@OdI7=)e[9HO`&4;KYcBpL5/"2W9sc[p$i)JF\%,)[WD1O9`o2bR[$S?cQJ4mWB3mo)hqe\>.4cI0qb1BPfnFYRWf
%eL&`*eO6!gaUm&^/f.\;Xss;7P=FL57dQR\muMW75;M`cDlI)-=YkB)EqJ[el0XB6:p)%i%aC3;`J\?$eh-3]Ka1OSMlQp$Zm2qH
%mC%Qjc!V:O/%Mh@![L`u6ZDTOh^YQ*%Wjf=e3.)a:21><L;9jE76Lj?Q$kt="'tPU>WP4Bl>_BT5hG*Uj9h\WE\u7SJOMO793<m$
%P9jTN/$TA32U$X<TIIL0]UTQI87U0kW\%-LrHMamGgOrJ?W%eFle,4oi4Z0$8+,JDs/K)nalb!7Z\^dP)7."a$?usNElhZ1H8NaV
%d&;*=(p$<-'f&gD_555<-5_;d_cLMP_uVG?m3VV@D8n<?!ec<6A#ho402W$JfsmLdK7b3Vd5!a&W'1b7*FCjg\9P7:&cV[3Xl56g
%00</oe_hi'>6RBoc\m<6,26ol,,CQJo^@um@T&oVfren03@#A\`66+>r(JV[2h43"oUr>Q4gn*C"eN/j\:GMuKQb<,s6Pri4cF67
%"An4JG+N-g_iZkjoC")IXrd9*6$@Rc3Y(S><sUDH_7iot$)EnhG1+]q_hI0hhU:):^?FK8'eMCEXTYFX&P/YCk(!X39R[Flb^`g'
%($@f)rTpfBZ"X%aK,56o6#D8Yaapi>rHq5!En#Vuk/o4nhQAFqZehYd`B(rsH<L!?Yfd2_EA7Zsm-*YVXkXGA)`+pa7GA)7i#tiI
%*K#R9.Cp'Z^::I^98b2_L.lI)QXo,U^`NC8a!Bn8M/Is2@PHomK!=gW^!WKSj?7Sid%Fd(VeGFE62eXL%6uc%E[RTEW),7U3SUu!
%R1,?+kjg+S`Z@<d:H9NW&7B*$6qX*!-$D*Ln!B$:(p)[/"4S,Y@*Hu=BO5L8/VO<3@Chrdat+PR'Jpj&41gT+hC=TQMt>^)KPkOa
%@fbY0Hr3]e]]'\PJ=GeE?/0`h8"e`bS/SqkW8uJ"*mhHsPu\GYk_@c@Cm-T],^JAdP`kJfD2`CcE,`&Q#j%*N"^qZ'l'#`Y")$&)
%G4bIT7?NZ$If:g.$#iKgV0@K[C_>g3&@O-cVNt7/pfFbY<+n!fRKQ=cW^ak@7!l2Oi2ZVikggId:N6;,%o-diE3Ms>!!ngr,>)`b
%>[AK>9gB0WU\)()QY&e/P,^&;>:L0N&DLk5r!!i*fT$!HR"G/`?eSa]K;j\I7<9-,+(B.-l8;Z9';lT7NO>&0V)hk'G(M,(B3ecA
%%`__1qFFJ`9-nkflEjtdI@hJBY3M..@f+S*[3_WjSN^McPJ7WZUsgAX`d&:FE&QuXB]MW^=TG_6d_ik]3i@WVGYA+5OM3B\M4Udt
%]`h>(ZDpWq30:H[ROLr6hXLq"'L\4$66Vk*::&N@ZK,u$*+fZCT>2q^!Xb/;2!2GM;hkL@auMq*-\@bTE,3%h[ZbJ.!L:eU$2h-W
%+@18lrE<o1QT6b?D=&D6"n_\8Q*5c9,jPpE>rY1d-oHRWmK,`/l3c&M1X[Gfc:JO98[NWs\Z-*(Iu0u)0I7:N_uihn>Y8c00EH`k
%9o@QtcDLSkEOp&S$7C;!^*"@(>\sV:%6HFN5F-R:J^X#;>n8B/FM[cRh%*D9S/I1(i=A/pck.'1ob0X#e=%LfqCMs8T8b=Sj'drL
%5lGb-JP;Wq5:=b6/p<=>X3"k\B`?Y_V.g-9M271Y$N<jn:e?M;1a/e71e*R.Q>niKce@F=XbKpMaq*Ar&uHb'HUeDl=(?+Q-!tDo
%Q1W""$2%_%YK=1-4DhF[%\Ri>5/B$K2`:Y/VuH7,.%h`49YNSH_$W=kf&0r%*ip4?kdS]5^P7W!:3VerP<oS.H0tB=WC=pMOrGa^
%EE^7C4)fp:QrSRm?o]M3/+PP7=7F#$7e/-qdc4NRs/7fq4]rVlJVljJq)iARSs+MPYA<0I]>t'#R?5b%GMnHm&9k3r#$*ESG>%MT
%dH\L,o<a$9(TG'eV\nG803Zf&)!uKRbYJ8Kn6D>)DFX)OHSP<<Gd*nY_[->ps$9#(`13)Iq0C]MV6]F_C7Ut0g]j_]W-[lL_LlYj
%V9UltT*_A6(pR?Q+(h"-Zehoc3OpYeg'8pPE/n.QB@6i`S]>bDJ$Z?im)@OFTdLIBACN$D6dOb6!3qN8A(OY6+e"&(2.TJI%-%"3
%!30Z5oZtQ;SXI%VB>@Ws=E[!8PPFfZ;f6l]Ca)KcG^EY9Ye&GFCu6:M;+$t?.m5]TmOsu`h^orUc)im6+-,e.OXQ&ub#'!iI#Ip6
%/LK\H%u(d64^'+ir%pc,'h9'Mf;Z"[R^Ve5!BTYn$`'cQNBqZpT,HoV1N__4Y]-HUGs;Z>j[I)_dHqUD.'0:,@ckkNHL3V#oDp5'
%!]MA@7/4^:"(u!hOuFLW&nbVNW5Z.""<=51mP/sl!a$]oSVr8)?:sqp-K(Q$=PVLC2U1!n3`D)DbKJYOpX?m@;B-@NqLubaNk9/.
%eJ4']=Y55EM#>DM]OW[b&f:7e$nP/))4BEfkV,rWV8TR>mS+SKnmFt[pKQuGa*82D"4oH?,u+%FC%jZ,"W=]fV&f8oq4gXt:Pu(q
%`O)C."'nV]AtTW;]S,7N6s$d$hkA(2'Q;,C*=*,:(75SZ"tq:LoF2aa!Z^k?[MImKb>u:/,J$CJ&^-eTI+#UcLrdu%S&C27$^I[O
%?/;'GI@dUtf%oGrh;Eo%0SUYla*mLmNn^c9]^9R:7aC?F;DF@?8'OOG@,+^<_d1/QoiZPT`B/98XN\^]5!=JW@3*D/68*BQMX=lR
%dbo+%>/)`'cUX2r@lS*CVJVW4ar9PJVF/bjQWcR/?rtT$NFfpm:u8T>$5Gm0WBnd@O7NkYh.o+C=YF&doO.JKnMN?hZTJtmO6)0M
%SQ%,?B/;^gMZN+e:$jKA;V7ZRFj.2K`i3qZ*`qb=6?sPoZArp:keleiV<.KS*_n(dAE.XF/T<(GYcP@C;?IC,]\@PkfEjE-;ZeXc
%%]tO>CG;QI&b_#s"LrF%0Suo#ILd+D@r/=jp?e`#N[tisi+ZterjqE#^Yco:"u4+RX!A>_Bq:"6X:=le!9/q2#:u2B=nNRZnpY%K
%^Tqi.EdqU2Lbd<o%t3f^Fe%_5b&h8'Lku.+8/9VZ1eA]L13uM-!soE@B^d2;.,U;9BNTRrGF-M<EWVWtfZ$cfkHPSk$s)HJ)+Hu"
%P#E$-P$CdRQJ?;@h+J9V-ZpY"7PFLDjR'/tX]_TB;BSf(/_n1Ul"*1Ia?BN]B#AGYo=Ku!T2QL@oSVs&MDNT2Zc@pD`u+t]-VSof
%b_IE<XCo:R-JC!QD'!2U<Zmm9kC$5]AW$;rmZdodP7TLBSTWo)TL)i-.r6j16/P)(0%9nQA2rL%/*'3aHAP,MT&VW4Dc.r)e7&:"
%a\3:(hb"M^B%E7\mnd;lVj,thif6Mqfhi].jrBLj--H:b&9T0P,<,(Urigm+@duG)$nF1l-s:;>T5KGqV&1[u_5HE[ru/bp80^pN
%j%uQik#;CWe4F64_FAMMBJkqcGSbEr_cs549):NLXUDh4dE6fi._^-q'0.I6e6T\<E?Bf^63</TDU3<B*M[e"<u=oh@;G-hFV5m5
%c4&`t7/HJ^h#m^+IRn:9aMmq+jS4bMYPf/'<f9/odS*M)Ba]!+,=<4?g=JJT1>%KLF-PEjRQdl+dJs;CZGudED$T/Sng3JQ-FS/b
%QIgEDV`D02(0?O.`>B)C:8p_)qtbI`/*q&._4'i/F\gpj=K[`gU*2S;EfSH0BugdM9UqYiV6)QAFs^,.j'pILE-4!Q74aA'j(3ol
%8<s'U@k"8.cJ@Vb#W(!BQ7/Y]e`QfG*sAdsZ4:,jPTmUIp@:$3<6qARjDtRZ_V"YG_`XtU-3ZER#YsRH'SiL]\pM\c`NC07ma[?Q
%qqgMim2k@,$N\#Lj"3.q8c-dgg"+QHj@4&&m!N09`ULd2:iaDNhM_R`(#SIDKsa(UH_3rmYs>hlJ]>F+]/$9q4)U2t,jk>dO5&^9
%-AP7<0O8@,,lI3A]c@h?F/39lfhr<_G%N.:`3!2'*m\4:/d>PRi4'"r$K>FBr*kX?]2\\Ll\]DQbDd=0;VXUrrVdA'p%')JZ?X/C
%'K7<&1mlS3D+C[k)E'HF]rA/:%!b;Yr%uNF$bgjdOJ<&E%q2Fp_?m'G!cZkP_,>'q)$kP=3d]`XQO&Idp)/e$*7uSoq]s8nS)Q^4
%/9!duhUDebfLOj:7(*M>VkP$.XB/)-CU_NTNT1\%oS$qVl79bs(R5/A/=eihQGtdd#$lNYf'%R=A>^E]B+#:U(:5s/V>>u'[t8=/
%om3sM04Q:X[F;S@H'>NBWL'Dt7-("tXhY^\bF,%`SIH(01+Wpo&=_V"ltnm:?NA_J4o-!)os8mQ;`[o\NbsFRh<6RqSL_\F8e5^2
%O+Z>k-:N],Wc8Pp<R7o9dD5#"LK5FsC4R-@Aq>^G=cR8HLogR@3#Rg7<c7MtN;"FpB#YFh<\WF<'SG/*#tSciUHO9RTH,hQ[,Rad
%B*#Zr9Qh2O!@J^HC6*<7lntP!a_E]Dm(J/TfBM&VnuWoY^Tlgl6qojib.:!EU_:$F\O9$B>!C%K>*LXhe18"s/L;[B8]=oHhC;NL
%M(k0`N@N@O+O8'GUifu@&/**-eV+_#.4@+FMWZS'g_(:D,pa*78b,Hs$c/<F`@nU6jYOEdK??WgGp8W38ca=HZc\#9aXLS"A$;"a
%-f2a7B08hQ!,/g4@p]tj5TKF$Lj`:t4[V"Q)Kp,!/K)s6TX+AdR(*>o"SIS[jZ@/"'"+)(>MTm7DMd$9"!;$s$urA'2%IbU8SjM@
%1-H+UO]bKb`Ir:pZ.#hQ[HI(&e(S,jCE7?(&03A0K5mEr*j"E5MHoY@ZFJg)#4:1>$4$?32u^K6aE)=G+Z0$!3j&#]%a&:8A0N/*
%p)8L7bOfbI7r<Cd$n)q69F:U0AK=eg;#kJ3Yu63,4f&7H$K9;[W;seZc!]?-C@mJ3kQ,F-*Q>k*Xf+9T2bu^`&lo%<DjoZ[aQ5!,
%T9EF6JM!2s42..pNZ^518HU(JXh=`3':oM*pt;.W.EO3=Ked/B8?s)3NEnkcBs)Q9+uB\a-GElGQKPYB3%#5NXXnbAcQu,m69>f9
%f_GX_Jak=W,p[./&!>^1Y\#f<R8.SR!D\=nKt*:pCeCWqhn9gV*]>6WM=_=f!_7sNjsB>$durT=n9N3;2@f'f#4V23Dh3p\JR@'@
%28&<gfJIjD`Ms7lS&ZXI].b8u5#DtR3i,U#_?Z2u.s6'#_8062Y`k7B4\f@A>"Iak+(O!C@LmE`[JtauZ4Ruu"6oN#E(Q34.3RY+
%]CZar36VX6(T#,L5lB[U./^sCV-CVV$?LnBliFddnnbb@SjS\[m1iWioOrol`FcTebI7p47C>Hi"68e\`0Z^M"\_0B-D7\crfg]5
%^ZcmHkk]NVIl(g"9krC&"X!rOmu7_kqphARJb2>;c@.7/ERutq:Sona\FQYVIB=^9L,ntcrm/^fKB-<3T,>a-da/@r0.k2!)!oh4
%%"2ReCc:=fafmL%&$u4$'^="V5"'o9FgmX;'c[A?7B-mV)GS$r$U48]4fjSL8C*LRECGK:ij"0'`8EhE4idguUOiJ@(@cR*pksc?
%#LVB"&3rnfF+b8TiCDq2.,(ZiVS>WM@<jP02M,4p!S^c,E.')0qc8MOi_rtb!:>cfS<-YUMA/(Y00I&dKGWVJF:%JI`B#J#M2.,h
%I6A>$!KqX'k4Mrl`34%=(s&dB<G,'[`(^mTAn@r?UH@iL5g2IQg83A!P1N>0%'G<,UX6X>FD?).UW3f,ajL3?5cq;kZWDg%M/?ak
%(8.\Xr*)QjCPJrl0?p_amWY3*cL?fb;i'jE(5VoWQPF*$7HI<07?UuAGT3atK5$0l#>\^O>0MsMKFZmYKQ#8XZfdQ&6>5bnrXBiA
%>/!BGL$Z4OOJgP1LoRSud%O#u7S5AE8RdZ[Pd*>IB%9Ngp,&&P1Ki1eV7.()T7e#GWY]@gj;#Vnc>n*XMI7KOH?I.c!t7.)C2(YI
%gdBD<6)cJ98j);.pWZ=$n1H"c6^b_0(H;&)@W5P"PBoLQnR$3CQ1K'bO@$V7UcK7qP=4OfQs3[X4O-(igaaNlfJ*-4d.uEN`"$$-
%J8X*p:mZn(%#(^X+FlSBD\jE0Z8HC4nSK"6OYB9>FJ0-n#B=TmOV'N+jW\ZJ;\BK*^iBfC!P\P9NB5f,@FiDYd$JYOJHk.r`:=5T
%^iUTPIY*B^j9hP^fbs6VFc/Hgg-,#6o'^GNU"Igd/B/CfScnmY;3*tu_($tVfhaRDqqk9P88P(BRi8_@&faSul<<ZkapbShKp=%4
%O="<@V4_P>h2ND;ljYU[3sS`77/W@hT4m!AC1KZF0a24k[Omg_Vi3bD8!EiZZ3"d%hX!"f0mL8@2F(5>*PqN80o'5/`9WdrZ%1)(
%^+]C`<,OV/E/?5.AR<c$-?H")cDECt%PJA$>C7%'XPf/,Tql.C&]=]_NNso)`(C"%?U`\$U7qC]-F)PD3e511.hqNuQIZtS#uUM4
%([$-C3c\&B*5sPoNjY7bXQ7T2MP7GhPIO24)\RT,^[,L:./9:SaV'o$?5oWsA-8nYCc69eOYfF';F`EAE`;`=7&krQSOMU4R+l@P
%1rZ&:I1?i=2<bBYV(jhS6--oe)kg:><!3qI`u33$(P=VJp&moF0gcK&OqHu43Mh'(a1>0[@qdE2$./PZ<q?FuM_NQtOfq*$=ZJ2V
%rA+r7H;sDI)h+cceSZ8cqP^fe*,oB_>89)@aWuGP\1\AYHF.ig]'k06^`'qW/mm@nK&5V&>F2hn)@BqaC"HG%$".$k$C1LRY7bWJ
%>F$('hJsc_<B,(aj%d)/AFh0-[gQ3DCU)O[]:7dF+HcOT"kC4AEF8_D2=TAXpTK&?qO9-Fr83iZSj0so55V5ohnK#T2_SKcp[ZSd
%rlqo:]_K[nB.mT+7Qg22:Y1(ZqtA:X++F.ec-'`ar8IPQ^^0r'r5!$<rU,15f>%9Rrs-P4P&U~>
%AI9_PrivateDataEnd
